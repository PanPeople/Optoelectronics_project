
Opto_dev_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  080070a8  080070a8  000170a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007514  08007514  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007514  08007514  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800751c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  200001e0  080076fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080076fc  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce74  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002251  00000000  00000000  0002d07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0002f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018934  00000000  00000000  00030bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc7f  00000000  00000000  000494fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be49  00000000  00000000  0005717b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000491c  00000000  00000000  000e3018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800708c 	.word	0x0800708c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800708c 	.word	0x0800708c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <MX_GPIO_Init+0xd4>)
 8000b04:	f000 ff70 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_GPIO_Init+0xd8>)
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000b1e:	f000 fddf 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000b22:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <MX_GPIO_Init+0xd4>)
 8000b3c:	f000 fdd0 	bl	80016e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f000 fce4 	bl	8001512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f000 fcfd 	bl	800154a <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	10110000 	.word	0x10110000
 8000b64:	40011000 	.word	0x40011000

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fb74 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f832 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f7ff ff88 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b78:	f000 fae0 	bl	800113c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b7c:	f000 f9ec 	bl	8000f58 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b80:	f000 f86b 	bl	8000c5a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b84:	2100      	movs	r1, #0
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <main+0x58>)
 8000b88:	f001 fc44 	bl	8002414 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, uart_rx, 3);
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <main+0x5c>)
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <main+0x60>)
 8000b92:	f002 fa95 	bl	80030c0 <HAL_UART_Receive_IT>



  size = sprintf(message, "\nSTM32 is running...\n\r");
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <main+0x64>)
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <main+0x68>)
 8000b9a:	f003 fb7b 	bl	8004294 <siprintf>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <main+0x6c>)
 8000ba4:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)message, size, 100);
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <main+0x6c>)
 8000ba8:	881a      	ldrh	r2, [r3, #0]
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <main+0x68>)
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <main+0x60>)
 8000bb0:	f002 f9f4 	bl	8002f9c <HAL_UART_Transmit>
//
//	  if(dupa>254){
//		  dupa =10;
//	  }

	  HAL_Delay(500);
 8000bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb8:	f000 fbb0 	bl	800131c <HAL_Delay>
 8000bbc:	e7fa      	b.n	8000bb4 <main+0x4c>
 8000bbe:	bf00      	nop
 8000bc0:	2000028c 	.word	0x2000028c
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	200002d4 	.word	0x200002d4
 8000bcc:	080070a8 	.word	0x080070a8
 8000bd0:	2000020c 	.word	0x2000020c
 8000bd4:	200001fc 	.word	0x200001fc

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	; 0x40
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 feec 	bl	80039c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2310      	movs	r3, #16
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c0e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 ff39 	bl	8001a90 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c24:	f000 f860 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f9a4 	bl	8001f90 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c4e:	f000 f84b 	bl	8000ce8 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2026      	movs	r0, #38	; 0x26
 8000c64:	f000 fc55 	bl	8001512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c68:	2026      	movs	r0, #38	; 0x26
 8000c6a:	f000 fc6e 	bl	800154a <HAL_NVIC_EnableIRQ>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	sscanf(uart_rx, "%d", &x); // Using sscanf
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <HAL_UART_RxCpltCallback+0x54>)
 8000c7e:	4913      	ldr	r1, [pc, #76]	; (8000ccc <HAL_UART_RxCpltCallback+0x58>)
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c82:	f003 fb27 	bl	80042d4 <siscanf>

	if(x = 999){
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_UART_RxCpltCallback+0x54>)
 8000c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <HAL_UART_RxCpltCallback+0x60>)
 8000c94:	f000 fec0 	bl	8001a18 <HAL_GPIO_TogglePin>
		size = sprintf(message, "\n\r___________\n\rON/OFF\n");
 8000c98:	490f      	ldr	r1, [pc, #60]	; (8000cd8 <HAL_UART_RxCpltCallback+0x64>)
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <HAL_UART_RxCpltCallback+0x68>)
 8000c9c:	f003 fafa 	bl	8004294 <siprintf>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_UART_RxCpltCallback+0x6c>)
 8000ca6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)message, size, 100);
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_UART_RxCpltCallback+0x6c>)
 8000caa:	881a      	ldrh	r2, [r3, #0]
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	490b      	ldr	r1, [pc, #44]	; (8000cdc <HAL_UART_RxCpltCallback+0x68>)
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <HAL_UART_RxCpltCallback+0x70>)
 8000cb2:	f002 f973 	bl	8002f9c <HAL_UART_Transmit>

	}



    HAL_UART_Receive_IT(&huart2, uart_rx, 3);
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <HAL_UART_RxCpltCallback+0x70>)
 8000cbc:	f002 fa00 	bl	80030c0 <HAL_UART_Receive_IT>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001fe 	.word	0x200001fe
 8000ccc:	080070c0 	.word	0x080070c0
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	080070c4 	.word	0x080070c4
 8000cdc:	2000020c 	.word	0x2000020c
 8000ce0:	200001fc 	.word	0x200001fc
 8000ce4:	200002d4 	.word	0x200002d4

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_MspInit+0x5c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_MspInit+0x60>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_MspInit+0x60>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 faa1 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <USART2_IRQHandler+0x10>)
 8000dae:	f002 f9b7 	bl	8003120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200002d4 	.word	0x200002d4

08000dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc4:	f000 fe42 	bl	8001a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	return 1;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <_kill>:

int _kill(int pid, int sig)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000de4:	f002 fdc4 	bl	8003970 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2216      	movs	r2, #22
 8000dec:	601a      	str	r2, [r3, #0]
	return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_exit>:

void _exit (int status)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e02:	f04f 31ff 	mov.w	r1, #4294967295
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffe7 	bl	8000dda <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e0c:	e7fe      	b.n	8000e0c <_exit+0x12>

08000e0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e00a      	b.n	8000e36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e20:	f3af 8000 	nop.w
 8000e24:	4601      	mov	r1, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	60ba      	str	r2, [r7, #8]
 8000e2c:	b2ca      	uxtb	r2, r1
 8000e2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dbf0      	blt.n	8000e20 <_read+0x12>
	}

return len;
 8000e3e:	687b      	ldr	r3, [r7, #4]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e009      	b.n	8000e6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbf1      	blt.n	8000e5a <_write+0x12>
	}
	return len;
 8000e76:	687b      	ldr	r3, [r7, #4]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_close>:

int _close(int file)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	return -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <_isatty>:

int _isatty(int file)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	return 1;
 8000ebc:	2301      	movs	r3, #1
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f002 fd2e 	bl	8003970 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20005000 	.word	0x20005000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000200 	.word	0x20000200
 8000f48:	20000330 	.word	0x20000330

08000f4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fd17 	bl	80039c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <MX_TIM1_Init+0x138>)
 8000f98:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <MX_TIM1_Init+0x13c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <MX_TIM1_Init+0x138>)
 8000f9e:	220b      	movs	r2, #11
 8000fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 254;
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <MX_TIM1_Init+0x138>)
 8000faa:	22fe      	movs	r2, #254	; 0xfe
 8000fac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc0:	4833      	ldr	r0, [pc, #204]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fc2:	f001 f97f 	bl	80022c4 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fcc:	f7ff fe8c 	bl	8000ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fda:	4619      	mov	r1, r3
 8000fdc:	482c      	ldr	r0, [pc, #176]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fde:	f001 fb79 	bl	80026d4 <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000fe8:	f7ff fe7e 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fec:	4828      	ldr	r0, [pc, #160]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fee:	f001 f9b8 	bl	8002362 <HAL_TIM_PWM_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ff8:	f7ff fe76 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	4619      	mov	r1, r3
 800100a:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_TIM1_Init+0x138>)
 800100c:	f001 feca 	bl	8002da4 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001016:	f7ff fe67 	bl	8000ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	; 0x60
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 800101e:	2332      	movs	r3, #50	; 0x32
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <MX_TIM1_Init+0x138>)
 8001040:	f001 fa8a 	bl	8002558 <HAL_TIM_PWM_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800104a:	f7ff fe4d 	bl	8000ce8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM1_Init+0x138>)
 8001072:	f001 fef5 	bl	8002e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800107c:	f7ff fe34 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM1_Init+0x138>)
 8001082:	f000 f827 	bl	80010d4 <HAL_TIM_MspPostInit>

}
 8001086:	bf00      	nop
 8001088:	3758      	adds	r7, #88	; 0x58
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000028c 	.word	0x2000028c
 8001094:	40012c00 	.word	0x40012c00

08001098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_TIM_Base_MspInit+0x34>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10b      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_TIM_Base_MspInit+0x38>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_TIM_Base_MspInit+0x38>)
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_TIM_Base_MspInit+0x38>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40012c00 	.word	0x40012c00
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_TIM_MspPostInit+0x5c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d118      	bne.n	8001126 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_TIM_MspPostInit+0x60>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_TIM_MspPostInit+0x60>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_TIM_MspPostInit+0x60>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_TIM_MspPostInit+0x64>)
 8001122:	f000 fadd 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40012c00 	.word	0x40012c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40010800 	.word	0x40010800

0800113c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_USART2_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001174:	f001 fec5 	bl	8002f02 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f7ff fdb3 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200002d4 	.word	0x200002d4
 800118c:	40004400 	.word	0x40004400

08001190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <HAL_UART_MspInit+0x70>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d123      	bne.n	80011f8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_UART_MspInit+0x74>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_UART_MspInit+0x74>)
 80011b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ba:	61d3      	str	r3, [r2, #28]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_UART_MspInit+0x74>)
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_UART_MspInit+0x74>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_UART_MspInit+0x74>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_UART_MspInit+0x74>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011e0:	230c      	movs	r3, #12
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_UART_MspInit+0x78>)
 80011f4:	f000 fa74 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004400 	.word	0x40004400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001232:	f7ff fe8b 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f002 fba1 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123a:	f7ff fc95 	bl	8000b68 <main>
  bx lr
 800123e:	4770      	bx	lr
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001248:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 800124c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001250:	2000032c 	.word	0x2000032c

08001254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_2_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x28>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x28>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f947 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fd3e 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f95f 	bl	8001566 <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f927 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000004 	.word	0x20000004
 80012dc:	2000000c 	.word	0x2000000c
 80012e0:	20000008 	.word	0x20000008

080012e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x1c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_IncTick+0x20>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_IncTick+0x20>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	2000000c 	.word	0x2000000c
 8001304:	20000318 	.word	0x20000318

08001308 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <HAL_GetTick+0x10>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000318 	.word	0x20000318

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff fff0 	bl	8001308 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_Delay+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffe0 	bl	8001308 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000000c 	.word	0x2000000c

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4906      	ldr	r1, [pc, #24]	; (80013fc <__NVIC_EnableIRQ+0x34>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff90 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff2d 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff42 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff35 	bl	80013c8 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001590:	2b02      	cmp	r3, #2
 8001592:	d008      	beq.n	80015a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2204      	movs	r2, #4
 8001598:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e020      	b.n	80015e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 020e 	bic.w	r2, r2, #14
 80015b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001606:	2b02      	cmp	r3, #2
 8001608:	d005      	beq.n	8001616 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e051      	b.n	80016ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <HAL_DMA_Abort_IT+0xd0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d029      	beq.n	8001694 <HAL_DMA_Abort_IT+0xa0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <HAL_DMA_Abort_IT+0xd4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d022      	beq.n	8001690 <HAL_DMA_Abort_IT+0x9c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <HAL_DMA_Abort_IT+0xd8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d01a      	beq.n	800168a <HAL_DMA_Abort_IT+0x96>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_DMA_Abort_IT+0xdc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d012      	beq.n	8001684 <HAL_DMA_Abort_IT+0x90>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <HAL_DMA_Abort_IT+0xe0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00a      	beq.n	800167e <HAL_DMA_Abort_IT+0x8a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <HAL_DMA_Abort_IT+0xe4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d102      	bne.n	8001678 <HAL_DMA_Abort_IT+0x84>
 8001672:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001676:	e00e      	b.n	8001696 <HAL_DMA_Abort_IT+0xa2>
 8001678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167c:	e00b      	b.n	8001696 <HAL_DMA_Abort_IT+0xa2>
 800167e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001682:	e008      	b.n	8001696 <HAL_DMA_Abort_IT+0xa2>
 8001684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001688:	e005      	b.n	8001696 <HAL_DMA_Abort_IT+0xa2>
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	e002      	b.n	8001696 <HAL_DMA_Abort_IT+0xa2>
 8001690:	2310      	movs	r3, #16
 8001692:	e000      	b.n	8001696 <HAL_DMA_Abort_IT+0xa2>
 8001694:	2301      	movs	r3, #1
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_DMA_Abort_IT+0xe8>)
 8001698:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
    } 
  }
  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020008 	.word	0x40020008
 80016c8:	4002001c 	.word	0x4002001c
 80016cc:	40020030 	.word	0x40020030
 80016d0:	40020044 	.word	0x40020044
 80016d4:	40020058 	.word	0x40020058
 80016d8:	4002006c 	.word	0x4002006c
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e169      	b.n	80019c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8158 	bne.w	80019c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a9a      	ldr	r2, [pc, #616]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800171c:	4a98      	ldr	r2, [pc, #608]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d875      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001722:	4a98      	ldr	r2, [pc, #608]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d058      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001728:	4a96      	ldr	r2, [pc, #600]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d86f      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800172e:	4a96      	ldr	r2, [pc, #600]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d052      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001734:	4a94      	ldr	r2, [pc, #592]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d869      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800173a:	4a94      	ldr	r2, [pc, #592]	; (800198c <HAL_GPIO_Init+0x2ac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04c      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001740:	4a92      	ldr	r2, [pc, #584]	; (800198c <HAL_GPIO_Init+0x2ac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d863      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001746:	4a92      	ldr	r2, [pc, #584]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d046      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800174c:	4a90      	ldr	r2, [pc, #576]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d85d      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d82a      	bhi.n	80017ac <HAL_GPIO_Init+0xcc>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d859      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_GPIO_Init+0x80>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017db 	.word	0x080017db
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017c7 	.word	0x080017c7
 800176c:	08001809 	.word	0x08001809
 8001770:	0800180f 	.word	0x0800180f
 8001774:	0800180f 	.word	0x0800180f
 8001778:	0800180f 	.word	0x0800180f
 800177c:	0800180f 	.word	0x0800180f
 8001780:	0800180f 	.word	0x0800180f
 8001784:	0800180f 	.word	0x0800180f
 8001788:	0800180f 	.word	0x0800180f
 800178c:	0800180f 	.word	0x0800180f
 8001790:	0800180f 	.word	0x0800180f
 8001794:	0800180f 	.word	0x0800180f
 8001798:	0800180f 	.word	0x0800180f
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	4a79      	ldr	r2, [pc, #484]	; (8001994 <HAL_GPIO_Init+0x2b4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e029      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e024      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01f      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e01a      	b.n	8001810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e013      	b.n	8001810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e009      	b.n	8001810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x130>
          break;
 800180e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d801      	bhi.n	800181a <HAL_GPIO_Init+0x13a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e001      	b.n	800181e <HAL_GPIO_Init+0x13e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d802      	bhi.n	800182c <HAL_GPIO_Init+0x14c>
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x152>
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b08      	subs	r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	210f      	movs	r1, #15
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80b1 	beq.w	80019c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001878:	4a48      	ldr	r2, [pc, #288]	; (800199c <HAL_GPIO_Init+0x2bc>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HAL_GPIO_Init+0x2c0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1e8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018bc:	2303      	movs	r3, #3
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018de:	492f      	ldr	r1, [pc, #188]	; (800199c <HAL_GPIO_Init+0x2bc>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	492c      	ldr	r1, [pc, #176]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4928      	ldr	r1, [pc, #160]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491e      	ldr	r1, [pc, #120]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4918      	ldr	r1, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4914      	ldr	r1, [pc, #80]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e021      	b.n	80019c2 <HAL_GPIO_Init+0x2e2>
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40011400 	.word	0x40011400
 80019b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019be:	4013      	ands	r3, r2
 80019c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	3301      	adds	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae8e 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	372c      	adds	r7, #44	; 0x2c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43d9      	mvns	r1, r3
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	400b      	ands	r3, r1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	611a      	str	r2, [r3, #16]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f806 	bl	8001a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e26c      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab0:	4b92      	ldr	r3, [pc, #584]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001abc:	4b8f      	ldr	r3, [pc, #572]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
 8001ac8:	4b8c      	ldr	r3, [pc, #560]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4b89      	ldr	r3, [pc, #548]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x12c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d168      	bne.n	8001bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e246      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x76>
 8001af8:	4b80      	ldr	r3, [pc, #512]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a7f      	ldr	r2, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e02e      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x98>
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7a      	ldr	r2, [pc, #488]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b78      	ldr	r3, [pc, #480]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a77      	ldr	r2, [pc, #476]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xbc>
 8001b32:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a71      	ldr	r2, [pc, #452]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6e      	ldr	r2, [pc, #440]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a67      	ldr	r2, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fbcc 	bl	8001308 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fbc8 	bl	8001308 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1fa      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe4>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fbb8 	bl	8001308 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fbb4 	bl	8001308 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1e6      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x10c>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d063      	beq.n	8001c92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1ba      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4939      	ldr	r1, [pc, #228]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	e03a      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fb6d 	bl	8001308 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c32:	f7ff fb69 	bl	8001308 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e19b      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4927      	ldr	r1, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fb4c 	bl	8001308 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7ff fb48 	bl	8001308 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e17a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d03a      	beq.n	8001d14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7ff fb2c 	bl	8001308 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fb28 	bl	8001308 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e15a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 fad8 	bl	8002288 <RCC_Delay>
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fb12 	bl	8001308 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce6:	e00f      	b.n	8001d08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb0e 	bl	8001308 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d908      	bls.n	8001d08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e140      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	42420000 	.word	0x42420000
 8001d04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b9e      	ldr	r3, [pc, #632]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e9      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a6 	beq.w	8001e6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b94      	ldr	r3, [pc, #592]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a93      	ldr	r2, [pc, #588]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a8a      	ldr	r2, [pc, #552]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7ff facf 	bl	8001308 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6e:	f7ff facb 	bl	8001308 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e0fd      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x312>
 8001d94:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e02d      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x334>
 8001daa:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a75      	ldr	r2, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a72      	ldr	r2, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	e01c      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x356>
 8001dcc:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a6c      	ldr	r2, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a69      	ldr	r2, [pc, #420]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001de6:	4b67      	ldr	r3, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a66      	ldr	r2, [pc, #408]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a63      	ldr	r2, [pc, #396]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d015      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fa7f 	bl	8001308 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fa7b 	bl	8001308 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0ab      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ee      	beq.n	8001e0e <HAL_RCC_OscConfig+0x37e>
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fa69 	bl	8001308 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fa65 	bl	8001308 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e095      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ee      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a47      	ldr	r2, [pc, #284]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8081 	beq.w	8001f7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d061      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d146      	bne.n	8001f1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCC_OscConfig+0x4fc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fa39 	bl	8001308 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff fa35 	bl	8001308 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e067      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	492d      	ldr	r1, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a19      	ldr	r1, [r3, #32]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x4fc>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fa09 	bl	8001308 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff fa05 	bl	8001308 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e037      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x46a>
 8001f18:	e02f      	b.n	8001f7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_RCC_OscConfig+0x4fc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f9f2 	bl	8001308 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff f9ee 	bl	8001308 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e020      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x498>
 8001f46:	e018      	b.n	8001f7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e013      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	42420060 	.word	0x42420060

08001f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0d0      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d910      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4965      	ldr	r1, [pc, #404]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800200e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d040      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e073      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06b      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4936      	ldr	r1, [pc, #216]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7ff f942 	bl	8001308 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7ff f93e 	bl	8001308 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e053      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d210      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4922      	ldr	r1, [pc, #136]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490a      	ldr	r1, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1cc>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_ClockConfig+0x1d0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f8a0 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
 8002158:	080070f8 	.word	0x080070f8
 800215c:	20000004 	.word	0x20000004
 8002160:	20000008 	.word	0x20000008

08002164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	b490      	push	{r4, r7}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb0>)
 800216c:	1d3c      	adds	r4, r7, #4
 800216e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002174:	f240 2301 	movw	r3, #513	; 0x201
 8002178:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b04      	cmp	r3, #4
 800219c:	d002      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x40>
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0x46>
 80021a2:	e02d      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a6:	623b      	str	r3, [r7, #32]
      break;
 80021a8:	e02d      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	0c9b      	lsrs	r3, r3, #18
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021b6:	4413      	add	r3, r2
 80021b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	0c5b      	lsrs	r3, r3, #17
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021d6:	4413      	add	r3, r2
 80021d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e2:	fb02 f203 	mul.w	r2, r2, r3
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e004      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	623b      	str	r3, [r7, #32]
      break;
 80021fe:	e002      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002202:	623b      	str	r3, [r7, #32]
      break;
 8002204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002206:	6a3b      	ldr	r3, [r7, #32]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bc90      	pop	{r4, r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	080070dc 	.word	0x080070dc
 8002218:	40021000 	.word	0x40021000
 800221c:	007a1200 	.word	0x007a1200
 8002220:	003d0900 	.word	0x003d0900

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <HAL_RCC_GetHCLKFreq+0x10>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800223c:	f7ff fff2 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_GetPCLK1Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	08007108 	.word	0x08007108

08002260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002264:	f7ff ffde 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	0adb      	lsrs	r3, r3, #11
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4903      	ldr	r1, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08007108 	.word	0x08007108

08002288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <RCC_Delay+0x34>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <RCC_Delay+0x38>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0a5b      	lsrs	r3, r3, #9
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022a4:	bf00      	nop
  }
  while (Delay --);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e5a      	subs	r2, r3, #1
 80022aa:	60fa      	str	r2, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f9      	bne.n	80022a4 <RCC_Delay+0x1c>
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000004 	.word	0x20000004
 80022c0:	10624dd3 	.word	0x10624dd3

080022c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e041      	b.n	800235a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fed4 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 faaa 	bl	800285c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e041      	b.n	80023f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f839 	bl	8002400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f000 fa5b 	bl	800285c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
	...

08002414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_TIM_PWM_Start+0x24>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e022      	b.n	800247e <HAL_TIM_PWM_Start+0x6a>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d109      	bne.n	8002452 <HAL_TIM_PWM_Start+0x3e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	e015      	b.n	800247e <HAL_TIM_PWM_Start+0x6a>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d109      	bne.n	800246c <HAL_TIM_PWM_Start+0x58>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e008      	b.n	800247e <HAL_TIM_PWM_Start+0x6a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e05e      	b.n	8002544 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <HAL_TIM_PWM_Start+0x82>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	e013      	b.n	80024be <HAL_TIM_PWM_Start+0xaa>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d104      	bne.n	80024a6 <HAL_TIM_PWM_Start+0x92>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a4:	e00b      	b.n	80024be <HAL_TIM_PWM_Start+0xaa>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d104      	bne.n	80024b6 <HAL_TIM_PWM_Start+0xa2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b4:	e003      	b.n	80024be <HAL_TIM_PWM_Start+0xaa>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fc48 	bl	8002d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_TIM_PWM_Start+0x138>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d107      	bne.n	80024e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_TIM_PWM_Start+0x138>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00e      	beq.n	800250e <HAL_TIM_PWM_Start+0xfa>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d009      	beq.n	800250e <HAL_TIM_PWM_Start+0xfa>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <HAL_TIM_PWM_Start+0x13c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_TIM_PWM_Start+0xfa>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_TIM_PWM_Start+0x140>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d111      	bne.n	8002532 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d010      	beq.n	8002542 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	e007      	b.n	8002542 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800

08002558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800256e:	2302      	movs	r3, #2
 8002570:	e0ac      	b.n	80026cc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0c      	cmp	r3, #12
 800257e:	f200 809f 	bhi.w	80026c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	080025bd 	.word	0x080025bd
 800258c:	080026c1 	.word	0x080026c1
 8002590:	080026c1 	.word	0x080026c1
 8002594:	080026c1 	.word	0x080026c1
 8002598:	080025fd 	.word	0x080025fd
 800259c:	080026c1 	.word	0x080026c1
 80025a0:	080026c1 	.word	0x080026c1
 80025a4:	080026c1 	.word	0x080026c1
 80025a8:	0800263f 	.word	0x0800263f
 80025ac:	080026c1 	.word	0x080026c1
 80025b0:	080026c1 	.word	0x080026c1
 80025b4:	080026c1 	.word	0x080026c1
 80025b8:	0800267f 	.word	0x0800267f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f9ac 	bl	8002920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0204 	bic.w	r2, r2, #4
 80025e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6999      	ldr	r1, [r3, #24]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	619a      	str	r2, [r3, #24]
      break;
 80025fa:	e062      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f9f2 	bl	80029ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6999      	ldr	r1, [r3, #24]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	021a      	lsls	r2, r3, #8
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
      break;
 800263c:	e041      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fa3b 	bl	8002ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0208 	orr.w	r2, r2, #8
 8002658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0204 	bic.w	r2, r2, #4
 8002668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69d9      	ldr	r1, [r3, #28]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	61da      	str	r2, [r3, #28]
      break;
 800267c:	e021      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fa85 	bl	8002b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	021a      	lsls	r2, r3, #8
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	61da      	str	r2, [r3, #28]
      break;
 80026be:	e000      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80026c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_TIM_ConfigClockSource+0x18>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0b3      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x180>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800270a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002712:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002724:	d03e      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0xd0>
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272a:	f200 8087 	bhi.w	800283c <HAL_TIM_ConfigClockSource+0x168>
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	f000 8085 	beq.w	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273a:	d87f      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800273c:	2b70      	cmp	r3, #112	; 0x70
 800273e:	d01a      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0xa2>
 8002740:	2b70      	cmp	r3, #112	; 0x70
 8002742:	d87b      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 8002744:	2b60      	cmp	r3, #96	; 0x60
 8002746:	d050      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x116>
 8002748:	2b60      	cmp	r3, #96	; 0x60
 800274a:	d877      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800274c:	2b50      	cmp	r3, #80	; 0x50
 800274e:	d03c      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0xf6>
 8002750:	2b50      	cmp	r3, #80	; 0x50
 8002752:	d873      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d058      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x136>
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d86f      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800275c:	2b30      	cmp	r3, #48	; 0x30
 800275e:	d064      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d86b      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 8002764:	2b20      	cmp	r3, #32
 8002766:	d060      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d867      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05c      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d05a      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002774:	e062      	b.n	800283c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f000 faca 	bl	8002d1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002798:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	609a      	str	r2, [r3, #8]
      break;
 80027a2:	e04e      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f000 fab3 	bl	8002d1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027c6:	609a      	str	r2, [r3, #8]
      break;
 80027c8:	e03b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f000 fa2a 	bl	8002c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2150      	movs	r1, #80	; 0x50
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fa81 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 80027e8:	e02b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f000 fa48 	bl	8002c8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2160      	movs	r1, #96	; 0x60
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fa71 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002808:	e01b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	461a      	mov	r2, r3
 8002818:	f000 fa0a 	bl	8002c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fa61 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002828:	e00b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f000 fa58 	bl	8002cea <TIM_ITRx_SetConfig>
        break;
 800283a:	e002      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002840:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a29      	ldr	r2, [pc, #164]	; (8002914 <TIM_Base_SetConfig+0xb8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00b      	beq.n	800288c <TIM_Base_SetConfig+0x30>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287a:	d007      	beq.n	800288c <TIM_Base_SetConfig+0x30>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a26      	ldr	r2, [pc, #152]	; (8002918 <TIM_Base_SetConfig+0xbc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <TIM_Base_SetConfig+0x30>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <TIM_Base_SetConfig+0xc0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d108      	bne.n	800289e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <TIM_Base_SetConfig+0xb8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00b      	beq.n	80028be <TIM_Base_SetConfig+0x62>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d007      	beq.n	80028be <TIM_Base_SetConfig+0x62>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <TIM_Base_SetConfig+0xbc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d003      	beq.n	80028be <TIM_Base_SetConfig+0x62>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <TIM_Base_SetConfig+0xc0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d108      	bne.n	80028d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <TIM_Base_SetConfig+0xb8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d103      	bne.n	8002904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	615a      	str	r2, [r3, #20]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800

08002920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f023 0201 	bic.w	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 0302 	bic.w	r3, r3, #2
 8002968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <TIM_OC1_SetConfig+0xc8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10c      	bne.n	8002996 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0308 	bic.w	r3, r3, #8
 8002982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <TIM_OC1_SetConfig+0xc8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d111      	bne.n	80029c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	621a      	str	r2, [r3, #32]
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40012c00 	.word	0x40012c00

080029ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0210 	bic.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0320 	bic.w	r3, r3, #32
 8002a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <TIM_OC2_SetConfig+0xd0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10d      	bne.n	8002a68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a14      	ldr	r2, [pc, #80]	; (8002abc <TIM_OC2_SetConfig+0xd0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d113      	bne.n	8002a98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	40012c00 	.word	0x40012c00

08002ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <TIM_OC3_SetConfig+0xd0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10d      	bne.n	8002b3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <TIM_OC3_SetConfig+0xd0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d113      	bne.n	8002b6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40012c00 	.word	0x40012c00

08002b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	031b      	lsls	r3, r3, #12
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <TIM_OC4_SetConfig+0x98>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d109      	bne.n	8002c08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00

08002c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 030a 	bic.w	r3, r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f023 0210 	bic.w	r2, r3, #16
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	031b      	lsls	r3, r3, #12
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f043 0307 	orr.w	r3, r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b087      	sub	sp, #28
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	021a      	lsls	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2201      	movs	r2, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	401a      	ands	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e046      	b.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00e      	beq.n	8002e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e08:	d009      	beq.n	8002e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10c      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800

08002e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e03d      	b.n	8002ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e03f      	b.n	8002f94 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7fe f931 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2224      	movs	r2, #36	; 0x24
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fc84 	bl	8003854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d17c      	bne.n	80030b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_UART_Transmit+0x2c>
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e075      	b.n	80030b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Transmit+0x3e>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e06e      	b.n	80030b8 <HAL_UART_Transmit+0x11c>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2221      	movs	r2, #33	; 0x21
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f98a 	bl	8001308 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d108      	bne.n	800301e <HAL_UART_Transmit+0x82>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d104      	bne.n	800301e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e003      	b.n	8003026 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800302e:	e02a      	b.n	8003086 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2200      	movs	r2, #0
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fa37 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e036      	b.n	80030b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	3302      	adds	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e007      	b.n	8003078 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1cf      	bne.n	8003030 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	2140      	movs	r1, #64	; 0x40
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa07 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e006      	b.n	80030b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d11d      	bne.n	8003116 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_UART_Receive_IT+0x26>
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e016      	b.n	8003118 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_UART_Receive_IT+0x38>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e00f      	b.n	8003118 <HAL_UART_Receive_IT+0x58>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	461a      	mov	r2, r3
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fa18 	bl	8003542 <UART_Start_Receive_IT>
 8003112:	4603      	mov	r3, r0
 8003114:	e000      	b.n	8003118 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_UART_IRQHandler+0x52>
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fac9 	bl	8003702 <UART_Receive_IT>
      return;
 8003170:	e17b      	b.n	800346a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80b1 	beq.w	80032dc <HAL_UART_IRQHandler+0x1bc>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_UART_IRQHandler+0x70>
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80a6 	beq.w	80032dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_UART_IRQHandler+0x90>
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_UART_IRQHandler+0xb0>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f043 0202 	orr.w	r2, r3, #2
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_UART_IRQHandler+0xd0>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f043 0204 	orr.w	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00f      	beq.n	800321a <HAL_UART_IRQHandler+0xfa>
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_UART_IRQHandler+0xee>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0208 	orr.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 811e 	beq.w	8003460 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_UART_IRQHandler+0x11e>
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fa62 	bl	8003702 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_UART_IRQHandler+0x146>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d031      	beq.n	80032ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f9a4 	bl	80035b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d023      	beq.n	80032c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003288:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d013      	beq.n	80032ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	4a76      	ldr	r2, [pc, #472]	; (8003470 <HAL_UART_IRQHandler+0x350>)
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f9a8 	bl	80015f4 <HAL_DMA_Abort_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b4:	4610      	mov	r0, r2
 80032b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00e      	b.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8e3 	bl	8003486 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e00a      	b.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8df 	bl	8003486 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e006      	b.n	80032d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8db 	bl	8003486 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032d6:	e0c3      	b.n	8003460 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	bf00      	nop
    return;
 80032da:	e0c1      	b.n	8003460 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 80a1 	bne.w	8003428 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 809b 	beq.w	8003428 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8095 	beq.w	8003428 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04e      	beq.n	80033c0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800332c:	8a3b      	ldrh	r3, [r7, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8098 	beq.w	8003464 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003338:	8a3a      	ldrh	r2, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	f080 8092 	bcs.w	8003464 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8a3a      	ldrh	r2, [r7, #16]
 8003344:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b20      	cmp	r3, #32
 800334e:	d02b      	beq.n	80033a8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0210 	bic.w	r2, r2, #16
 800339c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f8eb 	bl	800157e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f86d 	bl	8003498 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033be:	e051      	b.n	8003464 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d047      	beq.n	8003468 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80033d8:	8a7b      	ldrh	r3, [r7, #18]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d044      	beq.n	8003468 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033ec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0210 	bic.w	r2, r2, #16
 800341a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800341c:	8a7b      	ldrh	r3, [r7, #18]
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f839 	bl	8003498 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003426:	e01f      	b.n	8003468 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_UART_IRQHandler+0x324>
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f8f9 	bl	8003634 <UART_Transmit_IT>
    return;
 8003442:	e012      	b.n	800346a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_UART_IRQHandler+0x34a>
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f93a 	bl	80036d2 <UART_EndTransmit_IT>
    return;
 800345e:	e004      	b.n	800346a <HAL_UART_IRQHandler+0x34a>
    return;
 8003460:	bf00      	nop
 8003462:	e002      	b.n	800346a <HAL_UART_IRQHandler+0x34a>
      return;
 8003464:	bf00      	nop
 8003466:	e000      	b.n	800346a <HAL_UART_IRQHandler+0x34a>
      return;
 8003468:	bf00      	nop
  }
}
 800346a:	3728      	adds	r7, #40	; 0x28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	0800360d 	.word	0x0800360d

08003474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034be:	e02c      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d028      	beq.n	800351a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0x30>
 80034ce:	f7fd ff1b 	bl	8001308 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d21d      	bcs.n	800351a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e00f      	b.n	800353a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d0c3      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	4613      	mov	r3, r2
 800354e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	88fa      	ldrh	r2, [r7, #6]
 800355a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2222      	movs	r2, #34	; 0x22
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0220 	orr.w	r2, r2, #32
 80035a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d107      	bne.n	80035f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0210 	bic.w	r2, r2, #16
 80035f2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff ff2d 	bl	8003486 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b21      	cmp	r3, #33	; 0x21
 8003646:	d13e      	bne.n	80036c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003650:	d114      	bne.n	800367c <UART_Transmit_IT+0x48>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d110      	bne.n	800367c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800366e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]
 800367a:	e008      	b.n	800368e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	1c59      	adds	r1, r3, #1
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6211      	str	r1, [r2, #32]
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4619      	mov	r1, r3
 800369c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff febe 	bl	8003474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b22      	cmp	r3, #34	; 0x22
 8003714:	f040 8099 	bne.w	800384a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003720:	d117      	bne.n	8003752 <UART_Receive_IT+0x50>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d113      	bne.n	8003752 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003740:	b29a      	uxth	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	1c9a      	adds	r2, r3, #2
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
 8003750:	e026      	b.n	80037a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d007      	beq.n	8003776 <UART_Receive_IT+0x74>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <UART_Receive_IT+0x82>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e008      	b.n	8003796 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	b2da      	uxtb	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4619      	mov	r1, r3
 80037ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d148      	bne.n	8003846 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0220 	bic.w	r2, r2, #32
 80037c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d123      	bne.n	800383c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0210 	bic.w	r2, r2, #16
 8003808:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b10      	cmp	r3, #16
 8003816:	d10a      	bne.n	800382e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fe2f 	bl	8003498 <HAL_UARTEx_RxEventCallback>
 800383a:	e002      	b.n	8003842 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fd fa19 	bl	8000c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e002      	b.n	800384c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800388e:	f023 030c 	bic.w	r3, r3, #12
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <UART_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038bc:	f7fe fcd0 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	e002      	b.n	80038ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fcb8 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009a      	lsls	r2, r3, #2
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <UART_SetConfig+0x118>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	0119      	lsls	r1, r3, #4
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <UART_SetConfig+0x118>)
 8003902:	fba3 0302 	umull	r0, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2064      	movs	r0, #100	; 0x64
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <UART_SetConfig+0x118>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003920:	4419      	add	r1, r3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009a      	lsls	r2, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fbb2 f2f3 	udiv	r2, r2, r3
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <UART_SetConfig+0x118>)
 800393a:	fba3 0302 	umull	r0, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2064      	movs	r0, #100	; 0x64
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	3332      	adds	r3, #50	; 0x32
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <UART_SetConfig+0x118>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	440a      	add	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40013800 	.word	0x40013800
 800396c:	51eb851f 	.word	0x51eb851f

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000010 	.word	0x20000010

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	2600      	movs	r6, #0
 8003980:	4d0c      	ldr	r5, [pc, #48]	; (80039b4 <__libc_init_array+0x38>)
 8003982:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003984:	1b64      	subs	r4, r4, r5
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	f003 fb7e 	bl	800708c <_init>
 8003990:	2600      	movs	r6, #0
 8003992:	4d0a      	ldr	r5, [pc, #40]	; (80039bc <__libc_init_array+0x40>)
 8003994:	4c0a      	ldr	r4, [pc, #40]	; (80039c0 <__libc_init_array+0x44>)
 8003996:	1b64      	subs	r4, r4, r5
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08007514 	.word	0x08007514
 80039b8:	08007514 	.word	0x08007514
 80039bc:	08007514 	.word	0x08007514
 80039c0:	08007518 	.word	0x08007518

080039c4 <memset>:
 80039c4:	4603      	mov	r3, r0
 80039c6:	4402      	add	r2, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <__cvt>:
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039da:	461f      	mov	r7, r3
 80039dc:	bfbb      	ittet	lt
 80039de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80039e2:	461f      	movlt	r7, r3
 80039e4:	2300      	movge	r3, #0
 80039e6:	232d      	movlt	r3, #45	; 0x2d
 80039e8:	b088      	sub	sp, #32
 80039ea:	4614      	mov	r4, r2
 80039ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80039ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80039f0:	7013      	strb	r3, [r2, #0]
 80039f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80039f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80039f8:	f023 0820 	bic.w	r8, r3, #32
 80039fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a00:	d005      	beq.n	8003a0e <__cvt+0x3a>
 8003a02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a06:	d100      	bne.n	8003a0a <__cvt+0x36>
 8003a08:	3501      	adds	r5, #1
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e000      	b.n	8003a10 <__cvt+0x3c>
 8003a0e:	2303      	movs	r3, #3
 8003a10:	aa07      	add	r2, sp, #28
 8003a12:	9204      	str	r2, [sp, #16]
 8003a14:	aa06      	add	r2, sp, #24
 8003a16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a1a:	e9cd 3500 	strd	r3, r5, [sp]
 8003a1e:	4622      	mov	r2, r4
 8003a20:	463b      	mov	r3, r7
 8003a22:	f000 fd79 	bl	8004518 <_dtoa_r>
 8003a26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	d102      	bne.n	8003a34 <__cvt+0x60>
 8003a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a30:	07db      	lsls	r3, r3, #31
 8003a32:	d522      	bpl.n	8003a7a <__cvt+0xa6>
 8003a34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a38:	eb06 0905 	add.w	r9, r6, r5
 8003a3c:	d110      	bne.n	8003a60 <__cvt+0x8c>
 8003a3e:	7833      	ldrb	r3, [r6, #0]
 8003a40:	2b30      	cmp	r3, #48	; 0x30
 8003a42:	d10a      	bne.n	8003a5a <__cvt+0x86>
 8003a44:	2200      	movs	r2, #0
 8003a46:	2300      	movs	r3, #0
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4639      	mov	r1, r7
 8003a4c:	f7fc ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8003a50:	b918      	cbnz	r0, 8003a5a <__cvt+0x86>
 8003a52:	f1c5 0501 	rsb	r5, r5, #1
 8003a56:	f8ca 5000 	str.w	r5, [sl]
 8003a5a:	f8da 3000 	ldr.w	r3, [sl]
 8003a5e:	4499      	add	r9, r3
 8003a60:	2200      	movs	r2, #0
 8003a62:	2300      	movs	r3, #0
 8003a64:	4620      	mov	r0, r4
 8003a66:	4639      	mov	r1, r7
 8003a68:	f7fc ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8003a6c:	b108      	cbz	r0, 8003a72 <__cvt+0x9e>
 8003a6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003a72:	2230      	movs	r2, #48	; 0x30
 8003a74:	9b07      	ldr	r3, [sp, #28]
 8003a76:	454b      	cmp	r3, r9
 8003a78:	d307      	bcc.n	8003a8a <__cvt+0xb6>
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	9b07      	ldr	r3, [sp, #28]
 8003a7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a80:	1b9b      	subs	r3, r3, r6
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	b008      	add	sp, #32
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	9107      	str	r1, [sp, #28]
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e7f0      	b.n	8003a74 <__cvt+0xa0>

08003a92 <__exponent>:
 8003a92:	4603      	mov	r3, r0
 8003a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a96:	2900      	cmp	r1, #0
 8003a98:	f803 2b02 	strb.w	r2, [r3], #2
 8003a9c:	bfb6      	itet	lt
 8003a9e:	222d      	movlt	r2, #45	; 0x2d
 8003aa0:	222b      	movge	r2, #43	; 0x2b
 8003aa2:	4249      	neglt	r1, r1
 8003aa4:	2909      	cmp	r1, #9
 8003aa6:	7042      	strb	r2, [r0, #1]
 8003aa8:	dd2b      	ble.n	8003b02 <__exponent+0x70>
 8003aaa:	f10d 0407 	add.w	r4, sp, #7
 8003aae:	46a4      	mov	ip, r4
 8003ab0:	270a      	movs	r7, #10
 8003ab2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003ab6:	460a      	mov	r2, r1
 8003ab8:	46a6      	mov	lr, r4
 8003aba:	fb07 1516 	mls	r5, r7, r6, r1
 8003abe:	2a63      	cmp	r2, #99	; 0x63
 8003ac0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003aca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ace:	dcf0      	bgt.n	8003ab2 <__exponent+0x20>
 8003ad0:	3130      	adds	r1, #48	; 0x30
 8003ad2:	f1ae 0502 	sub.w	r5, lr, #2
 8003ad6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ada:	4629      	mov	r1, r5
 8003adc:	1c44      	adds	r4, r0, #1
 8003ade:	4561      	cmp	r1, ip
 8003ae0:	d30a      	bcc.n	8003af8 <__exponent+0x66>
 8003ae2:	f10d 0209 	add.w	r2, sp, #9
 8003ae6:	eba2 020e 	sub.w	r2, r2, lr
 8003aea:	4565      	cmp	r5, ip
 8003aec:	bf88      	it	hi
 8003aee:	2200      	movhi	r2, #0
 8003af0:	4413      	add	r3, r2
 8003af2:	1a18      	subs	r0, r3, r0
 8003af4:	b003      	add	sp, #12
 8003af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003afc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b00:	e7ed      	b.n	8003ade <__exponent+0x4c>
 8003b02:	2330      	movs	r3, #48	; 0x30
 8003b04:	3130      	adds	r1, #48	; 0x30
 8003b06:	7083      	strb	r3, [r0, #2]
 8003b08:	70c1      	strb	r1, [r0, #3]
 8003b0a:	1d03      	adds	r3, r0, #4
 8003b0c:	e7f1      	b.n	8003af2 <__exponent+0x60>
	...

08003b10 <_printf_float>:
 8003b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b14:	b091      	sub	sp, #68	; 0x44
 8003b16:	460c      	mov	r4, r1
 8003b18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	461f      	mov	r7, r3
 8003b20:	4605      	mov	r5, r0
 8003b22:	f001 fae7 	bl	80050f4 <_localeconv_r>
 8003b26:	6803      	ldr	r3, [r0, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b2c:	f7fc fb10 	bl	8000150 <strlen>
 8003b30:	2300      	movs	r3, #0
 8003b32:	930e      	str	r3, [sp, #56]	; 0x38
 8003b34:	f8d8 3000 	ldr.w	r3, [r8]
 8003b38:	900a      	str	r0, [sp, #40]	; 0x28
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	f103 0208 	add.w	r2, r3, #8
 8003b44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003b48:	f8d4 b000 	ldr.w	fp, [r4]
 8003b4c:	f8c8 2000 	str.w	r2, [r8]
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003b58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003b5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	4640      	mov	r0, r8
 8003b68:	4b9c      	ldr	r3, [pc, #624]	; (8003ddc <_printf_float+0x2cc>)
 8003b6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b6c:	f7fc ff4e 	bl	8000a0c <__aeabi_dcmpun>
 8003b70:	bb70      	cbnz	r0, 8003bd0 <_printf_float+0xc0>
 8003b72:	f04f 32ff 	mov.w	r2, #4294967295
 8003b76:	4640      	mov	r0, r8
 8003b78:	4b98      	ldr	r3, [pc, #608]	; (8003ddc <_printf_float+0x2cc>)
 8003b7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b7c:	f7fc ff28 	bl	80009d0 <__aeabi_dcmple>
 8003b80:	bb30      	cbnz	r0, 8003bd0 <_printf_float+0xc0>
 8003b82:	2200      	movs	r2, #0
 8003b84:	2300      	movs	r3, #0
 8003b86:	4640      	mov	r0, r8
 8003b88:	4651      	mov	r1, sl
 8003b8a:	f7fc ff17 	bl	80009bc <__aeabi_dcmplt>
 8003b8e:	b110      	cbz	r0, 8003b96 <_printf_float+0x86>
 8003b90:	232d      	movs	r3, #45	; 0x2d
 8003b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b96:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <_printf_float+0x2d0>)
 8003b98:	4892      	ldr	r0, [pc, #584]	; (8003de4 <_printf_float+0x2d4>)
 8003b9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b9e:	bf94      	ite	ls
 8003ba0:	4698      	movls	r8, r3
 8003ba2:	4680      	movhi	r8, r0
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f04f 0a00 	mov.w	sl, #0
 8003baa:	6123      	str	r3, [r4, #16]
 8003bac:	f02b 0304 	bic.w	r3, fp, #4
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	4633      	mov	r3, r6
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	9700      	str	r7, [sp, #0]
 8003bba:	aa0f      	add	r2, sp, #60	; 0x3c
 8003bbc:	f000 f9d4 	bl	8003f68 <_printf_common>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	f040 8090 	bne.w	8003ce6 <_printf_float+0x1d6>
 8003bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bca:	b011      	add	sp, #68	; 0x44
 8003bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	4653      	mov	r3, sl
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	f7fc ff18 	bl	8000a0c <__aeabi_dcmpun>
 8003bdc:	b148      	cbz	r0, 8003bf2 <_printf_float+0xe2>
 8003bde:	f1ba 0f00 	cmp.w	sl, #0
 8003be2:	bfb8      	it	lt
 8003be4:	232d      	movlt	r3, #45	; 0x2d
 8003be6:	4880      	ldr	r0, [pc, #512]	; (8003de8 <_printf_float+0x2d8>)
 8003be8:	bfb8      	it	lt
 8003bea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003bee:	4b7f      	ldr	r3, [pc, #508]	; (8003dec <_printf_float+0x2dc>)
 8003bf0:	e7d3      	b.n	8003b9a <_printf_float+0x8a>
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	d142      	bne.n	8003c82 <_printf_float+0x172>
 8003bfc:	2306      	movs	r3, #6
 8003bfe:	6063      	str	r3, [r4, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	9206      	str	r2, [sp, #24]
 8003c04:	aa0e      	add	r2, sp, #56	; 0x38
 8003c06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003c0a:	aa0d      	add	r2, sp, #52	; 0x34
 8003c0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003c10:	9203      	str	r2, [sp, #12]
 8003c12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003c16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	4642      	mov	r2, r8
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4628      	mov	r0, r5
 8003c24:	4653      	mov	r3, sl
 8003c26:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c28:	f7ff fed4 	bl	80039d4 <__cvt>
 8003c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c2e:	4680      	mov	r8, r0
 8003c30:	2947      	cmp	r1, #71	; 0x47
 8003c32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c34:	d108      	bne.n	8003c48 <_printf_float+0x138>
 8003c36:	1cc8      	adds	r0, r1, #3
 8003c38:	db02      	blt.n	8003c40 <_printf_float+0x130>
 8003c3a:	6863      	ldr	r3, [r4, #4]
 8003c3c:	4299      	cmp	r1, r3
 8003c3e:	dd40      	ble.n	8003cc2 <_printf_float+0x1b2>
 8003c40:	f1a9 0902 	sub.w	r9, r9, #2
 8003c44:	fa5f f989 	uxtb.w	r9, r9
 8003c48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c4c:	d81f      	bhi.n	8003c8e <_printf_float+0x17e>
 8003c4e:	464a      	mov	r2, r9
 8003c50:	3901      	subs	r1, #1
 8003c52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003c56:	910d      	str	r1, [sp, #52]	; 0x34
 8003c58:	f7ff ff1b 	bl	8003a92 <__exponent>
 8003c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c5e:	4682      	mov	sl, r0
 8003c60:	1813      	adds	r3, r2, r0
 8003c62:	2a01      	cmp	r2, #1
 8003c64:	6123      	str	r3, [r4, #16]
 8003c66:	dc02      	bgt.n	8003c6e <_printf_float+0x15e>
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	07d2      	lsls	r2, r2, #31
 8003c6c:	d501      	bpl.n	8003c72 <_printf_float+0x162>
 8003c6e:	3301      	adds	r3, #1
 8003c70:	6123      	str	r3, [r4, #16]
 8003c72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d09b      	beq.n	8003bb2 <_printf_float+0xa2>
 8003c7a:	232d      	movs	r3, #45	; 0x2d
 8003c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c80:	e797      	b.n	8003bb2 <_printf_float+0xa2>
 8003c82:	2947      	cmp	r1, #71	; 0x47
 8003c84:	d1bc      	bne.n	8003c00 <_printf_float+0xf0>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ba      	bne.n	8003c00 <_printf_float+0xf0>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e7b7      	b.n	8003bfe <_printf_float+0xee>
 8003c8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003c92:	d118      	bne.n	8003cc6 <_printf_float+0x1b6>
 8003c94:	2900      	cmp	r1, #0
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	dd0b      	ble.n	8003cb2 <_printf_float+0x1a2>
 8003c9a:	6121      	str	r1, [r4, #16]
 8003c9c:	b913      	cbnz	r3, 8003ca4 <_printf_float+0x194>
 8003c9e:	6822      	ldr	r2, [r4, #0]
 8003ca0:	07d0      	lsls	r0, r2, #31
 8003ca2:	d502      	bpl.n	8003caa <_printf_float+0x19a>
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	440b      	add	r3, r1
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	f04f 0a00 	mov.w	sl, #0
 8003cae:	65a1      	str	r1, [r4, #88]	; 0x58
 8003cb0:	e7df      	b.n	8003c72 <_printf_float+0x162>
 8003cb2:	b913      	cbnz	r3, 8003cba <_printf_float+0x1aa>
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	07d2      	lsls	r2, r2, #31
 8003cb8:	d501      	bpl.n	8003cbe <_printf_float+0x1ae>
 8003cba:	3302      	adds	r3, #2
 8003cbc:	e7f4      	b.n	8003ca8 <_printf_float+0x198>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e7f2      	b.n	8003ca8 <_printf_float+0x198>
 8003cc2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cc8:	4299      	cmp	r1, r3
 8003cca:	db05      	blt.n	8003cd8 <_printf_float+0x1c8>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	6121      	str	r1, [r4, #16]
 8003cd0:	07d8      	lsls	r0, r3, #31
 8003cd2:	d5ea      	bpl.n	8003caa <_printf_float+0x19a>
 8003cd4:	1c4b      	adds	r3, r1, #1
 8003cd6:	e7e7      	b.n	8003ca8 <_printf_float+0x198>
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	bfcc      	ite	gt
 8003cdc:	2201      	movgt	r2, #1
 8003cde:	f1c1 0202 	rsble	r2, r1, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	e7e0      	b.n	8003ca8 <_printf_float+0x198>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	055a      	lsls	r2, r3, #21
 8003cea:	d407      	bmi.n	8003cfc <_printf_float+0x1ec>
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	4642      	mov	r2, r8
 8003cf0:	4631      	mov	r1, r6
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	47b8      	blx	r7
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d12b      	bne.n	8003d52 <_printf_float+0x242>
 8003cfa:	e764      	b.n	8003bc6 <_printf_float+0xb6>
 8003cfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d00:	f240 80dd 	bls.w	8003ebe <_printf_float+0x3ae>
 8003d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f7fc fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d033      	beq.n	8003d7c <_printf_float+0x26c>
 8003d14:	2301      	movs	r3, #1
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <_printf_float+0x2e0>)
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f af51 	beq.w	8003bc6 <_printf_float+0xb6>
 8003d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	db02      	blt.n	8003d32 <_printf_float+0x222>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	07d8      	lsls	r0, r3, #31
 8003d30:	d50f      	bpl.n	8003d52 <_printf_float+0x242>
 8003d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d36:	4631      	mov	r1, r6
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f43f af42 	beq.w	8003bc6 <_printf_float+0xb6>
 8003d42:	f04f 0800 	mov.w	r8, #0
 8003d46:	f104 091a 	add.w	r9, r4, #26
 8003d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	4543      	cmp	r3, r8
 8003d50:	dc09      	bgt.n	8003d66 <_printf_float+0x256>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	079b      	lsls	r3, r3, #30
 8003d56:	f100 8102 	bmi.w	8003f5e <_printf_float+0x44e>
 8003d5a:	68e0      	ldr	r0, [r4, #12]
 8003d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d5e:	4298      	cmp	r0, r3
 8003d60:	bfb8      	it	lt
 8003d62:	4618      	movlt	r0, r3
 8003d64:	e731      	b.n	8003bca <_printf_float+0xba>
 8003d66:	2301      	movs	r3, #1
 8003d68:	464a      	mov	r2, r9
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	47b8      	blx	r7
 8003d70:	3001      	adds	r0, #1
 8003d72:	f43f af28 	beq.w	8003bc6 <_printf_float+0xb6>
 8003d76:	f108 0801 	add.w	r8, r8, #1
 8003d7a:	e7e6      	b.n	8003d4a <_printf_float+0x23a>
 8003d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	dc38      	bgt.n	8003df4 <_printf_float+0x2e4>
 8003d82:	2301      	movs	r3, #1
 8003d84:	4631      	mov	r1, r6
 8003d86:	4628      	mov	r0, r5
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <_printf_float+0x2e0>)
 8003d8a:	47b8      	blx	r7
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	f43f af1a 	beq.w	8003bc6 <_printf_float+0xb6>
 8003d92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d102      	bne.n	8003da0 <_printf_float+0x290>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	07d9      	lsls	r1, r3, #31
 8003d9e:	d5d8      	bpl.n	8003d52 <_printf_float+0x242>
 8003da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003da4:	4631      	mov	r1, r6
 8003da6:	4628      	mov	r0, r5
 8003da8:	47b8      	blx	r7
 8003daa:	3001      	adds	r0, #1
 8003dac:	f43f af0b 	beq.w	8003bc6 <_printf_float+0xb6>
 8003db0:	f04f 0900 	mov.w	r9, #0
 8003db4:	f104 0a1a 	add.w	sl, r4, #26
 8003db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dba:	425b      	negs	r3, r3
 8003dbc:	454b      	cmp	r3, r9
 8003dbe:	dc01      	bgt.n	8003dc4 <_printf_float+0x2b4>
 8003dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dc2:	e794      	b.n	8003cee <_printf_float+0x1de>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4652      	mov	r2, sl
 8003dc8:	4631      	mov	r1, r6
 8003dca:	4628      	mov	r0, r5
 8003dcc:	47b8      	blx	r7
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f43f aef9 	beq.w	8003bc6 <_printf_float+0xb6>
 8003dd4:	f109 0901 	add.w	r9, r9, #1
 8003dd8:	e7ee      	b.n	8003db8 <_printf_float+0x2a8>
 8003dda:	bf00      	nop
 8003ddc:	7fefffff 	.word	0x7fefffff
 8003de0:	08007114 	.word	0x08007114
 8003de4:	08007118 	.word	0x08007118
 8003de8:	08007120 	.word	0x08007120
 8003dec:	0800711c 	.word	0x0800711c
 8003df0:	08007351 	.word	0x08007351
 8003df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	bfa8      	it	ge
 8003dfc:	461a      	movge	r2, r3
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	4691      	mov	r9, r2
 8003e02:	dc37      	bgt.n	8003e74 <_printf_float+0x364>
 8003e04:	f04f 0b00 	mov.w	fp, #0
 8003e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e0c:	f104 021a 	add.w	r2, r4, #26
 8003e10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003e14:	ebaa 0309 	sub.w	r3, sl, r9
 8003e18:	455b      	cmp	r3, fp
 8003e1a:	dc33      	bgt.n	8003e84 <_printf_float+0x374>
 8003e1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e20:	429a      	cmp	r2, r3
 8003e22:	db3b      	blt.n	8003e9c <_printf_float+0x38c>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	07da      	lsls	r2, r3, #31
 8003e28:	d438      	bmi.n	8003e9c <_printf_float+0x38c>
 8003e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e2e:	eba2 030a 	sub.w	r3, r2, sl
 8003e32:	eba2 0901 	sub.w	r9, r2, r1
 8003e36:	4599      	cmp	r9, r3
 8003e38:	bfa8      	it	ge
 8003e3a:	4699      	movge	r9, r3
 8003e3c:	f1b9 0f00 	cmp.w	r9, #0
 8003e40:	dc34      	bgt.n	8003eac <_printf_float+0x39c>
 8003e42:	f04f 0800 	mov.w	r8, #0
 8003e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e4a:	f104 0a1a 	add.w	sl, r4, #26
 8003e4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	eba3 0309 	sub.w	r3, r3, r9
 8003e58:	4543      	cmp	r3, r8
 8003e5a:	f77f af7a 	ble.w	8003d52 <_printf_float+0x242>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4652      	mov	r2, sl
 8003e62:	4631      	mov	r1, r6
 8003e64:	4628      	mov	r0, r5
 8003e66:	47b8      	blx	r7
 8003e68:	3001      	adds	r0, #1
 8003e6a:	f43f aeac 	beq.w	8003bc6 <_printf_float+0xb6>
 8003e6e:	f108 0801 	add.w	r8, r8, #1
 8003e72:	e7ec      	b.n	8003e4e <_printf_float+0x33e>
 8003e74:	4613      	mov	r3, r2
 8003e76:	4631      	mov	r1, r6
 8003e78:	4642      	mov	r2, r8
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d1c0      	bne.n	8003e04 <_printf_float+0x2f4>
 8003e82:	e6a0      	b.n	8003bc6 <_printf_float+0xb6>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e8c:	47b8      	blx	r7
 8003e8e:	3001      	adds	r0, #1
 8003e90:	f43f ae99 	beq.w	8003bc6 <_printf_float+0xb6>
 8003e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e96:	f10b 0b01 	add.w	fp, fp, #1
 8003e9a:	e7b9      	b.n	8003e10 <_printf_float+0x300>
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	47b8      	blx	r7
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d1bf      	bne.n	8003e2a <_printf_float+0x31a>
 8003eaa:	e68c      	b.n	8003bc6 <_printf_float+0xb6>
 8003eac:	464b      	mov	r3, r9
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	eb08 020a 	add.w	r2, r8, sl
 8003eb6:	47b8      	blx	r7
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d1c2      	bne.n	8003e42 <_printf_float+0x332>
 8003ebc:	e683      	b.n	8003bc6 <_printf_float+0xb6>
 8003ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ec0:	2a01      	cmp	r2, #1
 8003ec2:	dc01      	bgt.n	8003ec8 <_printf_float+0x3b8>
 8003ec4:	07db      	lsls	r3, r3, #31
 8003ec6:	d537      	bpl.n	8003f38 <_printf_float+0x428>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4642      	mov	r2, r8
 8003ecc:	4631      	mov	r1, r6
 8003ece:	4628      	mov	r0, r5
 8003ed0:	47b8      	blx	r7
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	f43f ae77 	beq.w	8003bc6 <_printf_float+0xb6>
 8003ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003edc:	4631      	mov	r1, r6
 8003ede:	4628      	mov	r0, r5
 8003ee0:	47b8      	blx	r7
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	f43f ae6f 	beq.w	8003bc6 <_printf_float+0xb6>
 8003ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003eec:	2200      	movs	r2, #0
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f7fc fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 8003ef4:	b9d8      	cbnz	r0, 8003f2e <_printf_float+0x41e>
 8003ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ef8:	f108 0201 	add.w	r2, r8, #1
 8003efc:	3b01      	subs	r3, #1
 8003efe:	4631      	mov	r1, r6
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b8      	blx	r7
 8003f04:	3001      	adds	r0, #1
 8003f06:	d10e      	bne.n	8003f26 <_printf_float+0x416>
 8003f08:	e65d      	b.n	8003bc6 <_printf_float+0xb6>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	464a      	mov	r2, r9
 8003f0e:	4631      	mov	r1, r6
 8003f10:	4628      	mov	r0, r5
 8003f12:	47b8      	blx	r7
 8003f14:	3001      	adds	r0, #1
 8003f16:	f43f ae56 	beq.w	8003bc6 <_printf_float+0xb6>
 8003f1a:	f108 0801 	add.w	r8, r8, #1
 8003f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f20:	3b01      	subs	r3, #1
 8003f22:	4543      	cmp	r3, r8
 8003f24:	dcf1      	bgt.n	8003f0a <_printf_float+0x3fa>
 8003f26:	4653      	mov	r3, sl
 8003f28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f2c:	e6e0      	b.n	8003cf0 <_printf_float+0x1e0>
 8003f2e:	f04f 0800 	mov.w	r8, #0
 8003f32:	f104 091a 	add.w	r9, r4, #26
 8003f36:	e7f2      	b.n	8003f1e <_printf_float+0x40e>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	e7df      	b.n	8003efe <_printf_float+0x3ee>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	464a      	mov	r2, r9
 8003f42:	4631      	mov	r1, r6
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b8      	blx	r7
 8003f48:	3001      	adds	r0, #1
 8003f4a:	f43f ae3c 	beq.w	8003bc6 <_printf_float+0xb6>
 8003f4e:	f108 0801 	add.w	r8, r8, #1
 8003f52:	68e3      	ldr	r3, [r4, #12]
 8003f54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003f56:	1a5b      	subs	r3, r3, r1
 8003f58:	4543      	cmp	r3, r8
 8003f5a:	dcf0      	bgt.n	8003f3e <_printf_float+0x42e>
 8003f5c:	e6fd      	b.n	8003d5a <_printf_float+0x24a>
 8003f5e:	f04f 0800 	mov.w	r8, #0
 8003f62:	f104 0919 	add.w	r9, r4, #25
 8003f66:	e7f4      	b.n	8003f52 <_printf_float+0x442>

08003f68 <_printf_common>:
 8003f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	4699      	mov	r9, r3
 8003f70:	688a      	ldr	r2, [r1, #8]
 8003f72:	690b      	ldr	r3, [r1, #16]
 8003f74:	4607      	mov	r7, r0
 8003f76:	4293      	cmp	r3, r2
 8003f78:	bfb8      	it	lt
 8003f7a:	4613      	movlt	r3, r2
 8003f7c:	6033      	str	r3, [r6, #0]
 8003f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f82:	460c      	mov	r4, r1
 8003f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f88:	b10a      	cbz	r2, 8003f8e <_printf_common+0x26>
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	0699      	lsls	r1, r3, #26
 8003f92:	bf42      	ittt	mi
 8003f94:	6833      	ldrmi	r3, [r6, #0]
 8003f96:	3302      	addmi	r3, #2
 8003f98:	6033      	strmi	r3, [r6, #0]
 8003f9a:	6825      	ldr	r5, [r4, #0]
 8003f9c:	f015 0506 	ands.w	r5, r5, #6
 8003fa0:	d106      	bne.n	8003fb0 <_printf_common+0x48>
 8003fa2:	f104 0a19 	add.w	sl, r4, #25
 8003fa6:	68e3      	ldr	r3, [r4, #12]
 8003fa8:	6832      	ldr	r2, [r6, #0]
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	42ab      	cmp	r3, r5
 8003fae:	dc28      	bgt.n	8004002 <_printf_common+0x9a>
 8003fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb4:	1e13      	subs	r3, r2, #0
 8003fb6:	6822      	ldr	r2, [r4, #0]
 8003fb8:	bf18      	it	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	0692      	lsls	r2, r2, #26
 8003fbe:	d42d      	bmi.n	800401c <_printf_common+0xb4>
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d020      	beq.n	8004010 <_printf_common+0xa8>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	68e5      	ldr	r5, [r4, #12]
 8003fd2:	f003 0306 	and.w	r3, r3, #6
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	bf18      	it	ne
 8003fda:	2500      	movne	r5, #0
 8003fdc:	6832      	ldr	r2, [r6, #0]
 8003fde:	f04f 0600 	mov.w	r6, #0
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	bf08      	it	eq
 8003fe6:	1aad      	subeq	r5, r5, r2
 8003fe8:	6922      	ldr	r2, [r4, #16]
 8003fea:	bf08      	it	eq
 8003fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bfc4      	itt	gt
 8003ff4:	1a9b      	subgt	r3, r3, r2
 8003ff6:	18ed      	addgt	r5, r5, r3
 8003ff8:	341a      	adds	r4, #26
 8003ffa:	42b5      	cmp	r5, r6
 8003ffc:	d11a      	bne.n	8004034 <_printf_common+0xcc>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e008      	b.n	8004014 <_printf_common+0xac>
 8004002:	2301      	movs	r3, #1
 8004004:	4652      	mov	r2, sl
 8004006:	4649      	mov	r1, r9
 8004008:	4638      	mov	r0, r7
 800400a:	47c0      	blx	r8
 800400c:	3001      	adds	r0, #1
 800400e:	d103      	bne.n	8004018 <_printf_common+0xb0>
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004018:	3501      	adds	r5, #1
 800401a:	e7c4      	b.n	8003fa6 <_printf_common+0x3e>
 800401c:	2030      	movs	r0, #48	; 0x30
 800401e:	18e1      	adds	r1, r4, r3
 8004020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800402a:	4422      	add	r2, r4
 800402c:	3302      	adds	r3, #2
 800402e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004032:	e7c5      	b.n	8003fc0 <_printf_common+0x58>
 8004034:	2301      	movs	r3, #1
 8004036:	4622      	mov	r2, r4
 8004038:	4649      	mov	r1, r9
 800403a:	4638      	mov	r0, r7
 800403c:	47c0      	blx	r8
 800403e:	3001      	adds	r0, #1
 8004040:	d0e6      	beq.n	8004010 <_printf_common+0xa8>
 8004042:	3601      	adds	r6, #1
 8004044:	e7d9      	b.n	8003ffa <_printf_common+0x92>
	...

08004048 <_printf_i>:
 8004048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	460c      	mov	r4, r1
 800404e:	7e27      	ldrb	r7, [r4, #24]
 8004050:	4691      	mov	r9, r2
 8004052:	2f78      	cmp	r7, #120	; 0x78
 8004054:	4680      	mov	r8, r0
 8004056:	469a      	mov	sl, r3
 8004058:	990c      	ldr	r1, [sp, #48]	; 0x30
 800405a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800405e:	d807      	bhi.n	8004070 <_printf_i+0x28>
 8004060:	2f62      	cmp	r7, #98	; 0x62
 8004062:	d80a      	bhi.n	800407a <_printf_i+0x32>
 8004064:	2f00      	cmp	r7, #0
 8004066:	f000 80d9 	beq.w	800421c <_printf_i+0x1d4>
 800406a:	2f58      	cmp	r7, #88	; 0x58
 800406c:	f000 80a4 	beq.w	80041b8 <_printf_i+0x170>
 8004070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004078:	e03a      	b.n	80040f0 <_printf_i+0xa8>
 800407a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800407e:	2b15      	cmp	r3, #21
 8004080:	d8f6      	bhi.n	8004070 <_printf_i+0x28>
 8004082:	a001      	add	r0, pc, #4	; (adr r0, 8004088 <_printf_i+0x40>)
 8004084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004088:	080040e1 	.word	0x080040e1
 800408c:	080040f5 	.word	0x080040f5
 8004090:	08004071 	.word	0x08004071
 8004094:	08004071 	.word	0x08004071
 8004098:	08004071 	.word	0x08004071
 800409c:	08004071 	.word	0x08004071
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	08004071 	.word	0x08004071
 80040a8:	08004071 	.word	0x08004071
 80040ac:	08004071 	.word	0x08004071
 80040b0:	08004071 	.word	0x08004071
 80040b4:	08004203 	.word	0x08004203
 80040b8:	08004125 	.word	0x08004125
 80040bc:	080041e5 	.word	0x080041e5
 80040c0:	08004071 	.word	0x08004071
 80040c4:	08004071 	.word	0x08004071
 80040c8:	08004225 	.word	0x08004225
 80040cc:	08004071 	.word	0x08004071
 80040d0:	08004125 	.word	0x08004125
 80040d4:	08004071 	.word	0x08004071
 80040d8:	08004071 	.word	0x08004071
 80040dc:	080041ed 	.word	0x080041ed
 80040e0:	680b      	ldr	r3, [r1, #0]
 80040e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040e6:	1d1a      	adds	r2, r3, #4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	600a      	str	r2, [r1, #0]
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0a4      	b.n	800423e <_printf_i+0x1f6>
 80040f4:	6825      	ldr	r5, [r4, #0]
 80040f6:	6808      	ldr	r0, [r1, #0]
 80040f8:	062e      	lsls	r6, r5, #24
 80040fa:	f100 0304 	add.w	r3, r0, #4
 80040fe:	d50a      	bpl.n	8004116 <_printf_i+0xce>
 8004100:	6805      	ldr	r5, [r0, #0]
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	2d00      	cmp	r5, #0
 8004106:	da03      	bge.n	8004110 <_printf_i+0xc8>
 8004108:	232d      	movs	r3, #45	; 0x2d
 800410a:	426d      	negs	r5, r5
 800410c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004110:	230a      	movs	r3, #10
 8004112:	485e      	ldr	r0, [pc, #376]	; (800428c <_printf_i+0x244>)
 8004114:	e019      	b.n	800414a <_printf_i+0x102>
 8004116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800411a:	6805      	ldr	r5, [r0, #0]
 800411c:	600b      	str	r3, [r1, #0]
 800411e:	bf18      	it	ne
 8004120:	b22d      	sxthne	r5, r5
 8004122:	e7ef      	b.n	8004104 <_printf_i+0xbc>
 8004124:	680b      	ldr	r3, [r1, #0]
 8004126:	6825      	ldr	r5, [r4, #0]
 8004128:	1d18      	adds	r0, r3, #4
 800412a:	6008      	str	r0, [r1, #0]
 800412c:	0628      	lsls	r0, r5, #24
 800412e:	d501      	bpl.n	8004134 <_printf_i+0xec>
 8004130:	681d      	ldr	r5, [r3, #0]
 8004132:	e002      	b.n	800413a <_printf_i+0xf2>
 8004134:	0669      	lsls	r1, r5, #25
 8004136:	d5fb      	bpl.n	8004130 <_printf_i+0xe8>
 8004138:	881d      	ldrh	r5, [r3, #0]
 800413a:	2f6f      	cmp	r7, #111	; 0x6f
 800413c:	bf0c      	ite	eq
 800413e:	2308      	moveq	r3, #8
 8004140:	230a      	movne	r3, #10
 8004142:	4852      	ldr	r0, [pc, #328]	; (800428c <_printf_i+0x244>)
 8004144:	2100      	movs	r1, #0
 8004146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800414a:	6866      	ldr	r6, [r4, #4]
 800414c:	2e00      	cmp	r6, #0
 800414e:	bfa8      	it	ge
 8004150:	6821      	ldrge	r1, [r4, #0]
 8004152:	60a6      	str	r6, [r4, #8]
 8004154:	bfa4      	itt	ge
 8004156:	f021 0104 	bicge.w	r1, r1, #4
 800415a:	6021      	strge	r1, [r4, #0]
 800415c:	b90d      	cbnz	r5, 8004162 <_printf_i+0x11a>
 800415e:	2e00      	cmp	r6, #0
 8004160:	d04d      	beq.n	80041fe <_printf_i+0x1b6>
 8004162:	4616      	mov	r6, r2
 8004164:	fbb5 f1f3 	udiv	r1, r5, r3
 8004168:	fb03 5711 	mls	r7, r3, r1, r5
 800416c:	5dc7      	ldrb	r7, [r0, r7]
 800416e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004172:	462f      	mov	r7, r5
 8004174:	42bb      	cmp	r3, r7
 8004176:	460d      	mov	r5, r1
 8004178:	d9f4      	bls.n	8004164 <_printf_i+0x11c>
 800417a:	2b08      	cmp	r3, #8
 800417c:	d10b      	bne.n	8004196 <_printf_i+0x14e>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	07df      	lsls	r7, r3, #31
 8004182:	d508      	bpl.n	8004196 <_printf_i+0x14e>
 8004184:	6923      	ldr	r3, [r4, #16]
 8004186:	6861      	ldr	r1, [r4, #4]
 8004188:	4299      	cmp	r1, r3
 800418a:	bfde      	ittt	le
 800418c:	2330      	movle	r3, #48	; 0x30
 800418e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004192:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004196:	1b92      	subs	r2, r2, r6
 8004198:	6122      	str	r2, [r4, #16]
 800419a:	464b      	mov	r3, r9
 800419c:	4621      	mov	r1, r4
 800419e:	4640      	mov	r0, r8
 80041a0:	f8cd a000 	str.w	sl, [sp]
 80041a4:	aa03      	add	r2, sp, #12
 80041a6:	f7ff fedf 	bl	8003f68 <_printf_common>
 80041aa:	3001      	adds	r0, #1
 80041ac:	d14c      	bne.n	8004248 <_printf_i+0x200>
 80041ae:	f04f 30ff 	mov.w	r0, #4294967295
 80041b2:	b004      	add	sp, #16
 80041b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b8:	4834      	ldr	r0, [pc, #208]	; (800428c <_printf_i+0x244>)
 80041ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041be:	680e      	ldr	r6, [r1, #0]
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80041c6:	061f      	lsls	r7, r3, #24
 80041c8:	600e      	str	r6, [r1, #0]
 80041ca:	d514      	bpl.n	80041f6 <_printf_i+0x1ae>
 80041cc:	07d9      	lsls	r1, r3, #31
 80041ce:	bf44      	itt	mi
 80041d0:	f043 0320 	orrmi.w	r3, r3, #32
 80041d4:	6023      	strmi	r3, [r4, #0]
 80041d6:	b91d      	cbnz	r5, 80041e0 <_printf_i+0x198>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	f023 0320 	bic.w	r3, r3, #32
 80041de:	6023      	str	r3, [r4, #0]
 80041e0:	2310      	movs	r3, #16
 80041e2:	e7af      	b.n	8004144 <_printf_i+0xfc>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	f043 0320 	orr.w	r3, r3, #32
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	2378      	movs	r3, #120	; 0x78
 80041ee:	4828      	ldr	r0, [pc, #160]	; (8004290 <_printf_i+0x248>)
 80041f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041f4:	e7e3      	b.n	80041be <_printf_i+0x176>
 80041f6:	065e      	lsls	r6, r3, #25
 80041f8:	bf48      	it	mi
 80041fa:	b2ad      	uxthmi	r5, r5
 80041fc:	e7e6      	b.n	80041cc <_printf_i+0x184>
 80041fe:	4616      	mov	r6, r2
 8004200:	e7bb      	b.n	800417a <_printf_i+0x132>
 8004202:	680b      	ldr	r3, [r1, #0]
 8004204:	6826      	ldr	r6, [r4, #0]
 8004206:	1d1d      	adds	r5, r3, #4
 8004208:	6960      	ldr	r0, [r4, #20]
 800420a:	600d      	str	r5, [r1, #0]
 800420c:	0635      	lsls	r5, r6, #24
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	d501      	bpl.n	8004216 <_printf_i+0x1ce>
 8004212:	6018      	str	r0, [r3, #0]
 8004214:	e002      	b.n	800421c <_printf_i+0x1d4>
 8004216:	0671      	lsls	r1, r6, #25
 8004218:	d5fb      	bpl.n	8004212 <_printf_i+0x1ca>
 800421a:	8018      	strh	r0, [r3, #0]
 800421c:	2300      	movs	r3, #0
 800421e:	4616      	mov	r6, r2
 8004220:	6123      	str	r3, [r4, #16]
 8004222:	e7ba      	b.n	800419a <_printf_i+0x152>
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	600a      	str	r2, [r1, #0]
 800422a:	681e      	ldr	r6, [r3, #0]
 800422c:	2100      	movs	r1, #0
 800422e:	4630      	mov	r0, r6
 8004230:	6862      	ldr	r2, [r4, #4]
 8004232:	f000 ff7d 	bl	8005130 <memchr>
 8004236:	b108      	cbz	r0, 800423c <_printf_i+0x1f4>
 8004238:	1b80      	subs	r0, r0, r6
 800423a:	6060      	str	r0, [r4, #4]
 800423c:	6863      	ldr	r3, [r4, #4]
 800423e:	6123      	str	r3, [r4, #16]
 8004240:	2300      	movs	r3, #0
 8004242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004246:	e7a8      	b.n	800419a <_printf_i+0x152>
 8004248:	4632      	mov	r2, r6
 800424a:	4649      	mov	r1, r9
 800424c:	4640      	mov	r0, r8
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	47d0      	blx	sl
 8004252:	3001      	adds	r0, #1
 8004254:	d0ab      	beq.n	80041ae <_printf_i+0x166>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	079b      	lsls	r3, r3, #30
 800425a:	d413      	bmi.n	8004284 <_printf_i+0x23c>
 800425c:	68e0      	ldr	r0, [r4, #12]
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	4298      	cmp	r0, r3
 8004262:	bfb8      	it	lt
 8004264:	4618      	movlt	r0, r3
 8004266:	e7a4      	b.n	80041b2 <_printf_i+0x16a>
 8004268:	2301      	movs	r3, #1
 800426a:	4632      	mov	r2, r6
 800426c:	4649      	mov	r1, r9
 800426e:	4640      	mov	r0, r8
 8004270:	47d0      	blx	sl
 8004272:	3001      	adds	r0, #1
 8004274:	d09b      	beq.n	80041ae <_printf_i+0x166>
 8004276:	3501      	adds	r5, #1
 8004278:	68e3      	ldr	r3, [r4, #12]
 800427a:	9903      	ldr	r1, [sp, #12]
 800427c:	1a5b      	subs	r3, r3, r1
 800427e:	42ab      	cmp	r3, r5
 8004280:	dcf2      	bgt.n	8004268 <_printf_i+0x220>
 8004282:	e7eb      	b.n	800425c <_printf_i+0x214>
 8004284:	2500      	movs	r5, #0
 8004286:	f104 0619 	add.w	r6, r4, #25
 800428a:	e7f5      	b.n	8004278 <_printf_i+0x230>
 800428c:	08007124 	.word	0x08007124
 8004290:	08007135 	.word	0x08007135

08004294 <siprintf>:
 8004294:	b40e      	push	{r1, r2, r3}
 8004296:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800429a:	b500      	push	{lr}
 800429c:	b09c      	sub	sp, #112	; 0x70
 800429e:	ab1d      	add	r3, sp, #116	; 0x74
 80042a0:	9002      	str	r0, [sp, #8]
 80042a2:	9006      	str	r0, [sp, #24]
 80042a4:	9107      	str	r1, [sp, #28]
 80042a6:	9104      	str	r1, [sp, #16]
 80042a8:	4808      	ldr	r0, [pc, #32]	; (80042cc <siprintf+0x38>)
 80042aa:	4909      	ldr	r1, [pc, #36]	; (80042d0 <siprintf+0x3c>)
 80042ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80042b0:	9105      	str	r1, [sp, #20]
 80042b2:	6800      	ldr	r0, [r0, #0]
 80042b4:	a902      	add	r1, sp, #8
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	f001 fbe8 	bl	8005a8c <_svfiprintf_r>
 80042bc:	2200      	movs	r2, #0
 80042be:	9b02      	ldr	r3, [sp, #8]
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	b01c      	add	sp, #112	; 0x70
 80042c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042c8:	b003      	add	sp, #12
 80042ca:	4770      	bx	lr
 80042cc:	20000010 	.word	0x20000010
 80042d0:	ffff0208 	.word	0xffff0208

080042d4 <siscanf>:
 80042d4:	b40e      	push	{r1, r2, r3}
 80042d6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80042da:	b530      	push	{r4, r5, lr}
 80042dc:	b09c      	sub	sp, #112	; 0x70
 80042de:	ac1f      	add	r4, sp, #124	; 0x7c
 80042e0:	f854 5b04 	ldr.w	r5, [r4], #4
 80042e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80042e8:	9002      	str	r0, [sp, #8]
 80042ea:	9006      	str	r0, [sp, #24]
 80042ec:	f7fb ff30 	bl	8000150 <strlen>
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <siscanf+0x4c>)
 80042f2:	9003      	str	r0, [sp, #12]
 80042f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80042f6:	2300      	movs	r3, #0
 80042f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80042fa:	9314      	str	r3, [sp, #80]	; 0x50
 80042fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004300:	9007      	str	r0, [sp, #28]
 8004302:	4808      	ldr	r0, [pc, #32]	; (8004324 <siscanf+0x50>)
 8004304:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004308:	462a      	mov	r2, r5
 800430a:	4623      	mov	r3, r4
 800430c:	a902      	add	r1, sp, #8
 800430e:	6800      	ldr	r0, [r0, #0]
 8004310:	9401      	str	r4, [sp, #4]
 8004312:	f001 fd15 	bl	8005d40 <__ssvfiscanf_r>
 8004316:	b01c      	add	sp, #112	; 0x70
 8004318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800431c:	b003      	add	sp, #12
 800431e:	4770      	bx	lr
 8004320:	0800434b 	.word	0x0800434b
 8004324:	20000010 	.word	0x20000010

08004328 <__sread>:
 8004328:	b510      	push	{r4, lr}
 800432a:	460c      	mov	r4, r1
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	f001 ffca 	bl	80062c8 <_read_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	bfab      	itete	ge
 8004338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800433a:	89a3      	ldrhlt	r3, [r4, #12]
 800433c:	181b      	addge	r3, r3, r0
 800433e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004342:	bfac      	ite	ge
 8004344:	6563      	strge	r3, [r4, #84]	; 0x54
 8004346:	81a3      	strhlt	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__seofread>:
 800434a:	2000      	movs	r0, #0
 800434c:	4770      	bx	lr

0800434e <__swrite>:
 800434e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	461f      	mov	r7, r3
 8004354:	898b      	ldrh	r3, [r1, #12]
 8004356:	4605      	mov	r5, r0
 8004358:	05db      	lsls	r3, r3, #23
 800435a:	460c      	mov	r4, r1
 800435c:	4616      	mov	r6, r2
 800435e:	d505      	bpl.n	800436c <__swrite+0x1e>
 8004360:	2302      	movs	r3, #2
 8004362:	2200      	movs	r2, #0
 8004364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004368:	f000 fec8 	bl	80050fc <_lseek_r>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	4632      	mov	r2, r6
 8004370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	4628      	mov	r0, r5
 8004378:	463b      	mov	r3, r7
 800437a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004382:	f000 b817 	b.w	80043b4 <_write_r>

08004386 <__sseek>:
 8004386:	b510      	push	{r4, lr}
 8004388:	460c      	mov	r4, r1
 800438a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438e:	f000 feb5 	bl	80050fc <_lseek_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	bf15      	itete	ne
 8004398:	6560      	strne	r0, [r4, #84]	; 0x54
 800439a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800439e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043a2:	81a3      	strheq	r3, [r4, #12]
 80043a4:	bf18      	it	ne
 80043a6:	81a3      	strhne	r3, [r4, #12]
 80043a8:	bd10      	pop	{r4, pc}

080043aa <__sclose>:
 80043aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ae:	f000 b813 	b.w	80043d8 <_close_r>
	...

080043b4 <_write_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4604      	mov	r4, r0
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	2200      	movs	r2, #0
 80043be:	4d05      	ldr	r5, [pc, #20]	; (80043d4 <_write_r+0x20>)
 80043c0:	602a      	str	r2, [r5, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7fc fd40 	bl	8000e48 <_write>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	d102      	bne.n	80043d2 <_write_r+0x1e>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b103      	cbz	r3, 80043d2 <_write_r+0x1e>
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	2000031c 	.word	0x2000031c

080043d8 <_close_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	2300      	movs	r3, #0
 80043dc:	4d05      	ldr	r5, [pc, #20]	; (80043f4 <_close_r+0x1c>)
 80043de:	4604      	mov	r4, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	602b      	str	r3, [r5, #0]
 80043e4:	f7fc fd4c 	bl	8000e80 <_close>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_close_r+0x1a>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_close_r+0x1a>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	2000031c 	.word	0x2000031c

080043f8 <quorem>:
 80043f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fc:	6903      	ldr	r3, [r0, #16]
 80043fe:	690c      	ldr	r4, [r1, #16]
 8004400:	4607      	mov	r7, r0
 8004402:	42a3      	cmp	r3, r4
 8004404:	f2c0 8083 	blt.w	800450e <quorem+0x116>
 8004408:	3c01      	subs	r4, #1
 800440a:	f100 0514 	add.w	r5, r0, #20
 800440e:	f101 0814 	add.w	r8, r1, #20
 8004412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800441c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004420:	3301      	adds	r3, #1
 8004422:	429a      	cmp	r2, r3
 8004424:	fbb2 f6f3 	udiv	r6, r2, r3
 8004428:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800442c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004430:	d332      	bcc.n	8004498 <quorem+0xa0>
 8004432:	f04f 0e00 	mov.w	lr, #0
 8004436:	4640      	mov	r0, r8
 8004438:	46ac      	mov	ip, r5
 800443a:	46f2      	mov	sl, lr
 800443c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004440:	b293      	uxth	r3, r2
 8004442:	fb06 e303 	mla	r3, r6, r3, lr
 8004446:	0c12      	lsrs	r2, r2, #16
 8004448:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800444c:	fb06 e202 	mla	r2, r6, r2, lr
 8004450:	b29b      	uxth	r3, r3
 8004452:	ebaa 0303 	sub.w	r3, sl, r3
 8004456:	f8dc a000 	ldr.w	sl, [ip]
 800445a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800445e:	fa1f fa8a 	uxth.w	sl, sl
 8004462:	4453      	add	r3, sl
 8004464:	fa1f fa82 	uxth.w	sl, r2
 8004468:	f8dc 2000 	ldr.w	r2, [ip]
 800446c:	4581      	cmp	r9, r0
 800446e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004472:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004476:	b29b      	uxth	r3, r3
 8004478:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800447c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004480:	f84c 3b04 	str.w	r3, [ip], #4
 8004484:	d2da      	bcs.n	800443c <quorem+0x44>
 8004486:	f855 300b 	ldr.w	r3, [r5, fp]
 800448a:	b92b      	cbnz	r3, 8004498 <quorem+0xa0>
 800448c:	9b01      	ldr	r3, [sp, #4]
 800448e:	3b04      	subs	r3, #4
 8004490:	429d      	cmp	r5, r3
 8004492:	461a      	mov	r2, r3
 8004494:	d32f      	bcc.n	80044f6 <quorem+0xfe>
 8004496:	613c      	str	r4, [r7, #16]
 8004498:	4638      	mov	r0, r7
 800449a:	f001 f8df 	bl	800565c <__mcmp>
 800449e:	2800      	cmp	r0, #0
 80044a0:	db25      	blt.n	80044ee <quorem+0xf6>
 80044a2:	4628      	mov	r0, r5
 80044a4:	f04f 0c00 	mov.w	ip, #0
 80044a8:	3601      	adds	r6, #1
 80044aa:	f858 1b04 	ldr.w	r1, [r8], #4
 80044ae:	f8d0 e000 	ldr.w	lr, [r0]
 80044b2:	b28b      	uxth	r3, r1
 80044b4:	ebac 0303 	sub.w	r3, ip, r3
 80044b8:	fa1f f28e 	uxth.w	r2, lr
 80044bc:	4413      	add	r3, r2
 80044be:	0c0a      	lsrs	r2, r1, #16
 80044c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80044c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044ce:	45c1      	cmp	r9, r8
 80044d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044d4:	f840 3b04 	str.w	r3, [r0], #4
 80044d8:	d2e7      	bcs.n	80044aa <quorem+0xb2>
 80044da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044e2:	b922      	cbnz	r2, 80044ee <quorem+0xf6>
 80044e4:	3b04      	subs	r3, #4
 80044e6:	429d      	cmp	r5, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	d30a      	bcc.n	8004502 <quorem+0x10a>
 80044ec:	613c      	str	r4, [r7, #16]
 80044ee:	4630      	mov	r0, r6
 80044f0:	b003      	add	sp, #12
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	3b04      	subs	r3, #4
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	d1cb      	bne.n	8004496 <quorem+0x9e>
 80044fe:	3c01      	subs	r4, #1
 8004500:	e7c6      	b.n	8004490 <quorem+0x98>
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	3b04      	subs	r3, #4
 8004506:	2a00      	cmp	r2, #0
 8004508:	d1f0      	bne.n	80044ec <quorem+0xf4>
 800450a:	3c01      	subs	r4, #1
 800450c:	e7eb      	b.n	80044e6 <quorem+0xee>
 800450e:	2000      	movs	r0, #0
 8004510:	e7ee      	b.n	80044f0 <quorem+0xf8>
 8004512:	0000      	movs	r0, r0
 8004514:	0000      	movs	r0, r0
	...

08004518 <_dtoa_r>:
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	4616      	mov	r6, r2
 800451e:	461f      	mov	r7, r3
 8004520:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004522:	b099      	sub	sp, #100	; 0x64
 8004524:	4605      	mov	r5, r0
 8004526:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800452a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800452e:	b974      	cbnz	r4, 800454e <_dtoa_r+0x36>
 8004530:	2010      	movs	r0, #16
 8004532:	f000 fdf5 	bl	8005120 <malloc>
 8004536:	4602      	mov	r2, r0
 8004538:	6268      	str	r0, [r5, #36]	; 0x24
 800453a:	b920      	cbnz	r0, 8004546 <_dtoa_r+0x2e>
 800453c:	21ea      	movs	r1, #234	; 0xea
 800453e:	4bae      	ldr	r3, [pc, #696]	; (80047f8 <_dtoa_r+0x2e0>)
 8004540:	48ae      	ldr	r0, [pc, #696]	; (80047fc <_dtoa_r+0x2e4>)
 8004542:	f002 f85b 	bl	80065fc <__assert_func>
 8004546:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800454a:	6004      	str	r4, [r0, #0]
 800454c:	60c4      	str	r4, [r0, #12]
 800454e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	b151      	cbz	r1, 800456a <_dtoa_r+0x52>
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	2301      	movs	r3, #1
 8004558:	4093      	lsls	r3, r2
 800455a:	604a      	str	r2, [r1, #4]
 800455c:	608b      	str	r3, [r1, #8]
 800455e:	4628      	mov	r0, r5
 8004560:	f000 fe42 	bl	80051e8 <_Bfree>
 8004564:	2200      	movs	r2, #0
 8004566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	1e3b      	subs	r3, r7, #0
 800456c:	bfaf      	iteee	ge
 800456e:	2300      	movge	r3, #0
 8004570:	2201      	movlt	r2, #1
 8004572:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004576:	9305      	strlt	r3, [sp, #20]
 8004578:	bfa8      	it	ge
 800457a:	f8c8 3000 	strge.w	r3, [r8]
 800457e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004582:	4b9f      	ldr	r3, [pc, #636]	; (8004800 <_dtoa_r+0x2e8>)
 8004584:	bfb8      	it	lt
 8004586:	f8c8 2000 	strlt.w	r2, [r8]
 800458a:	ea33 0309 	bics.w	r3, r3, r9
 800458e:	d119      	bne.n	80045c4 <_dtoa_r+0xac>
 8004590:	f242 730f 	movw	r3, #9999	; 0x270f
 8004594:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800459c:	4333      	orrs	r3, r6
 800459e:	f000 8580 	beq.w	80050a2 <_dtoa_r+0xb8a>
 80045a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80045a4:	b953      	cbnz	r3, 80045bc <_dtoa_r+0xa4>
 80045a6:	4b97      	ldr	r3, [pc, #604]	; (8004804 <_dtoa_r+0x2ec>)
 80045a8:	e022      	b.n	80045f0 <_dtoa_r+0xd8>
 80045aa:	4b97      	ldr	r3, [pc, #604]	; (8004808 <_dtoa_r+0x2f0>)
 80045ac:	9308      	str	r3, [sp, #32]
 80045ae:	3308      	adds	r3, #8
 80045b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	9808      	ldr	r0, [sp, #32]
 80045b6:	b019      	add	sp, #100	; 0x64
 80045b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045bc:	4b91      	ldr	r3, [pc, #580]	; (8004804 <_dtoa_r+0x2ec>)
 80045be:	9308      	str	r3, [sp, #32]
 80045c0:	3303      	adds	r3, #3
 80045c2:	e7f5      	b.n	80045b0 <_dtoa_r+0x98>
 80045c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80045c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80045cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	2300      	movs	r3, #0
 80045d4:	f7fc f9e8 	bl	80009a8 <__aeabi_dcmpeq>
 80045d8:	4680      	mov	r8, r0
 80045da:	b158      	cbz	r0, 80045f4 <_dtoa_r+0xdc>
 80045dc:	2301      	movs	r3, #1
 80045de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8559 	beq.w	800509c <_dtoa_r+0xb84>
 80045ea:	4888      	ldr	r0, [pc, #544]	; (800480c <_dtoa_r+0x2f4>)
 80045ec:	6018      	str	r0, [r3, #0]
 80045ee:	1e43      	subs	r3, r0, #1
 80045f0:	9308      	str	r3, [sp, #32]
 80045f2:	e7df      	b.n	80045b4 <_dtoa_r+0x9c>
 80045f4:	ab16      	add	r3, sp, #88	; 0x58
 80045f6:	9301      	str	r3, [sp, #4]
 80045f8:	ab17      	add	r3, sp, #92	; 0x5c
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	4628      	mov	r0, r5
 80045fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004602:	f001 f8d7 	bl	80057b4 <__d2b>
 8004606:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800460a:	4682      	mov	sl, r0
 800460c:	2c00      	cmp	r4, #0
 800460e:	d07e      	beq.n	800470e <_dtoa_r+0x1f6>
 8004610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004616:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800461a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004622:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004626:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800462a:	2200      	movs	r2, #0
 800462c:	4b78      	ldr	r3, [pc, #480]	; (8004810 <_dtoa_r+0x2f8>)
 800462e:	f7fb fd9b 	bl	8000168 <__aeabi_dsub>
 8004632:	a36b      	add	r3, pc, #428	; (adr r3, 80047e0 <_dtoa_r+0x2c8>)
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f7fb ff4e 	bl	80004d8 <__aeabi_dmul>
 800463c:	a36a      	add	r3, pc, #424	; (adr r3, 80047e8 <_dtoa_r+0x2d0>)
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f7fb fd93 	bl	800016c <__adddf3>
 8004646:	4606      	mov	r6, r0
 8004648:	4620      	mov	r0, r4
 800464a:	460f      	mov	r7, r1
 800464c:	f7fb feda 	bl	8000404 <__aeabi_i2d>
 8004650:	a367      	add	r3, pc, #412	; (adr r3, 80047f0 <_dtoa_r+0x2d8>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb ff3f 	bl	80004d8 <__aeabi_dmul>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4630      	mov	r0, r6
 8004660:	4639      	mov	r1, r7
 8004662:	f7fb fd83 	bl	800016c <__adddf3>
 8004666:	4606      	mov	r6, r0
 8004668:	460f      	mov	r7, r1
 800466a:	f7fc f9e5 	bl	8000a38 <__aeabi_d2iz>
 800466e:	2200      	movs	r2, #0
 8004670:	4681      	mov	r9, r0
 8004672:	2300      	movs	r3, #0
 8004674:	4630      	mov	r0, r6
 8004676:	4639      	mov	r1, r7
 8004678:	f7fc f9a0 	bl	80009bc <__aeabi_dcmplt>
 800467c:	b148      	cbz	r0, 8004692 <_dtoa_r+0x17a>
 800467e:	4648      	mov	r0, r9
 8004680:	f7fb fec0 	bl	8000404 <__aeabi_i2d>
 8004684:	4632      	mov	r2, r6
 8004686:	463b      	mov	r3, r7
 8004688:	f7fc f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800468c:	b908      	cbnz	r0, 8004692 <_dtoa_r+0x17a>
 800468e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004692:	f1b9 0f16 	cmp.w	r9, #22
 8004696:	d857      	bhi.n	8004748 <_dtoa_r+0x230>
 8004698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800469c:	4b5d      	ldr	r3, [pc, #372]	; (8004814 <_dtoa_r+0x2fc>)
 800469e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fc f989 	bl	80009bc <__aeabi_dcmplt>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d04e      	beq.n	800474c <_dtoa_r+0x234>
 80046ae:	2300      	movs	r3, #0
 80046b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80046b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80046b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80046b8:	1b1c      	subs	r4, r3, r4
 80046ba:	1e63      	subs	r3, r4, #1
 80046bc:	9309      	str	r3, [sp, #36]	; 0x24
 80046be:	bf49      	itett	mi
 80046c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80046c4:	2300      	movpl	r3, #0
 80046c6:	9306      	strmi	r3, [sp, #24]
 80046c8:	2300      	movmi	r3, #0
 80046ca:	bf54      	ite	pl
 80046cc:	9306      	strpl	r3, [sp, #24]
 80046ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80046d0:	f1b9 0f00 	cmp.w	r9, #0
 80046d4:	db3c      	blt.n	8004750 <_dtoa_r+0x238>
 80046d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80046dc:	444b      	add	r3, r9
 80046de:	9309      	str	r3, [sp, #36]	; 0x24
 80046e0:	2300      	movs	r3, #0
 80046e2:	930a      	str	r3, [sp, #40]	; 0x28
 80046e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046e6:	2b09      	cmp	r3, #9
 80046e8:	d86c      	bhi.n	80047c4 <_dtoa_r+0x2ac>
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	bfc4      	itt	gt
 80046ee:	3b04      	subgt	r3, #4
 80046f0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80046f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046f4:	bfc8      	it	gt
 80046f6:	2400      	movgt	r4, #0
 80046f8:	f1a3 0302 	sub.w	r3, r3, #2
 80046fc:	bfd8      	it	le
 80046fe:	2401      	movle	r4, #1
 8004700:	2b03      	cmp	r3, #3
 8004702:	f200 808b 	bhi.w	800481c <_dtoa_r+0x304>
 8004706:	e8df f003 	tbb	[pc, r3]
 800470a:	4f2d      	.short	0x4f2d
 800470c:	5b4d      	.short	0x5b4d
 800470e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004712:	441c      	add	r4, r3
 8004714:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004718:	2b20      	cmp	r3, #32
 800471a:	bfc3      	ittte	gt
 800471c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004720:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004724:	fa09 f303 	lslgt.w	r3, r9, r3
 8004728:	f1c3 0320 	rsble	r3, r3, #32
 800472c:	bfc6      	itte	gt
 800472e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004732:	4318      	orrgt	r0, r3
 8004734:	fa06 f003 	lslle.w	r0, r6, r3
 8004738:	f7fb fe54 	bl	80003e4 <__aeabi_ui2d>
 800473c:	2301      	movs	r3, #1
 800473e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004742:	3c01      	subs	r4, #1
 8004744:	9313      	str	r3, [sp, #76]	; 0x4c
 8004746:	e770      	b.n	800462a <_dtoa_r+0x112>
 8004748:	2301      	movs	r3, #1
 800474a:	e7b3      	b.n	80046b4 <_dtoa_r+0x19c>
 800474c:	900f      	str	r0, [sp, #60]	; 0x3c
 800474e:	e7b2      	b.n	80046b6 <_dtoa_r+0x19e>
 8004750:	9b06      	ldr	r3, [sp, #24]
 8004752:	eba3 0309 	sub.w	r3, r3, r9
 8004756:	9306      	str	r3, [sp, #24]
 8004758:	f1c9 0300 	rsb	r3, r9, #0
 800475c:	930a      	str	r3, [sp, #40]	; 0x28
 800475e:	2300      	movs	r3, #0
 8004760:	930e      	str	r3, [sp, #56]	; 0x38
 8004762:	e7bf      	b.n	80046e4 <_dtoa_r+0x1cc>
 8004764:	2300      	movs	r3, #0
 8004766:	930b      	str	r3, [sp, #44]	; 0x2c
 8004768:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800476a:	2b00      	cmp	r3, #0
 800476c:	dc59      	bgt.n	8004822 <_dtoa_r+0x30a>
 800476e:	f04f 0b01 	mov.w	fp, #1
 8004772:	465b      	mov	r3, fp
 8004774:	f8cd b008 	str.w	fp, [sp, #8]
 8004778:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800477c:	2200      	movs	r2, #0
 800477e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004780:	6042      	str	r2, [r0, #4]
 8004782:	2204      	movs	r2, #4
 8004784:	f102 0614 	add.w	r6, r2, #20
 8004788:	429e      	cmp	r6, r3
 800478a:	6841      	ldr	r1, [r0, #4]
 800478c:	d94f      	bls.n	800482e <_dtoa_r+0x316>
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fcea 	bl	8005168 <_Balloc>
 8004794:	9008      	str	r0, [sp, #32]
 8004796:	2800      	cmp	r0, #0
 8004798:	d14d      	bne.n	8004836 <_dtoa_r+0x31e>
 800479a:	4602      	mov	r2, r0
 800479c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <_dtoa_r+0x300>)
 80047a2:	e6cd      	b.n	8004540 <_dtoa_r+0x28>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e7de      	b.n	8004766 <_dtoa_r+0x24e>
 80047a8:	2300      	movs	r3, #0
 80047aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047ae:	eb09 0b03 	add.w	fp, r9, r3
 80047b2:	f10b 0301 	add.w	r3, fp, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	9302      	str	r3, [sp, #8]
 80047ba:	bfb8      	it	lt
 80047bc:	2301      	movlt	r3, #1
 80047be:	e7dd      	b.n	800477c <_dtoa_r+0x264>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e7f2      	b.n	80047aa <_dtoa_r+0x292>
 80047c4:	2401      	movs	r4, #1
 80047c6:	2300      	movs	r3, #0
 80047c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80047ca:	9322      	str	r3, [sp, #136]	; 0x88
 80047cc:	f04f 3bff 	mov.w	fp, #4294967295
 80047d0:	2200      	movs	r2, #0
 80047d2:	2312      	movs	r3, #18
 80047d4:	f8cd b008 	str.w	fp, [sp, #8]
 80047d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80047da:	e7cf      	b.n	800477c <_dtoa_r+0x264>
 80047dc:	f3af 8000 	nop.w
 80047e0:	636f4361 	.word	0x636f4361
 80047e4:	3fd287a7 	.word	0x3fd287a7
 80047e8:	8b60c8b3 	.word	0x8b60c8b3
 80047ec:	3fc68a28 	.word	0x3fc68a28
 80047f0:	509f79fb 	.word	0x509f79fb
 80047f4:	3fd34413 	.word	0x3fd34413
 80047f8:	08007153 	.word	0x08007153
 80047fc:	0800716a 	.word	0x0800716a
 8004800:	7ff00000 	.word	0x7ff00000
 8004804:	0800714f 	.word	0x0800714f
 8004808:	08007146 	.word	0x08007146
 800480c:	08007352 	.word	0x08007352
 8004810:	3ff80000 	.word	0x3ff80000
 8004814:	08007268 	.word	0x08007268
 8004818:	080071c9 	.word	0x080071c9
 800481c:	2301      	movs	r3, #1
 800481e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004820:	e7d4      	b.n	80047cc <_dtoa_r+0x2b4>
 8004822:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004826:	465b      	mov	r3, fp
 8004828:	f8cd b008 	str.w	fp, [sp, #8]
 800482c:	e7a6      	b.n	800477c <_dtoa_r+0x264>
 800482e:	3101      	adds	r1, #1
 8004830:	6041      	str	r1, [r0, #4]
 8004832:	0052      	lsls	r2, r2, #1
 8004834:	e7a6      	b.n	8004784 <_dtoa_r+0x26c>
 8004836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004838:	9a08      	ldr	r2, [sp, #32]
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	9b02      	ldr	r3, [sp, #8]
 800483e:	2b0e      	cmp	r3, #14
 8004840:	f200 80a8 	bhi.w	8004994 <_dtoa_r+0x47c>
 8004844:	2c00      	cmp	r4, #0
 8004846:	f000 80a5 	beq.w	8004994 <_dtoa_r+0x47c>
 800484a:	f1b9 0f00 	cmp.w	r9, #0
 800484e:	dd34      	ble.n	80048ba <_dtoa_r+0x3a2>
 8004850:	4a9a      	ldr	r2, [pc, #616]	; (8004abc <_dtoa_r+0x5a4>)
 8004852:	f009 030f 	and.w	r3, r9, #15
 8004856:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800485a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800485e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004862:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004866:	ea4f 1429 	mov.w	r4, r9, asr #4
 800486a:	d016      	beq.n	800489a <_dtoa_r+0x382>
 800486c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004870:	4b93      	ldr	r3, [pc, #588]	; (8004ac0 <_dtoa_r+0x5a8>)
 8004872:	2703      	movs	r7, #3
 8004874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004878:	f7fb ff58 	bl	800072c <__aeabi_ddiv>
 800487c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004880:	f004 040f 	and.w	r4, r4, #15
 8004884:	4e8e      	ldr	r6, [pc, #568]	; (8004ac0 <_dtoa_r+0x5a8>)
 8004886:	b954      	cbnz	r4, 800489e <_dtoa_r+0x386>
 8004888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800488c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004890:	f7fb ff4c 	bl	800072c <__aeabi_ddiv>
 8004894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004898:	e029      	b.n	80048ee <_dtoa_r+0x3d6>
 800489a:	2702      	movs	r7, #2
 800489c:	e7f2      	b.n	8004884 <_dtoa_r+0x36c>
 800489e:	07e1      	lsls	r1, r4, #31
 80048a0:	d508      	bpl.n	80048b4 <_dtoa_r+0x39c>
 80048a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80048aa:	f7fb fe15 	bl	80004d8 <__aeabi_dmul>
 80048ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048b2:	3701      	adds	r7, #1
 80048b4:	1064      	asrs	r4, r4, #1
 80048b6:	3608      	adds	r6, #8
 80048b8:	e7e5      	b.n	8004886 <_dtoa_r+0x36e>
 80048ba:	f000 80a5 	beq.w	8004a08 <_dtoa_r+0x4f0>
 80048be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048c2:	f1c9 0400 	rsb	r4, r9, #0
 80048c6:	4b7d      	ldr	r3, [pc, #500]	; (8004abc <_dtoa_r+0x5a4>)
 80048c8:	f004 020f 	and.w	r2, r4, #15
 80048cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fe00 	bl	80004d8 <__aeabi_dmul>
 80048d8:	2702      	movs	r7, #2
 80048da:	2300      	movs	r3, #0
 80048dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048e0:	4e77      	ldr	r6, [pc, #476]	; (8004ac0 <_dtoa_r+0x5a8>)
 80048e2:	1124      	asrs	r4, r4, #4
 80048e4:	2c00      	cmp	r4, #0
 80048e6:	f040 8084 	bne.w	80049f2 <_dtoa_r+0x4da>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1d2      	bne.n	8004894 <_dtoa_r+0x37c>
 80048ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 808b 	beq.w	8004a0c <_dtoa_r+0x4f4>
 80048f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80048fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004902:	2200      	movs	r2, #0
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <_dtoa_r+0x5ac>)
 8004906:	f7fc f859 	bl	80009bc <__aeabi_dcmplt>
 800490a:	2800      	cmp	r0, #0
 800490c:	d07e      	beq.n	8004a0c <_dtoa_r+0x4f4>
 800490e:	9b02      	ldr	r3, [sp, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d07b      	beq.n	8004a0c <_dtoa_r+0x4f4>
 8004914:	f1bb 0f00 	cmp.w	fp, #0
 8004918:	dd38      	ble.n	800498c <_dtoa_r+0x474>
 800491a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800491e:	2200      	movs	r2, #0
 8004920:	4b69      	ldr	r3, [pc, #420]	; (8004ac8 <_dtoa_r+0x5b0>)
 8004922:	f7fb fdd9 	bl	80004d8 <__aeabi_dmul>
 8004926:	465c      	mov	r4, fp
 8004928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800492c:	f109 38ff 	add.w	r8, r9, #4294967295
 8004930:	3701      	adds	r7, #1
 8004932:	4638      	mov	r0, r7
 8004934:	f7fb fd66 	bl	8000404 <__aeabi_i2d>
 8004938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800493c:	f7fb fdcc 	bl	80004d8 <__aeabi_dmul>
 8004940:	2200      	movs	r2, #0
 8004942:	4b62      	ldr	r3, [pc, #392]	; (8004acc <_dtoa_r+0x5b4>)
 8004944:	f7fb fc12 	bl	800016c <__adddf3>
 8004948:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800494c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004950:	9611      	str	r6, [sp, #68]	; 0x44
 8004952:	2c00      	cmp	r4, #0
 8004954:	d15d      	bne.n	8004a12 <_dtoa_r+0x4fa>
 8004956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800495a:	2200      	movs	r2, #0
 800495c:	4b5c      	ldr	r3, [pc, #368]	; (8004ad0 <_dtoa_r+0x5b8>)
 800495e:	f7fb fc03 	bl	8000168 <__aeabi_dsub>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800496a:	4633      	mov	r3, r6
 800496c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800496e:	f7fc f843 	bl	80009f8 <__aeabi_dcmpgt>
 8004972:	2800      	cmp	r0, #0
 8004974:	f040 829e 	bne.w	8004eb4 <_dtoa_r+0x99c>
 8004978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800497c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800497e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004982:	f7fc f81b 	bl	80009bc <__aeabi_dcmplt>
 8004986:	2800      	cmp	r0, #0
 8004988:	f040 8292 	bne.w	8004eb0 <_dtoa_r+0x998>
 800498c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004990:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004996:	2b00      	cmp	r3, #0
 8004998:	f2c0 8153 	blt.w	8004c42 <_dtoa_r+0x72a>
 800499c:	f1b9 0f0e 	cmp.w	r9, #14
 80049a0:	f300 814f 	bgt.w	8004c42 <_dtoa_r+0x72a>
 80049a4:	4b45      	ldr	r3, [pc, #276]	; (8004abc <_dtoa_r+0x5a4>)
 80049a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80049aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80049b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f280 80db 	bge.w	8004b70 <_dtoa_r+0x658>
 80049ba:	9b02      	ldr	r3, [sp, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f300 80d7 	bgt.w	8004b70 <_dtoa_r+0x658>
 80049c2:	f040 8274 	bne.w	8004eae <_dtoa_r+0x996>
 80049c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ca:	2200      	movs	r2, #0
 80049cc:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <_dtoa_r+0x5b8>)
 80049ce:	f7fb fd83 	bl	80004d8 <__aeabi_dmul>
 80049d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049d6:	f7fc f805 	bl	80009e4 <__aeabi_dcmpge>
 80049da:	9c02      	ldr	r4, [sp, #8]
 80049dc:	4626      	mov	r6, r4
 80049de:	2800      	cmp	r0, #0
 80049e0:	f040 824a 	bne.w	8004e78 <_dtoa_r+0x960>
 80049e4:	2331      	movs	r3, #49	; 0x31
 80049e6:	9f08      	ldr	r7, [sp, #32]
 80049e8:	f109 0901 	add.w	r9, r9, #1
 80049ec:	f807 3b01 	strb.w	r3, [r7], #1
 80049f0:	e246      	b.n	8004e80 <_dtoa_r+0x968>
 80049f2:	07e2      	lsls	r2, r4, #31
 80049f4:	d505      	bpl.n	8004a02 <_dtoa_r+0x4ea>
 80049f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049fa:	f7fb fd6d 	bl	80004d8 <__aeabi_dmul>
 80049fe:	2301      	movs	r3, #1
 8004a00:	3701      	adds	r7, #1
 8004a02:	1064      	asrs	r4, r4, #1
 8004a04:	3608      	adds	r6, #8
 8004a06:	e76d      	b.n	80048e4 <_dtoa_r+0x3cc>
 8004a08:	2702      	movs	r7, #2
 8004a0a:	e770      	b.n	80048ee <_dtoa_r+0x3d6>
 8004a0c:	46c8      	mov	r8, r9
 8004a0e:	9c02      	ldr	r4, [sp, #8]
 8004a10:	e78f      	b.n	8004932 <_dtoa_r+0x41a>
 8004a12:	9908      	ldr	r1, [sp, #32]
 8004a14:	4b29      	ldr	r3, [pc, #164]	; (8004abc <_dtoa_r+0x5a4>)
 8004a16:	4421      	add	r1, r4
 8004a18:	9112      	str	r1, [sp, #72]	; 0x48
 8004a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	d055      	beq.n	8004ad8 <_dtoa_r+0x5c0>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	4929      	ldr	r1, [pc, #164]	; (8004ad4 <_dtoa_r+0x5bc>)
 8004a30:	f7fb fe7c 	bl	800072c <__aeabi_ddiv>
 8004a34:	463b      	mov	r3, r7
 8004a36:	4632      	mov	r2, r6
 8004a38:	f7fb fb96 	bl	8000168 <__aeabi_dsub>
 8004a3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a40:	9f08      	ldr	r7, [sp, #32]
 8004a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a46:	f7fb fff7 	bl	8000a38 <__aeabi_d2iz>
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	f7fb fcda 	bl	8000404 <__aeabi_i2d>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a58:	f7fb fb86 	bl	8000168 <__aeabi_dsub>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	3430      	adds	r4, #48	; 0x30
 8004a62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a6a:	f807 4b01 	strb.w	r4, [r7], #1
 8004a6e:	f7fb ffa5 	bl	80009bc <__aeabi_dcmplt>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d174      	bne.n	8004b60 <_dtoa_r+0x648>
 8004a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	4911      	ldr	r1, [pc, #68]	; (8004ac4 <_dtoa_r+0x5ac>)
 8004a7e:	f7fb fb73 	bl	8000168 <__aeabi_dsub>
 8004a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a86:	f7fb ff99 	bl	80009bc <__aeabi_dcmplt>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	f040 80b6 	bne.w	8004bfc <_dtoa_r+0x6e4>
 8004a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a92:	429f      	cmp	r7, r3
 8004a94:	f43f af7a 	beq.w	800498c <_dtoa_r+0x474>
 8004a98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <_dtoa_r+0x5b0>)
 8004aa0:	f7fb fd1a 	bl	80004d8 <__aeabi_dmul>
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <_dtoa_r+0x5b0>)
 8004ab0:	f7fb fd12 	bl	80004d8 <__aeabi_dmul>
 8004ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ab8:	e7c3      	b.n	8004a42 <_dtoa_r+0x52a>
 8004aba:	bf00      	nop
 8004abc:	08007268 	.word	0x08007268
 8004ac0:	08007240 	.word	0x08007240
 8004ac4:	3ff00000 	.word	0x3ff00000
 8004ac8:	40240000 	.word	0x40240000
 8004acc:	401c0000 	.word	0x401c0000
 8004ad0:	40140000 	.word	0x40140000
 8004ad4:	3fe00000 	.word	0x3fe00000
 8004ad8:	4630      	mov	r0, r6
 8004ada:	4639      	mov	r1, r7
 8004adc:	f7fb fcfc 	bl	80004d8 <__aeabi_dmul>
 8004ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ae6:	9c08      	ldr	r4, [sp, #32]
 8004ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8004aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aee:	f7fb ffa3 	bl	8000a38 <__aeabi_d2iz>
 8004af2:	9015      	str	r0, [sp, #84]	; 0x54
 8004af4:	f7fb fc86 	bl	8000404 <__aeabi_i2d>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b00:	f7fb fb32 	bl	8000168 <__aeabi_dsub>
 8004b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b06:	4606      	mov	r6, r0
 8004b08:	3330      	adds	r3, #48	; 0x30
 8004b0a:	f804 3b01 	strb.w	r3, [r4], #1
 8004b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b10:	460f      	mov	r7, r1
 8004b12:	429c      	cmp	r4, r3
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	d124      	bne.n	8004b64 <_dtoa_r+0x64c>
 8004b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b1e:	4bb3      	ldr	r3, [pc, #716]	; (8004dec <_dtoa_r+0x8d4>)
 8004b20:	f7fb fb24 	bl	800016c <__adddf3>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4630      	mov	r0, r6
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	f7fb ff64 	bl	80009f8 <__aeabi_dcmpgt>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d162      	bne.n	8004bfa <_dtoa_r+0x6e2>
 8004b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b38:	2000      	movs	r0, #0
 8004b3a:	49ac      	ldr	r1, [pc, #688]	; (8004dec <_dtoa_r+0x8d4>)
 8004b3c:	f7fb fb14 	bl	8000168 <__aeabi_dsub>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4630      	mov	r0, r6
 8004b46:	4639      	mov	r1, r7
 8004b48:	f7fb ff38 	bl	80009bc <__aeabi_dcmplt>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f43f af1d 	beq.w	800498c <_dtoa_r+0x474>
 8004b52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b54:	1e7b      	subs	r3, r7, #1
 8004b56:	9314      	str	r3, [sp, #80]	; 0x50
 8004b58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d0f8      	beq.n	8004b52 <_dtoa_r+0x63a>
 8004b60:	46c1      	mov	r9, r8
 8004b62:	e03a      	b.n	8004bda <_dtoa_r+0x6c2>
 8004b64:	4ba2      	ldr	r3, [pc, #648]	; (8004df0 <_dtoa_r+0x8d8>)
 8004b66:	f7fb fcb7 	bl	80004d8 <__aeabi_dmul>
 8004b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b6e:	e7bc      	b.n	8004aea <_dtoa_r+0x5d2>
 8004b70:	9f08      	ldr	r7, [sp, #32]
 8004b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b7a:	f7fb fdd7 	bl	800072c <__aeabi_ddiv>
 8004b7e:	f7fb ff5b 	bl	8000a38 <__aeabi_d2iz>
 8004b82:	4604      	mov	r4, r0
 8004b84:	f7fb fc3e 	bl	8000404 <__aeabi_i2d>
 8004b88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b8c:	f7fb fca4 	bl	80004d8 <__aeabi_dmul>
 8004b90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004b94:	460b      	mov	r3, r1
 8004b96:	4602      	mov	r2, r0
 8004b98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b9c:	f7fb fae4 	bl	8000168 <__aeabi_dsub>
 8004ba0:	f807 6b01 	strb.w	r6, [r7], #1
 8004ba4:	9e08      	ldr	r6, [sp, #32]
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	1bbe      	subs	r6, r7, r6
 8004baa:	42b3      	cmp	r3, r6
 8004bac:	d13a      	bne.n	8004c24 <_dtoa_r+0x70c>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	f7fb fadb 	bl	800016c <__adddf3>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bc2:	f7fb ff19 	bl	80009f8 <__aeabi_dcmpgt>
 8004bc6:	bb58      	cbnz	r0, 8004c20 <_dtoa_r+0x708>
 8004bc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd0:	f7fb feea 	bl	80009a8 <__aeabi_dcmpeq>
 8004bd4:	b108      	cbz	r0, 8004bda <_dtoa_r+0x6c2>
 8004bd6:	07e1      	lsls	r1, r4, #31
 8004bd8:	d422      	bmi.n	8004c20 <_dtoa_r+0x708>
 8004bda:	4628      	mov	r0, r5
 8004bdc:	4651      	mov	r1, sl
 8004bde:	f000 fb03 	bl	80051e8 <_Bfree>
 8004be2:	2300      	movs	r3, #0
 8004be4:	703b      	strb	r3, [r7, #0]
 8004be6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004be8:	f109 0001 	add.w	r0, r9, #1
 8004bec:	6018      	str	r0, [r3, #0]
 8004bee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f43f acdf 	beq.w	80045b4 <_dtoa_r+0x9c>
 8004bf6:	601f      	str	r7, [r3, #0]
 8004bf8:	e4dc      	b.n	80045b4 <_dtoa_r+0x9c>
 8004bfa:	4627      	mov	r7, r4
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	461f      	mov	r7, r3
 8004c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c04:	2a39      	cmp	r2, #57	; 0x39
 8004c06:	d107      	bne.n	8004c18 <_dtoa_r+0x700>
 8004c08:	9a08      	ldr	r2, [sp, #32]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d1f7      	bne.n	8004bfe <_dtoa_r+0x6e6>
 8004c0e:	2230      	movs	r2, #48	; 0x30
 8004c10:	9908      	ldr	r1, [sp, #32]
 8004c12:	f108 0801 	add.w	r8, r8, #1
 8004c16:	700a      	strb	r2, [r1, #0]
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	3201      	adds	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e79f      	b.n	8004b60 <_dtoa_r+0x648>
 8004c20:	46c8      	mov	r8, r9
 8004c22:	e7eb      	b.n	8004bfc <_dtoa_r+0x6e4>
 8004c24:	2200      	movs	r2, #0
 8004c26:	4b72      	ldr	r3, [pc, #456]	; (8004df0 <_dtoa_r+0x8d8>)
 8004c28:	f7fb fc56 	bl	80004d8 <__aeabi_dmul>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2300      	movs	r3, #0
 8004c38:	f7fb feb6 	bl	80009a8 <__aeabi_dcmpeq>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d098      	beq.n	8004b72 <_dtoa_r+0x65a>
 8004c40:	e7cb      	b.n	8004bda <_dtoa_r+0x6c2>
 8004c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	f000 80cd 	beq.w	8004de4 <_dtoa_r+0x8cc>
 8004c4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c4c:	2a01      	cmp	r2, #1
 8004c4e:	f300 80af 	bgt.w	8004db0 <_dtoa_r+0x898>
 8004c52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	f000 80a7 	beq.w	8004da8 <_dtoa_r+0x890>
 8004c5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c60:	9f06      	ldr	r7, [sp, #24]
 8004c62:	9a06      	ldr	r2, [sp, #24]
 8004c64:	2101      	movs	r1, #1
 8004c66:	441a      	add	r2, r3
 8004c68:	9206      	str	r2, [sp, #24]
 8004c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	441a      	add	r2, r3
 8004c70:	9209      	str	r2, [sp, #36]	; 0x24
 8004c72:	f000 fb73 	bl	800535c <__i2b>
 8004c76:	4606      	mov	r6, r0
 8004c78:	2f00      	cmp	r7, #0
 8004c7a:	dd0c      	ble.n	8004c96 <_dtoa_r+0x77e>
 8004c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	dd09      	ble.n	8004c96 <_dtoa_r+0x77e>
 8004c82:	42bb      	cmp	r3, r7
 8004c84:	bfa8      	it	ge
 8004c86:	463b      	movge	r3, r7
 8004c88:	9a06      	ldr	r2, [sp, #24]
 8004c8a:	1aff      	subs	r7, r7, r3
 8004c8c:	1ad2      	subs	r2, r2, r3
 8004c8e:	9206      	str	r2, [sp, #24]
 8004c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	9309      	str	r3, [sp, #36]	; 0x24
 8004c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c98:	b1f3      	cbz	r3, 8004cd8 <_dtoa_r+0x7c0>
 8004c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80a9 	beq.w	8004df4 <_dtoa_r+0x8dc>
 8004ca2:	2c00      	cmp	r4, #0
 8004ca4:	dd10      	ble.n	8004cc8 <_dtoa_r+0x7b0>
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 fc10 	bl	80054d0 <__pow5mult>
 8004cb0:	4652      	mov	r2, sl
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fb66 	bl	8005388 <__multiply>
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f000 fa91 	bl	80051e8 <_Bfree>
 8004cc6:	46c2      	mov	sl, r8
 8004cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cca:	1b1a      	subs	r2, r3, r4
 8004ccc:	d004      	beq.n	8004cd8 <_dtoa_r+0x7c0>
 8004cce:	4651      	mov	r1, sl
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f000 fbfd 	bl	80054d0 <__pow5mult>
 8004cd6:	4682      	mov	sl, r0
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 fb3e 	bl	800535c <__i2b>
 8004ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f340 8087 	ble.w	8004df8 <_dtoa_r+0x8e0>
 8004cea:	461a      	mov	r2, r3
 8004cec:	4601      	mov	r1, r0
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f000 fbee 	bl	80054d0 <__pow5mult>
 8004cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f340 8080 	ble.w	8004dfe <_dtoa_r+0x8e6>
 8004cfe:	f04f 0800 	mov.w	r8, #0
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d08:	6918      	ldr	r0, [r3, #16]
 8004d0a:	f000 fad9 	bl	80052c0 <__hi0bits>
 8004d0e:	f1c0 0020 	rsb	r0, r0, #32
 8004d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d14:	4418      	add	r0, r3
 8004d16:	f010 001f 	ands.w	r0, r0, #31
 8004d1a:	f000 8092 	beq.w	8004e42 <_dtoa_r+0x92a>
 8004d1e:	f1c0 0320 	rsb	r3, r0, #32
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	f340 808a 	ble.w	8004e3c <_dtoa_r+0x924>
 8004d28:	f1c0 001c 	rsb	r0, r0, #28
 8004d2c:	9b06      	ldr	r3, [sp, #24]
 8004d2e:	4407      	add	r7, r0
 8004d30:	4403      	add	r3, r0
 8004d32:	9306      	str	r3, [sp, #24]
 8004d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d36:	4403      	add	r3, r0
 8004d38:	9309      	str	r3, [sp, #36]	; 0x24
 8004d3a:	9b06      	ldr	r3, [sp, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dd05      	ble.n	8004d4c <_dtoa_r+0x834>
 8004d40:	4651      	mov	r1, sl
 8004d42:	461a      	mov	r2, r3
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 fc1d 	bl	8005584 <__lshift>
 8004d4a:	4682      	mov	sl, r0
 8004d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	dd05      	ble.n	8004d5e <_dtoa_r+0x846>
 8004d52:	4621      	mov	r1, r4
 8004d54:	461a      	mov	r2, r3
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 fc14 	bl	8005584 <__lshift>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d070      	beq.n	8004e46 <_dtoa_r+0x92e>
 8004d64:	4621      	mov	r1, r4
 8004d66:	4650      	mov	r0, sl
 8004d68:	f000 fc78 	bl	800565c <__mcmp>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	da6a      	bge.n	8004e46 <_dtoa_r+0x92e>
 8004d70:	2300      	movs	r3, #0
 8004d72:	4651      	mov	r1, sl
 8004d74:	220a      	movs	r2, #10
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 fa58 	bl	800522c <__multadd>
 8004d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d7e:	4682      	mov	sl, r0
 8004d80:	f109 39ff 	add.w	r9, r9, #4294967295
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8193 	beq.w	80050b0 <_dtoa_r+0xb98>
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	220a      	movs	r2, #10
 8004d90:	4628      	mov	r0, r5
 8004d92:	f000 fa4b 	bl	800522c <__multadd>
 8004d96:	f1bb 0f00 	cmp.w	fp, #0
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	f300 8093 	bgt.w	8004ec6 <_dtoa_r+0x9ae>
 8004da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	dc57      	bgt.n	8004e56 <_dtoa_r+0x93e>
 8004da6:	e08e      	b.n	8004ec6 <_dtoa_r+0x9ae>
 8004da8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004daa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004dae:	e756      	b.n	8004c5e <_dtoa_r+0x746>
 8004db0:	9b02      	ldr	r3, [sp, #8]
 8004db2:	1e5c      	subs	r4, r3, #1
 8004db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db6:	42a3      	cmp	r3, r4
 8004db8:	bfb7      	itett	lt
 8004dba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004dbc:	1b1c      	subge	r4, r3, r4
 8004dbe:	1ae2      	sublt	r2, r4, r3
 8004dc0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004dc2:	bfbe      	ittt	lt
 8004dc4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004dc6:	189b      	addlt	r3, r3, r2
 8004dc8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004dca:	9b02      	ldr	r3, [sp, #8]
 8004dcc:	bfb8      	it	lt
 8004dce:	2400      	movlt	r4, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bfbb      	ittet	lt
 8004dd4:	9b06      	ldrlt	r3, [sp, #24]
 8004dd6:	9a02      	ldrlt	r2, [sp, #8]
 8004dd8:	9f06      	ldrge	r7, [sp, #24]
 8004dda:	1a9f      	sublt	r7, r3, r2
 8004ddc:	bfac      	ite	ge
 8004dde:	9b02      	ldrge	r3, [sp, #8]
 8004de0:	2300      	movlt	r3, #0
 8004de2:	e73e      	b.n	8004c62 <_dtoa_r+0x74a>
 8004de4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004de6:	9f06      	ldr	r7, [sp, #24]
 8004de8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004dea:	e745      	b.n	8004c78 <_dtoa_r+0x760>
 8004dec:	3fe00000 	.word	0x3fe00000
 8004df0:	40240000 	.word	0x40240000
 8004df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004df6:	e76a      	b.n	8004cce <_dtoa_r+0x7b6>
 8004df8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	dc19      	bgt.n	8004e32 <_dtoa_r+0x91a>
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	b9bb      	cbnz	r3, 8004e32 <_dtoa_r+0x91a>
 8004e02:	9b05      	ldr	r3, [sp, #20]
 8004e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e08:	b99b      	cbnz	r3, 8004e32 <_dtoa_r+0x91a>
 8004e0a:	9b05      	ldr	r3, [sp, #20]
 8004e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e10:	0d1b      	lsrs	r3, r3, #20
 8004e12:	051b      	lsls	r3, r3, #20
 8004e14:	b183      	cbz	r3, 8004e38 <_dtoa_r+0x920>
 8004e16:	f04f 0801 	mov.w	r8, #1
 8004e1a:	9b06      	ldr	r3, [sp, #24]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	9306      	str	r3, [sp, #24]
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	3301      	adds	r3, #1
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
 8004e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af6a 	bne.w	8004d02 <_dtoa_r+0x7ea>
 8004e2e:	2001      	movs	r0, #1
 8004e30:	e76f      	b.n	8004d12 <_dtoa_r+0x7fa>
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	e7f6      	b.n	8004e26 <_dtoa_r+0x90e>
 8004e38:	4698      	mov	r8, r3
 8004e3a:	e7f4      	b.n	8004e26 <_dtoa_r+0x90e>
 8004e3c:	f43f af7d 	beq.w	8004d3a <_dtoa_r+0x822>
 8004e40:	4618      	mov	r0, r3
 8004e42:	301c      	adds	r0, #28
 8004e44:	e772      	b.n	8004d2c <_dtoa_r+0x814>
 8004e46:	9b02      	ldr	r3, [sp, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dc36      	bgt.n	8004eba <_dtoa_r+0x9a2>
 8004e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	dd33      	ble.n	8004eba <_dtoa_r+0x9a2>
 8004e52:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e56:	f1bb 0f00 	cmp.w	fp, #0
 8004e5a:	d10d      	bne.n	8004e78 <_dtoa_r+0x960>
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	465b      	mov	r3, fp
 8004e60:	2205      	movs	r2, #5
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 f9e2 	bl	800522c <__multadd>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4650      	mov	r0, sl
 8004e6e:	f000 fbf5 	bl	800565c <__mcmp>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	f73f adb6 	bgt.w	80049e4 <_dtoa_r+0x4cc>
 8004e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e7a:	9f08      	ldr	r7, [sp, #32]
 8004e7c:	ea6f 0903 	mvn.w	r9, r3
 8004e80:	f04f 0800 	mov.w	r8, #0
 8004e84:	4621      	mov	r1, r4
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 f9ae 	bl	80051e8 <_Bfree>
 8004e8c:	2e00      	cmp	r6, #0
 8004e8e:	f43f aea4 	beq.w	8004bda <_dtoa_r+0x6c2>
 8004e92:	f1b8 0f00 	cmp.w	r8, #0
 8004e96:	d005      	beq.n	8004ea4 <_dtoa_r+0x98c>
 8004e98:	45b0      	cmp	r8, r6
 8004e9a:	d003      	beq.n	8004ea4 <_dtoa_r+0x98c>
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 f9a2 	bl	80051e8 <_Bfree>
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 f99e 	bl	80051e8 <_Bfree>
 8004eac:	e695      	b.n	8004bda <_dtoa_r+0x6c2>
 8004eae:	2400      	movs	r4, #0
 8004eb0:	4626      	mov	r6, r4
 8004eb2:	e7e1      	b.n	8004e78 <_dtoa_r+0x960>
 8004eb4:	46c1      	mov	r9, r8
 8004eb6:	4626      	mov	r6, r4
 8004eb8:	e594      	b.n	80049e4 <_dtoa_r+0x4cc>
 8004eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ebc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80fc 	beq.w	80050be <_dtoa_r+0xba6>
 8004ec6:	2f00      	cmp	r7, #0
 8004ec8:	dd05      	ble.n	8004ed6 <_dtoa_r+0x9be>
 8004eca:	4631      	mov	r1, r6
 8004ecc:	463a      	mov	r2, r7
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 fb58 	bl	8005584 <__lshift>
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	f1b8 0f00 	cmp.w	r8, #0
 8004eda:	d05c      	beq.n	8004f96 <_dtoa_r+0xa7e>
 8004edc:	4628      	mov	r0, r5
 8004ede:	6871      	ldr	r1, [r6, #4]
 8004ee0:	f000 f942 	bl	8005168 <_Balloc>
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	b928      	cbnz	r0, 8004ef4 <_dtoa_r+0x9dc>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004eee:	4b7e      	ldr	r3, [pc, #504]	; (80050e8 <_dtoa_r+0xbd0>)
 8004ef0:	f7ff bb26 	b.w	8004540 <_dtoa_r+0x28>
 8004ef4:	6932      	ldr	r2, [r6, #16]
 8004ef6:	f106 010c 	add.w	r1, r6, #12
 8004efa:	3202      	adds	r2, #2
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	300c      	adds	r0, #12
 8004f00:	f000 f924 	bl	800514c <memcpy>
 8004f04:	2201      	movs	r2, #1
 8004f06:	4639      	mov	r1, r7
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 fb3b 	bl	8005584 <__lshift>
 8004f0e:	46b0      	mov	r8, r6
 8004f10:	4606      	mov	r6, r0
 8004f12:	9b08      	ldr	r3, [sp, #32]
 8004f14:	3301      	adds	r3, #1
 8004f16:	9302      	str	r3, [sp, #8]
 8004f18:	9b08      	ldr	r3, [sp, #32]
 8004f1a:	445b      	add	r3, fp
 8004f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f1e:	9b04      	ldr	r3, [sp, #16]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	9b02      	ldr	r3, [sp, #8]
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	f103 3bff 	add.w	fp, r3, #4294967295
 8004f30:	f7ff fa62 	bl	80043f8 <quorem>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4641      	mov	r1, r8
 8004f38:	3330      	adds	r3, #48	; 0x30
 8004f3a:	9004      	str	r0, [sp, #16]
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f40:	f000 fb8c 	bl	800565c <__mcmp>
 8004f44:	4632      	mov	r2, r6
 8004f46:	9006      	str	r0, [sp, #24]
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 fba2 	bl	8005694 <__mdiff>
 8004f50:	68c2      	ldr	r2, [r0, #12]
 8004f52:	4607      	mov	r7, r0
 8004f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f56:	bb02      	cbnz	r2, 8004f9a <_dtoa_r+0xa82>
 8004f58:	4601      	mov	r1, r0
 8004f5a:	4650      	mov	r0, sl
 8004f5c:	f000 fb7e 	bl	800565c <__mcmp>
 8004f60:	4602      	mov	r2, r0
 8004f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f64:	4639      	mov	r1, r7
 8004f66:	4628      	mov	r0, r5
 8004f68:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004f6c:	f000 f93c 	bl	80051e8 <_Bfree>
 8004f70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f74:	9f02      	ldr	r7, [sp, #8]
 8004f76:	ea43 0102 	orr.w	r1, r3, r2
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f80:	d10d      	bne.n	8004f9e <_dtoa_r+0xa86>
 8004f82:	2b39      	cmp	r3, #57	; 0x39
 8004f84:	d027      	beq.n	8004fd6 <_dtoa_r+0xabe>
 8004f86:	9a06      	ldr	r2, [sp, #24]
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	dd01      	ble.n	8004f90 <_dtoa_r+0xa78>
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	3331      	adds	r3, #49	; 0x31
 8004f90:	f88b 3000 	strb.w	r3, [fp]
 8004f94:	e776      	b.n	8004e84 <_dtoa_r+0x96c>
 8004f96:	4630      	mov	r0, r6
 8004f98:	e7b9      	b.n	8004f0e <_dtoa_r+0x9f6>
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	e7e2      	b.n	8004f64 <_dtoa_r+0xa4c>
 8004f9e:	9906      	ldr	r1, [sp, #24]
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	db04      	blt.n	8004fae <_dtoa_r+0xa96>
 8004fa4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004fa6:	4301      	orrs	r1, r0
 8004fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004faa:	4301      	orrs	r1, r0
 8004fac:	d120      	bne.n	8004ff0 <_dtoa_r+0xad8>
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	ddee      	ble.n	8004f90 <_dtoa_r+0xa78>
 8004fb2:	4651      	mov	r1, sl
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	f000 fae3 	bl	8005584 <__lshift>
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4682      	mov	sl, r0
 8004fc2:	f000 fb4b 	bl	800565c <__mcmp>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	9b02      	ldr	r3, [sp, #8]
 8004fca:	dc02      	bgt.n	8004fd2 <_dtoa_r+0xaba>
 8004fcc:	d1e0      	bne.n	8004f90 <_dtoa_r+0xa78>
 8004fce:	07da      	lsls	r2, r3, #31
 8004fd0:	d5de      	bpl.n	8004f90 <_dtoa_r+0xa78>
 8004fd2:	2b39      	cmp	r3, #57	; 0x39
 8004fd4:	d1da      	bne.n	8004f8c <_dtoa_r+0xa74>
 8004fd6:	2339      	movs	r3, #57	; 0x39
 8004fd8:	f88b 3000 	strb.w	r3, [fp]
 8004fdc:	463b      	mov	r3, r7
 8004fde:	461f      	mov	r7, r3
 8004fe0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	2a39      	cmp	r2, #57	; 0x39
 8004fe8:	d050      	beq.n	800508c <_dtoa_r+0xb74>
 8004fea:	3201      	adds	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e749      	b.n	8004e84 <_dtoa_r+0x96c>
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	dd03      	ble.n	8004ffc <_dtoa_r+0xae4>
 8004ff4:	2b39      	cmp	r3, #57	; 0x39
 8004ff6:	d0ee      	beq.n	8004fd6 <_dtoa_r+0xabe>
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	e7c9      	b.n	8004f90 <_dtoa_r+0xa78>
 8004ffc:	9a02      	ldr	r2, [sp, #8]
 8004ffe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005000:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005004:	428a      	cmp	r2, r1
 8005006:	d02a      	beq.n	800505e <_dtoa_r+0xb46>
 8005008:	4651      	mov	r1, sl
 800500a:	2300      	movs	r3, #0
 800500c:	220a      	movs	r2, #10
 800500e:	4628      	mov	r0, r5
 8005010:	f000 f90c 	bl	800522c <__multadd>
 8005014:	45b0      	cmp	r8, r6
 8005016:	4682      	mov	sl, r0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	f04f 020a 	mov.w	r2, #10
 8005020:	4641      	mov	r1, r8
 8005022:	4628      	mov	r0, r5
 8005024:	d107      	bne.n	8005036 <_dtoa_r+0xb1e>
 8005026:	f000 f901 	bl	800522c <__multadd>
 800502a:	4680      	mov	r8, r0
 800502c:	4606      	mov	r6, r0
 800502e:	9b02      	ldr	r3, [sp, #8]
 8005030:	3301      	adds	r3, #1
 8005032:	9302      	str	r3, [sp, #8]
 8005034:	e777      	b.n	8004f26 <_dtoa_r+0xa0e>
 8005036:	f000 f8f9 	bl	800522c <__multadd>
 800503a:	4631      	mov	r1, r6
 800503c:	4680      	mov	r8, r0
 800503e:	2300      	movs	r3, #0
 8005040:	220a      	movs	r2, #10
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f8f2 	bl	800522c <__multadd>
 8005048:	4606      	mov	r6, r0
 800504a:	e7f0      	b.n	800502e <_dtoa_r+0xb16>
 800504c:	f1bb 0f00 	cmp.w	fp, #0
 8005050:	bfcc      	ite	gt
 8005052:	465f      	movgt	r7, fp
 8005054:	2701      	movle	r7, #1
 8005056:	f04f 0800 	mov.w	r8, #0
 800505a:	9a08      	ldr	r2, [sp, #32]
 800505c:	4417      	add	r7, r2
 800505e:	4651      	mov	r1, sl
 8005060:	2201      	movs	r2, #1
 8005062:	4628      	mov	r0, r5
 8005064:	9302      	str	r3, [sp, #8]
 8005066:	f000 fa8d 	bl	8005584 <__lshift>
 800506a:	4621      	mov	r1, r4
 800506c:	4682      	mov	sl, r0
 800506e:	f000 faf5 	bl	800565c <__mcmp>
 8005072:	2800      	cmp	r0, #0
 8005074:	dcb2      	bgt.n	8004fdc <_dtoa_r+0xac4>
 8005076:	d102      	bne.n	800507e <_dtoa_r+0xb66>
 8005078:	9b02      	ldr	r3, [sp, #8]
 800507a:	07db      	lsls	r3, r3, #31
 800507c:	d4ae      	bmi.n	8004fdc <_dtoa_r+0xac4>
 800507e:	463b      	mov	r3, r7
 8005080:	461f      	mov	r7, r3
 8005082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005086:	2a30      	cmp	r2, #48	; 0x30
 8005088:	d0fa      	beq.n	8005080 <_dtoa_r+0xb68>
 800508a:	e6fb      	b.n	8004e84 <_dtoa_r+0x96c>
 800508c:	9a08      	ldr	r2, [sp, #32]
 800508e:	429a      	cmp	r2, r3
 8005090:	d1a5      	bne.n	8004fde <_dtoa_r+0xac6>
 8005092:	2331      	movs	r3, #49	; 0x31
 8005094:	f109 0901 	add.w	r9, r9, #1
 8005098:	7013      	strb	r3, [r2, #0]
 800509a:	e6f3      	b.n	8004e84 <_dtoa_r+0x96c>
 800509c:	4b13      	ldr	r3, [pc, #76]	; (80050ec <_dtoa_r+0xbd4>)
 800509e:	f7ff baa7 	b.w	80045f0 <_dtoa_r+0xd8>
 80050a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f47f aa80 	bne.w	80045aa <_dtoa_r+0x92>
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <_dtoa_r+0xbd8>)
 80050ac:	f7ff baa0 	b.w	80045f0 <_dtoa_r+0xd8>
 80050b0:	f1bb 0f00 	cmp.w	fp, #0
 80050b4:	dc03      	bgt.n	80050be <_dtoa_r+0xba6>
 80050b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	f73f aecc 	bgt.w	8004e56 <_dtoa_r+0x93e>
 80050be:	9f08      	ldr	r7, [sp, #32]
 80050c0:	4621      	mov	r1, r4
 80050c2:	4650      	mov	r0, sl
 80050c4:	f7ff f998 	bl	80043f8 <quorem>
 80050c8:	9a08      	ldr	r2, [sp, #32]
 80050ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80050ce:	f807 3b01 	strb.w	r3, [r7], #1
 80050d2:	1aba      	subs	r2, r7, r2
 80050d4:	4593      	cmp	fp, r2
 80050d6:	ddb9      	ble.n	800504c <_dtoa_r+0xb34>
 80050d8:	4651      	mov	r1, sl
 80050da:	2300      	movs	r3, #0
 80050dc:	220a      	movs	r2, #10
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 f8a4 	bl	800522c <__multadd>
 80050e4:	4682      	mov	sl, r0
 80050e6:	e7eb      	b.n	80050c0 <_dtoa_r+0xba8>
 80050e8:	080071c9 	.word	0x080071c9
 80050ec:	08007351 	.word	0x08007351
 80050f0:	08007146 	.word	0x08007146

080050f4 <_localeconv_r>:
 80050f4:	4800      	ldr	r0, [pc, #0]	; (80050f8 <_localeconv_r+0x4>)
 80050f6:	4770      	bx	lr
 80050f8:	20000164 	.word	0x20000164

080050fc <_lseek_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	2200      	movs	r2, #0
 8005106:	4d05      	ldr	r5, [pc, #20]	; (800511c <_lseek_r+0x20>)
 8005108:	602a      	str	r2, [r5, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f7fb fedc 	bl	8000ec8 <_lseek>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_lseek_r+0x1e>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_lseek_r+0x1e>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	2000031c 	.word	0x2000031c

08005120 <malloc>:
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <malloc+0xc>)
 8005122:	4601      	mov	r1, r0
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f000 bbfb 	b.w	8005920 <_malloc_r>
 800512a:	bf00      	nop
 800512c:	20000010 	.word	0x20000010

08005130 <memchr>:
 8005130:	4603      	mov	r3, r0
 8005132:	b510      	push	{r4, lr}
 8005134:	b2c9      	uxtb	r1, r1
 8005136:	4402      	add	r2, r0
 8005138:	4293      	cmp	r3, r2
 800513a:	4618      	mov	r0, r3
 800513c:	d101      	bne.n	8005142 <memchr+0x12>
 800513e:	2000      	movs	r0, #0
 8005140:	e003      	b.n	800514a <memchr+0x1a>
 8005142:	7804      	ldrb	r4, [r0, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	428c      	cmp	r4, r1
 8005148:	d1f6      	bne.n	8005138 <memchr+0x8>
 800514a:	bd10      	pop	{r4, pc}

0800514c <memcpy>:
 800514c:	440a      	add	r2, r1
 800514e:	4291      	cmp	r1, r2
 8005150:	f100 33ff 	add.w	r3, r0, #4294967295
 8005154:	d100      	bne.n	8005158 <memcpy+0xc>
 8005156:	4770      	bx	lr
 8005158:	b510      	push	{r4, lr}
 800515a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800515e:	4291      	cmp	r1, r2
 8005160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005164:	d1f9      	bne.n	800515a <memcpy+0xe>
 8005166:	bd10      	pop	{r4, pc}

08005168 <_Balloc>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800516c:	4604      	mov	r4, r0
 800516e:	460d      	mov	r5, r1
 8005170:	b976      	cbnz	r6, 8005190 <_Balloc+0x28>
 8005172:	2010      	movs	r0, #16
 8005174:	f7ff ffd4 	bl	8005120 <malloc>
 8005178:	4602      	mov	r2, r0
 800517a:	6260      	str	r0, [r4, #36]	; 0x24
 800517c:	b920      	cbnz	r0, 8005188 <_Balloc+0x20>
 800517e:	2166      	movs	r1, #102	; 0x66
 8005180:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <_Balloc+0x78>)
 8005182:	4818      	ldr	r0, [pc, #96]	; (80051e4 <_Balloc+0x7c>)
 8005184:	f001 fa3a 	bl	80065fc <__assert_func>
 8005188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800518c:	6006      	str	r6, [r0, #0]
 800518e:	60c6      	str	r6, [r0, #12]
 8005190:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005192:	68f3      	ldr	r3, [r6, #12]
 8005194:	b183      	cbz	r3, 80051b8 <_Balloc+0x50>
 8005196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800519e:	b9b8      	cbnz	r0, 80051d0 <_Balloc+0x68>
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f605 	lsl.w	r6, r1, r5
 80051a6:	1d72      	adds	r2, r6, #5
 80051a8:	4620      	mov	r0, r4
 80051aa:	0092      	lsls	r2, r2, #2
 80051ac:	f000 fb5e 	bl	800586c <_calloc_r>
 80051b0:	b160      	cbz	r0, 80051cc <_Balloc+0x64>
 80051b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051b6:	e00e      	b.n	80051d6 <_Balloc+0x6e>
 80051b8:	2221      	movs	r2, #33	; 0x21
 80051ba:	2104      	movs	r1, #4
 80051bc:	4620      	mov	r0, r4
 80051be:	f000 fb55 	bl	800586c <_calloc_r>
 80051c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c4:	60f0      	str	r0, [r6, #12]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e4      	bne.n	8005196 <_Balloc+0x2e>
 80051cc:	2000      	movs	r0, #0
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	6802      	ldr	r2, [r0, #0]
 80051d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051d6:	2300      	movs	r3, #0
 80051d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051dc:	e7f7      	b.n	80051ce <_Balloc+0x66>
 80051de:	bf00      	nop
 80051e0:	08007153 	.word	0x08007153
 80051e4:	080071da 	.word	0x080071da

080051e8 <_Bfree>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051ec:	4605      	mov	r5, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	b976      	cbnz	r6, 8005210 <_Bfree+0x28>
 80051f2:	2010      	movs	r0, #16
 80051f4:	f7ff ff94 	bl	8005120 <malloc>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6268      	str	r0, [r5, #36]	; 0x24
 80051fc:	b920      	cbnz	r0, 8005208 <_Bfree+0x20>
 80051fe:	218a      	movs	r1, #138	; 0x8a
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <_Bfree+0x3c>)
 8005202:	4809      	ldr	r0, [pc, #36]	; (8005228 <_Bfree+0x40>)
 8005204:	f001 f9fa 	bl	80065fc <__assert_func>
 8005208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800520c:	6006      	str	r6, [r0, #0]
 800520e:	60c6      	str	r6, [r0, #12]
 8005210:	b13c      	cbz	r4, 8005222 <_Bfree+0x3a>
 8005212:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005214:	6862      	ldr	r2, [r4, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800521c:	6021      	str	r1, [r4, #0]
 800521e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	08007153 	.word	0x08007153
 8005228:	080071da 	.word	0x080071da

0800522c <__multadd>:
 800522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005230:	4698      	mov	r8, r3
 8005232:	460c      	mov	r4, r1
 8005234:	2300      	movs	r3, #0
 8005236:	690e      	ldr	r6, [r1, #16]
 8005238:	4607      	mov	r7, r0
 800523a:	f101 0014 	add.w	r0, r1, #20
 800523e:	6805      	ldr	r5, [r0, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	b2a9      	uxth	r1, r5
 8005244:	fb02 8101 	mla	r1, r2, r1, r8
 8005248:	0c2d      	lsrs	r5, r5, #16
 800524a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800524e:	fb02 c505 	mla	r5, r2, r5, ip
 8005252:	b289      	uxth	r1, r1
 8005254:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005258:	429e      	cmp	r6, r3
 800525a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800525e:	f840 1b04 	str.w	r1, [r0], #4
 8005262:	dcec      	bgt.n	800523e <__multadd+0x12>
 8005264:	f1b8 0f00 	cmp.w	r8, #0
 8005268:	d022      	beq.n	80052b0 <__multadd+0x84>
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	42b3      	cmp	r3, r6
 800526e:	dc19      	bgt.n	80052a4 <__multadd+0x78>
 8005270:	6861      	ldr	r1, [r4, #4]
 8005272:	4638      	mov	r0, r7
 8005274:	3101      	adds	r1, #1
 8005276:	f7ff ff77 	bl	8005168 <_Balloc>
 800527a:	4605      	mov	r5, r0
 800527c:	b928      	cbnz	r0, 800528a <__multadd+0x5e>
 800527e:	4602      	mov	r2, r0
 8005280:	21b5      	movs	r1, #181	; 0xb5
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <__multadd+0x8c>)
 8005284:	480d      	ldr	r0, [pc, #52]	; (80052bc <__multadd+0x90>)
 8005286:	f001 f9b9 	bl	80065fc <__assert_func>
 800528a:	6922      	ldr	r2, [r4, #16]
 800528c:	f104 010c 	add.w	r1, r4, #12
 8005290:	3202      	adds	r2, #2
 8005292:	0092      	lsls	r2, r2, #2
 8005294:	300c      	adds	r0, #12
 8005296:	f7ff ff59 	bl	800514c <memcpy>
 800529a:	4621      	mov	r1, r4
 800529c:	4638      	mov	r0, r7
 800529e:	f7ff ffa3 	bl	80051e8 <_Bfree>
 80052a2:	462c      	mov	r4, r5
 80052a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80052a8:	3601      	adds	r6, #1
 80052aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80052ae:	6126      	str	r6, [r4, #16]
 80052b0:	4620      	mov	r0, r4
 80052b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b6:	bf00      	nop
 80052b8:	080071c9 	.word	0x080071c9
 80052bc:	080071da 	.word	0x080071da

080052c0 <__hi0bits>:
 80052c0:	0c02      	lsrs	r2, r0, #16
 80052c2:	0412      	lsls	r2, r2, #16
 80052c4:	4603      	mov	r3, r0
 80052c6:	b9ca      	cbnz	r2, 80052fc <__hi0bits+0x3c>
 80052c8:	0403      	lsls	r3, r0, #16
 80052ca:	2010      	movs	r0, #16
 80052cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80052d0:	bf04      	itt	eq
 80052d2:	021b      	lsleq	r3, r3, #8
 80052d4:	3008      	addeq	r0, #8
 80052d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80052da:	bf04      	itt	eq
 80052dc:	011b      	lsleq	r3, r3, #4
 80052de:	3004      	addeq	r0, #4
 80052e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80052e4:	bf04      	itt	eq
 80052e6:	009b      	lsleq	r3, r3, #2
 80052e8:	3002      	addeq	r0, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db05      	blt.n	80052fa <__hi0bits+0x3a>
 80052ee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80052f2:	f100 0001 	add.w	r0, r0, #1
 80052f6:	bf08      	it	eq
 80052f8:	2020      	moveq	r0, #32
 80052fa:	4770      	bx	lr
 80052fc:	2000      	movs	r0, #0
 80052fe:	e7e5      	b.n	80052cc <__hi0bits+0xc>

08005300 <__lo0bits>:
 8005300:	6803      	ldr	r3, [r0, #0]
 8005302:	4602      	mov	r2, r0
 8005304:	f013 0007 	ands.w	r0, r3, #7
 8005308:	d00b      	beq.n	8005322 <__lo0bits+0x22>
 800530a:	07d9      	lsls	r1, r3, #31
 800530c:	d422      	bmi.n	8005354 <__lo0bits+0x54>
 800530e:	0798      	lsls	r0, r3, #30
 8005310:	bf49      	itett	mi
 8005312:	085b      	lsrmi	r3, r3, #1
 8005314:	089b      	lsrpl	r3, r3, #2
 8005316:	2001      	movmi	r0, #1
 8005318:	6013      	strmi	r3, [r2, #0]
 800531a:	bf5c      	itt	pl
 800531c:	2002      	movpl	r0, #2
 800531e:	6013      	strpl	r3, [r2, #0]
 8005320:	4770      	bx	lr
 8005322:	b299      	uxth	r1, r3
 8005324:	b909      	cbnz	r1, 800532a <__lo0bits+0x2a>
 8005326:	2010      	movs	r0, #16
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800532e:	bf04      	itt	eq
 8005330:	0a1b      	lsreq	r3, r3, #8
 8005332:	3008      	addeq	r0, #8
 8005334:	0719      	lsls	r1, r3, #28
 8005336:	bf04      	itt	eq
 8005338:	091b      	lsreq	r3, r3, #4
 800533a:	3004      	addeq	r0, #4
 800533c:	0799      	lsls	r1, r3, #30
 800533e:	bf04      	itt	eq
 8005340:	089b      	lsreq	r3, r3, #2
 8005342:	3002      	addeq	r0, #2
 8005344:	07d9      	lsls	r1, r3, #31
 8005346:	d403      	bmi.n	8005350 <__lo0bits+0x50>
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	f100 0001 	add.w	r0, r0, #1
 800534e:	d003      	beq.n	8005358 <__lo0bits+0x58>
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4770      	bx	lr
 8005354:	2000      	movs	r0, #0
 8005356:	4770      	bx	lr
 8005358:	2020      	movs	r0, #32
 800535a:	4770      	bx	lr

0800535c <__i2b>:
 800535c:	b510      	push	{r4, lr}
 800535e:	460c      	mov	r4, r1
 8005360:	2101      	movs	r1, #1
 8005362:	f7ff ff01 	bl	8005168 <_Balloc>
 8005366:	4602      	mov	r2, r0
 8005368:	b928      	cbnz	r0, 8005376 <__i2b+0x1a>
 800536a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <__i2b+0x24>)
 8005370:	4804      	ldr	r0, [pc, #16]	; (8005384 <__i2b+0x28>)
 8005372:	f001 f943 	bl	80065fc <__assert_func>
 8005376:	2301      	movs	r3, #1
 8005378:	6144      	str	r4, [r0, #20]
 800537a:	6103      	str	r3, [r0, #16]
 800537c:	bd10      	pop	{r4, pc}
 800537e:	bf00      	nop
 8005380:	080071c9 	.word	0x080071c9
 8005384:	080071da 	.word	0x080071da

08005388 <__multiply>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	4614      	mov	r4, r2
 800538e:	690a      	ldr	r2, [r1, #16]
 8005390:	6923      	ldr	r3, [r4, #16]
 8005392:	460d      	mov	r5, r1
 8005394:	429a      	cmp	r2, r3
 8005396:	bfbe      	ittt	lt
 8005398:	460b      	movlt	r3, r1
 800539a:	4625      	movlt	r5, r4
 800539c:	461c      	movlt	r4, r3
 800539e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80053a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80053a6:	68ab      	ldr	r3, [r5, #8]
 80053a8:	6869      	ldr	r1, [r5, #4]
 80053aa:	eb0a 0709 	add.w	r7, sl, r9
 80053ae:	42bb      	cmp	r3, r7
 80053b0:	b085      	sub	sp, #20
 80053b2:	bfb8      	it	lt
 80053b4:	3101      	addlt	r1, #1
 80053b6:	f7ff fed7 	bl	8005168 <_Balloc>
 80053ba:	b930      	cbnz	r0, 80053ca <__multiply+0x42>
 80053bc:	4602      	mov	r2, r0
 80053be:	f240 115d 	movw	r1, #349	; 0x15d
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <__multiply+0x140>)
 80053c4:	4841      	ldr	r0, [pc, #260]	; (80054cc <__multiply+0x144>)
 80053c6:	f001 f919 	bl	80065fc <__assert_func>
 80053ca:	f100 0614 	add.w	r6, r0, #20
 80053ce:	4633      	mov	r3, r6
 80053d0:	2200      	movs	r2, #0
 80053d2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80053d6:	4543      	cmp	r3, r8
 80053d8:	d31e      	bcc.n	8005418 <__multiply+0x90>
 80053da:	f105 0c14 	add.w	ip, r5, #20
 80053de:	f104 0314 	add.w	r3, r4, #20
 80053e2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80053e6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80053ea:	9202      	str	r2, [sp, #8]
 80053ec:	ebac 0205 	sub.w	r2, ip, r5
 80053f0:	3a15      	subs	r2, #21
 80053f2:	f022 0203 	bic.w	r2, r2, #3
 80053f6:	3204      	adds	r2, #4
 80053f8:	f105 0115 	add.w	r1, r5, #21
 80053fc:	458c      	cmp	ip, r1
 80053fe:	bf38      	it	cc
 8005400:	2204      	movcc	r2, #4
 8005402:	9201      	str	r2, [sp, #4]
 8005404:	9a02      	ldr	r2, [sp, #8]
 8005406:	9303      	str	r3, [sp, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	d808      	bhi.n	800541e <__multiply+0x96>
 800540c:	2f00      	cmp	r7, #0
 800540e:	dc55      	bgt.n	80054bc <__multiply+0x134>
 8005410:	6107      	str	r7, [r0, #16]
 8005412:	b005      	add	sp, #20
 8005414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005418:	f843 2b04 	str.w	r2, [r3], #4
 800541c:	e7db      	b.n	80053d6 <__multiply+0x4e>
 800541e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005422:	f1ba 0f00 	cmp.w	sl, #0
 8005426:	d020      	beq.n	800546a <__multiply+0xe2>
 8005428:	46b1      	mov	r9, r6
 800542a:	2200      	movs	r2, #0
 800542c:	f105 0e14 	add.w	lr, r5, #20
 8005430:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005434:	f8d9 b000 	ldr.w	fp, [r9]
 8005438:	b2a1      	uxth	r1, r4
 800543a:	fa1f fb8b 	uxth.w	fp, fp
 800543e:	fb0a b101 	mla	r1, sl, r1, fp
 8005442:	4411      	add	r1, r2
 8005444:	f8d9 2000 	ldr.w	r2, [r9]
 8005448:	0c24      	lsrs	r4, r4, #16
 800544a:	0c12      	lsrs	r2, r2, #16
 800544c:	fb0a 2404 	mla	r4, sl, r4, r2
 8005450:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005454:	b289      	uxth	r1, r1
 8005456:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800545a:	45f4      	cmp	ip, lr
 800545c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005460:	f849 1b04 	str.w	r1, [r9], #4
 8005464:	d8e4      	bhi.n	8005430 <__multiply+0xa8>
 8005466:	9901      	ldr	r1, [sp, #4]
 8005468:	5072      	str	r2, [r6, r1]
 800546a:	9a03      	ldr	r2, [sp, #12]
 800546c:	3304      	adds	r3, #4
 800546e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005472:	f1b9 0f00 	cmp.w	r9, #0
 8005476:	d01f      	beq.n	80054b8 <__multiply+0x130>
 8005478:	46b6      	mov	lr, r6
 800547a:	f04f 0a00 	mov.w	sl, #0
 800547e:	6834      	ldr	r4, [r6, #0]
 8005480:	f105 0114 	add.w	r1, r5, #20
 8005484:	880a      	ldrh	r2, [r1, #0]
 8005486:	f8be b002 	ldrh.w	fp, [lr, #2]
 800548a:	b2a4      	uxth	r4, r4
 800548c:	fb09 b202 	mla	r2, r9, r2, fp
 8005490:	4492      	add	sl, r2
 8005492:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005496:	f84e 4b04 	str.w	r4, [lr], #4
 800549a:	f851 4b04 	ldr.w	r4, [r1], #4
 800549e:	f8be 2000 	ldrh.w	r2, [lr]
 80054a2:	0c24      	lsrs	r4, r4, #16
 80054a4:	fb09 2404 	mla	r4, r9, r4, r2
 80054a8:	458c      	cmp	ip, r1
 80054aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80054ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80054b2:	d8e7      	bhi.n	8005484 <__multiply+0xfc>
 80054b4:	9a01      	ldr	r2, [sp, #4]
 80054b6:	50b4      	str	r4, [r6, r2]
 80054b8:	3604      	adds	r6, #4
 80054ba:	e7a3      	b.n	8005404 <__multiply+0x7c>
 80054bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1a5      	bne.n	8005410 <__multiply+0x88>
 80054c4:	3f01      	subs	r7, #1
 80054c6:	e7a1      	b.n	800540c <__multiply+0x84>
 80054c8:	080071c9 	.word	0x080071c9
 80054cc:	080071da 	.word	0x080071da

080054d0 <__pow5mult>:
 80054d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d4:	4615      	mov	r5, r2
 80054d6:	f012 0203 	ands.w	r2, r2, #3
 80054da:	4606      	mov	r6, r0
 80054dc:	460f      	mov	r7, r1
 80054de:	d007      	beq.n	80054f0 <__pow5mult+0x20>
 80054e0:	4c25      	ldr	r4, [pc, #148]	; (8005578 <__pow5mult+0xa8>)
 80054e2:	3a01      	subs	r2, #1
 80054e4:	2300      	movs	r3, #0
 80054e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054ea:	f7ff fe9f 	bl	800522c <__multadd>
 80054ee:	4607      	mov	r7, r0
 80054f0:	10ad      	asrs	r5, r5, #2
 80054f2:	d03d      	beq.n	8005570 <__pow5mult+0xa0>
 80054f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054f6:	b97c      	cbnz	r4, 8005518 <__pow5mult+0x48>
 80054f8:	2010      	movs	r0, #16
 80054fa:	f7ff fe11 	bl	8005120 <malloc>
 80054fe:	4602      	mov	r2, r0
 8005500:	6270      	str	r0, [r6, #36]	; 0x24
 8005502:	b928      	cbnz	r0, 8005510 <__pow5mult+0x40>
 8005504:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005508:	4b1c      	ldr	r3, [pc, #112]	; (800557c <__pow5mult+0xac>)
 800550a:	481d      	ldr	r0, [pc, #116]	; (8005580 <__pow5mult+0xb0>)
 800550c:	f001 f876 	bl	80065fc <__assert_func>
 8005510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005514:	6004      	str	r4, [r0, #0]
 8005516:	60c4      	str	r4, [r0, #12]
 8005518:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800551c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005520:	b94c      	cbnz	r4, 8005536 <__pow5mult+0x66>
 8005522:	f240 2171 	movw	r1, #625	; 0x271
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ff18 	bl	800535c <__i2b>
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	f8c8 0008 	str.w	r0, [r8, #8]
 8005534:	6003      	str	r3, [r0, #0]
 8005536:	f04f 0900 	mov.w	r9, #0
 800553a:	07eb      	lsls	r3, r5, #31
 800553c:	d50a      	bpl.n	8005554 <__pow5mult+0x84>
 800553e:	4639      	mov	r1, r7
 8005540:	4622      	mov	r2, r4
 8005542:	4630      	mov	r0, r6
 8005544:	f7ff ff20 	bl	8005388 <__multiply>
 8005548:	4680      	mov	r8, r0
 800554a:	4639      	mov	r1, r7
 800554c:	4630      	mov	r0, r6
 800554e:	f7ff fe4b 	bl	80051e8 <_Bfree>
 8005552:	4647      	mov	r7, r8
 8005554:	106d      	asrs	r5, r5, #1
 8005556:	d00b      	beq.n	8005570 <__pow5mult+0xa0>
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	b938      	cbnz	r0, 800556c <__pow5mult+0x9c>
 800555c:	4622      	mov	r2, r4
 800555e:	4621      	mov	r1, r4
 8005560:	4630      	mov	r0, r6
 8005562:	f7ff ff11 	bl	8005388 <__multiply>
 8005566:	6020      	str	r0, [r4, #0]
 8005568:	f8c0 9000 	str.w	r9, [r0]
 800556c:	4604      	mov	r4, r0
 800556e:	e7e4      	b.n	800553a <__pow5mult+0x6a>
 8005570:	4638      	mov	r0, r7
 8005572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005576:	bf00      	nop
 8005578:	08007330 	.word	0x08007330
 800557c:	08007153 	.word	0x08007153
 8005580:	080071da 	.word	0x080071da

08005584 <__lshift>:
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	460c      	mov	r4, r1
 800558a:	4607      	mov	r7, r0
 800558c:	4691      	mov	r9, r2
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	6849      	ldr	r1, [r1, #4]
 8005592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800559c:	f108 0601 	add.w	r6, r8, #1
 80055a0:	42b3      	cmp	r3, r6
 80055a2:	db0b      	blt.n	80055bc <__lshift+0x38>
 80055a4:	4638      	mov	r0, r7
 80055a6:	f7ff fddf 	bl	8005168 <_Balloc>
 80055aa:	4605      	mov	r5, r0
 80055ac:	b948      	cbnz	r0, 80055c2 <__lshift+0x3e>
 80055ae:	4602      	mov	r2, r0
 80055b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80055b4:	4b27      	ldr	r3, [pc, #156]	; (8005654 <__lshift+0xd0>)
 80055b6:	4828      	ldr	r0, [pc, #160]	; (8005658 <__lshift+0xd4>)
 80055b8:	f001 f820 	bl	80065fc <__assert_func>
 80055bc:	3101      	adds	r1, #1
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	e7ee      	b.n	80055a0 <__lshift+0x1c>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f100 0114 	add.w	r1, r0, #20
 80055c8:	f100 0210 	add.w	r2, r0, #16
 80055cc:	4618      	mov	r0, r3
 80055ce:	4553      	cmp	r3, sl
 80055d0:	db33      	blt.n	800563a <__lshift+0xb6>
 80055d2:	6920      	ldr	r0, [r4, #16]
 80055d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055d8:	f104 0314 	add.w	r3, r4, #20
 80055dc:	f019 091f 	ands.w	r9, r9, #31
 80055e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055e8:	d02b      	beq.n	8005642 <__lshift+0xbe>
 80055ea:	468a      	mov	sl, r1
 80055ec:	2200      	movs	r2, #0
 80055ee:	f1c9 0e20 	rsb	lr, r9, #32
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	fa00 f009 	lsl.w	r0, r0, r9
 80055f8:	4302      	orrs	r2, r0
 80055fa:	f84a 2b04 	str.w	r2, [sl], #4
 80055fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005602:	459c      	cmp	ip, r3
 8005604:	fa22 f20e 	lsr.w	r2, r2, lr
 8005608:	d8f3      	bhi.n	80055f2 <__lshift+0x6e>
 800560a:	ebac 0304 	sub.w	r3, ip, r4
 800560e:	3b15      	subs	r3, #21
 8005610:	f023 0303 	bic.w	r3, r3, #3
 8005614:	3304      	adds	r3, #4
 8005616:	f104 0015 	add.w	r0, r4, #21
 800561a:	4584      	cmp	ip, r0
 800561c:	bf38      	it	cc
 800561e:	2304      	movcc	r3, #4
 8005620:	50ca      	str	r2, [r1, r3]
 8005622:	b10a      	cbz	r2, 8005628 <__lshift+0xa4>
 8005624:	f108 0602 	add.w	r6, r8, #2
 8005628:	3e01      	subs	r6, #1
 800562a:	4638      	mov	r0, r7
 800562c:	4621      	mov	r1, r4
 800562e:	612e      	str	r6, [r5, #16]
 8005630:	f7ff fdda 	bl	80051e8 <_Bfree>
 8005634:	4628      	mov	r0, r5
 8005636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563a:	f842 0f04 	str.w	r0, [r2, #4]!
 800563e:	3301      	adds	r3, #1
 8005640:	e7c5      	b.n	80055ce <__lshift+0x4a>
 8005642:	3904      	subs	r1, #4
 8005644:	f853 2b04 	ldr.w	r2, [r3], #4
 8005648:	459c      	cmp	ip, r3
 800564a:	f841 2f04 	str.w	r2, [r1, #4]!
 800564e:	d8f9      	bhi.n	8005644 <__lshift+0xc0>
 8005650:	e7ea      	b.n	8005628 <__lshift+0xa4>
 8005652:	bf00      	nop
 8005654:	080071c9 	.word	0x080071c9
 8005658:	080071da 	.word	0x080071da

0800565c <__mcmp>:
 800565c:	4603      	mov	r3, r0
 800565e:	690a      	ldr	r2, [r1, #16]
 8005660:	6900      	ldr	r0, [r0, #16]
 8005662:	b530      	push	{r4, r5, lr}
 8005664:	1a80      	subs	r0, r0, r2
 8005666:	d10d      	bne.n	8005684 <__mcmp+0x28>
 8005668:	3314      	adds	r3, #20
 800566a:	3114      	adds	r1, #20
 800566c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005670:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800567c:	4295      	cmp	r5, r2
 800567e:	d002      	beq.n	8005686 <__mcmp+0x2a>
 8005680:	d304      	bcc.n	800568c <__mcmp+0x30>
 8005682:	2001      	movs	r0, #1
 8005684:	bd30      	pop	{r4, r5, pc}
 8005686:	42a3      	cmp	r3, r4
 8005688:	d3f4      	bcc.n	8005674 <__mcmp+0x18>
 800568a:	e7fb      	b.n	8005684 <__mcmp+0x28>
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e7f8      	b.n	8005684 <__mcmp+0x28>
	...

08005694 <__mdiff>:
 8005694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	460c      	mov	r4, r1
 800569a:	4606      	mov	r6, r0
 800569c:	4611      	mov	r1, r2
 800569e:	4620      	mov	r0, r4
 80056a0:	4692      	mov	sl, r2
 80056a2:	f7ff ffdb 	bl	800565c <__mcmp>
 80056a6:	1e05      	subs	r5, r0, #0
 80056a8:	d111      	bne.n	80056ce <__mdiff+0x3a>
 80056aa:	4629      	mov	r1, r5
 80056ac:	4630      	mov	r0, r6
 80056ae:	f7ff fd5b 	bl	8005168 <_Balloc>
 80056b2:	4602      	mov	r2, r0
 80056b4:	b928      	cbnz	r0, 80056c2 <__mdiff+0x2e>
 80056b6:	f240 2132 	movw	r1, #562	; 0x232
 80056ba:	4b3c      	ldr	r3, [pc, #240]	; (80057ac <__mdiff+0x118>)
 80056bc:	483c      	ldr	r0, [pc, #240]	; (80057b0 <__mdiff+0x11c>)
 80056be:	f000 ff9d 	bl	80065fc <__assert_func>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056c8:	4610      	mov	r0, r2
 80056ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	bfa4      	itt	ge
 80056d0:	4653      	movge	r3, sl
 80056d2:	46a2      	movge	sl, r4
 80056d4:	4630      	mov	r0, r6
 80056d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80056da:	bfa6      	itte	ge
 80056dc:	461c      	movge	r4, r3
 80056de:	2500      	movge	r5, #0
 80056e0:	2501      	movlt	r5, #1
 80056e2:	f7ff fd41 	bl	8005168 <_Balloc>
 80056e6:	4602      	mov	r2, r0
 80056e8:	b918      	cbnz	r0, 80056f2 <__mdiff+0x5e>
 80056ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80056ee:	4b2f      	ldr	r3, [pc, #188]	; (80057ac <__mdiff+0x118>)
 80056f0:	e7e4      	b.n	80056bc <__mdiff+0x28>
 80056f2:	f100 0814 	add.w	r8, r0, #20
 80056f6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80056fa:	60c5      	str	r5, [r0, #12]
 80056fc:	f04f 0c00 	mov.w	ip, #0
 8005700:	f10a 0514 	add.w	r5, sl, #20
 8005704:	f10a 0010 	add.w	r0, sl, #16
 8005708:	46c2      	mov	sl, r8
 800570a:	6926      	ldr	r6, [r4, #16]
 800570c:	f104 0914 	add.w	r9, r4, #20
 8005710:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005714:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005718:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800571c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005720:	fa1f f18b 	uxth.w	r1, fp
 8005724:	4461      	add	r1, ip
 8005726:	fa1f fc83 	uxth.w	ip, r3
 800572a:	0c1b      	lsrs	r3, r3, #16
 800572c:	eba1 010c 	sub.w	r1, r1, ip
 8005730:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005734:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005738:	b289      	uxth	r1, r1
 800573a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800573e:	454e      	cmp	r6, r9
 8005740:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005744:	f84a 3b04 	str.w	r3, [sl], #4
 8005748:	d8e6      	bhi.n	8005718 <__mdiff+0x84>
 800574a:	1b33      	subs	r3, r6, r4
 800574c:	3b15      	subs	r3, #21
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	3415      	adds	r4, #21
 8005754:	3304      	adds	r3, #4
 8005756:	42a6      	cmp	r6, r4
 8005758:	bf38      	it	cc
 800575a:	2304      	movcc	r3, #4
 800575c:	441d      	add	r5, r3
 800575e:	4443      	add	r3, r8
 8005760:	461e      	mov	r6, r3
 8005762:	462c      	mov	r4, r5
 8005764:	4574      	cmp	r4, lr
 8005766:	d30e      	bcc.n	8005786 <__mdiff+0xf2>
 8005768:	f10e 0103 	add.w	r1, lr, #3
 800576c:	1b49      	subs	r1, r1, r5
 800576e:	f021 0103 	bic.w	r1, r1, #3
 8005772:	3d03      	subs	r5, #3
 8005774:	45ae      	cmp	lr, r5
 8005776:	bf38      	it	cc
 8005778:	2100      	movcc	r1, #0
 800577a:	4419      	add	r1, r3
 800577c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005780:	b18b      	cbz	r3, 80057a6 <__mdiff+0x112>
 8005782:	6117      	str	r7, [r2, #16]
 8005784:	e7a0      	b.n	80056c8 <__mdiff+0x34>
 8005786:	f854 8b04 	ldr.w	r8, [r4], #4
 800578a:	fa1f f188 	uxth.w	r1, r8
 800578e:	4461      	add	r1, ip
 8005790:	1408      	asrs	r0, r1, #16
 8005792:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005796:	b289      	uxth	r1, r1
 8005798:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800579c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057a0:	f846 1b04 	str.w	r1, [r6], #4
 80057a4:	e7de      	b.n	8005764 <__mdiff+0xd0>
 80057a6:	3f01      	subs	r7, #1
 80057a8:	e7e8      	b.n	800577c <__mdiff+0xe8>
 80057aa:	bf00      	nop
 80057ac:	080071c9 	.word	0x080071c9
 80057b0:	080071da 	.word	0x080071da

080057b4 <__d2b>:
 80057b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80057b8:	2101      	movs	r1, #1
 80057ba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80057be:	4690      	mov	r8, r2
 80057c0:	461d      	mov	r5, r3
 80057c2:	f7ff fcd1 	bl	8005168 <_Balloc>
 80057c6:	4604      	mov	r4, r0
 80057c8:	b930      	cbnz	r0, 80057d8 <__d2b+0x24>
 80057ca:	4602      	mov	r2, r0
 80057cc:	f240 310a 	movw	r1, #778	; 0x30a
 80057d0:	4b24      	ldr	r3, [pc, #144]	; (8005864 <__d2b+0xb0>)
 80057d2:	4825      	ldr	r0, [pc, #148]	; (8005868 <__d2b+0xb4>)
 80057d4:	f000 ff12 	bl	80065fc <__assert_func>
 80057d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80057dc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80057e0:	bb2d      	cbnz	r5, 800582e <__d2b+0x7a>
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	f1b8 0300 	subs.w	r3, r8, #0
 80057e8:	d026      	beq.n	8005838 <__d2b+0x84>
 80057ea:	4668      	mov	r0, sp
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	f7ff fd87 	bl	8005300 <__lo0bits>
 80057f2:	9900      	ldr	r1, [sp, #0]
 80057f4:	b1f0      	cbz	r0, 8005834 <__d2b+0x80>
 80057f6:	9a01      	ldr	r2, [sp, #4]
 80057f8:	f1c0 0320 	rsb	r3, r0, #32
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	430b      	orrs	r3, r1
 8005802:	40c2      	lsrs	r2, r0
 8005804:	6163      	str	r3, [r4, #20]
 8005806:	9201      	str	r2, [sp, #4]
 8005808:	9b01      	ldr	r3, [sp, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	bf14      	ite	ne
 800580e:	2102      	movne	r1, #2
 8005810:	2101      	moveq	r1, #1
 8005812:	61a3      	str	r3, [r4, #24]
 8005814:	6121      	str	r1, [r4, #16]
 8005816:	b1c5      	cbz	r5, 800584a <__d2b+0x96>
 8005818:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800581c:	4405      	add	r5, r0
 800581e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005822:	603d      	str	r5, [r7, #0]
 8005824:	6030      	str	r0, [r6, #0]
 8005826:	4620      	mov	r0, r4
 8005828:	b002      	add	sp, #8
 800582a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005832:	e7d6      	b.n	80057e2 <__d2b+0x2e>
 8005834:	6161      	str	r1, [r4, #20]
 8005836:	e7e7      	b.n	8005808 <__d2b+0x54>
 8005838:	a801      	add	r0, sp, #4
 800583a:	f7ff fd61 	bl	8005300 <__lo0bits>
 800583e:	2101      	movs	r1, #1
 8005840:	9b01      	ldr	r3, [sp, #4]
 8005842:	6121      	str	r1, [r4, #16]
 8005844:	6163      	str	r3, [r4, #20]
 8005846:	3020      	adds	r0, #32
 8005848:	e7e5      	b.n	8005816 <__d2b+0x62>
 800584a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800584e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005852:	6038      	str	r0, [r7, #0]
 8005854:	6918      	ldr	r0, [r3, #16]
 8005856:	f7ff fd33 	bl	80052c0 <__hi0bits>
 800585a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800585e:	6031      	str	r1, [r6, #0]
 8005860:	e7e1      	b.n	8005826 <__d2b+0x72>
 8005862:	bf00      	nop
 8005864:	080071c9 	.word	0x080071c9
 8005868:	080071da 	.word	0x080071da

0800586c <_calloc_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	fb02 f501 	mul.w	r5, r2, r1
 8005872:	4629      	mov	r1, r5
 8005874:	f000 f854 	bl	8005920 <_malloc_r>
 8005878:	4604      	mov	r4, r0
 800587a:	b118      	cbz	r0, 8005884 <_calloc_r+0x18>
 800587c:	462a      	mov	r2, r5
 800587e:	2100      	movs	r1, #0
 8005880:	f7fe f8a0 	bl	80039c4 <memset>
 8005884:	4620      	mov	r0, r4
 8005886:	bd38      	pop	{r3, r4, r5, pc}

08005888 <_free_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	d043      	beq.n	8005918 <_free_r+0x90>
 8005890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005894:	1f0c      	subs	r4, r1, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfb8      	it	lt
 800589a:	18e4      	addlt	r4, r4, r3
 800589c:	f001 f8c4 	bl	8006a28 <__malloc_lock>
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <_free_r+0x94>)
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	4610      	mov	r0, r2
 80058a6:	b933      	cbnz	r3, 80058b6 <_free_r+0x2e>
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	6014      	str	r4, [r2, #0]
 80058ac:	4628      	mov	r0, r5
 80058ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b2:	f001 b8bf 	b.w	8006a34 <__malloc_unlock>
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	d90a      	bls.n	80058d0 <_free_r+0x48>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	1862      	adds	r2, r4, r1
 80058be:	4293      	cmp	r3, r2
 80058c0:	bf01      	itttt	eq
 80058c2:	681a      	ldreq	r2, [r3, #0]
 80058c4:	685b      	ldreq	r3, [r3, #4]
 80058c6:	1852      	addeq	r2, r2, r1
 80058c8:	6022      	streq	r2, [r4, #0]
 80058ca:	6063      	str	r3, [r4, #4]
 80058cc:	6004      	str	r4, [r0, #0]
 80058ce:	e7ed      	b.n	80058ac <_free_r+0x24>
 80058d0:	461a      	mov	r2, r3
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b10b      	cbz	r3, 80058da <_free_r+0x52>
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	d9fa      	bls.n	80058d0 <_free_r+0x48>
 80058da:	6811      	ldr	r1, [r2, #0]
 80058dc:	1850      	adds	r0, r2, r1
 80058de:	42a0      	cmp	r0, r4
 80058e0:	d10b      	bne.n	80058fa <_free_r+0x72>
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	4401      	add	r1, r0
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	4283      	cmp	r3, r0
 80058ea:	6011      	str	r1, [r2, #0]
 80058ec:	d1de      	bne.n	80058ac <_free_r+0x24>
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4401      	add	r1, r0
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	6053      	str	r3, [r2, #4]
 80058f8:	e7d8      	b.n	80058ac <_free_r+0x24>
 80058fa:	d902      	bls.n	8005902 <_free_r+0x7a>
 80058fc:	230c      	movs	r3, #12
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	e7d4      	b.n	80058ac <_free_r+0x24>
 8005902:	6820      	ldr	r0, [r4, #0]
 8005904:	1821      	adds	r1, r4, r0
 8005906:	428b      	cmp	r3, r1
 8005908:	bf01      	itttt	eq
 800590a:	6819      	ldreq	r1, [r3, #0]
 800590c:	685b      	ldreq	r3, [r3, #4]
 800590e:	1809      	addeq	r1, r1, r0
 8005910:	6021      	streq	r1, [r4, #0]
 8005912:	6063      	str	r3, [r4, #4]
 8005914:	6054      	str	r4, [r2, #4]
 8005916:	e7c9      	b.n	80058ac <_free_r+0x24>
 8005918:	bd38      	pop	{r3, r4, r5, pc}
 800591a:	bf00      	nop
 800591c:	20000204 	.word	0x20000204

08005920 <_malloc_r>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	1ccd      	adds	r5, r1, #3
 8005924:	f025 0503 	bic.w	r5, r5, #3
 8005928:	3508      	adds	r5, #8
 800592a:	2d0c      	cmp	r5, #12
 800592c:	bf38      	it	cc
 800592e:	250c      	movcc	r5, #12
 8005930:	2d00      	cmp	r5, #0
 8005932:	4606      	mov	r6, r0
 8005934:	db01      	blt.n	800593a <_malloc_r+0x1a>
 8005936:	42a9      	cmp	r1, r5
 8005938:	d903      	bls.n	8005942 <_malloc_r+0x22>
 800593a:	230c      	movs	r3, #12
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	2000      	movs	r0, #0
 8005940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005942:	f001 f871 	bl	8006a28 <__malloc_lock>
 8005946:	4921      	ldr	r1, [pc, #132]	; (80059cc <_malloc_r+0xac>)
 8005948:	680a      	ldr	r2, [r1, #0]
 800594a:	4614      	mov	r4, r2
 800594c:	b99c      	cbnz	r4, 8005976 <_malloc_r+0x56>
 800594e:	4f20      	ldr	r7, [pc, #128]	; (80059d0 <_malloc_r+0xb0>)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	b923      	cbnz	r3, 800595e <_malloc_r+0x3e>
 8005954:	4621      	mov	r1, r4
 8005956:	4630      	mov	r0, r6
 8005958:	f000 fcc8 	bl	80062ec <_sbrk_r>
 800595c:	6038      	str	r0, [r7, #0]
 800595e:	4629      	mov	r1, r5
 8005960:	4630      	mov	r0, r6
 8005962:	f000 fcc3 	bl	80062ec <_sbrk_r>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d123      	bne.n	80059b2 <_malloc_r+0x92>
 800596a:	230c      	movs	r3, #12
 800596c:	4630      	mov	r0, r6
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	f001 f860 	bl	8006a34 <__malloc_unlock>
 8005974:	e7e3      	b.n	800593e <_malloc_r+0x1e>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	1b5b      	subs	r3, r3, r5
 800597a:	d417      	bmi.n	80059ac <_malloc_r+0x8c>
 800597c:	2b0b      	cmp	r3, #11
 800597e:	d903      	bls.n	8005988 <_malloc_r+0x68>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	441c      	add	r4, r3
 8005984:	6025      	str	r5, [r4, #0]
 8005986:	e004      	b.n	8005992 <_malloc_r+0x72>
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	42a2      	cmp	r2, r4
 800598c:	bf0c      	ite	eq
 800598e:	600b      	streq	r3, [r1, #0]
 8005990:	6053      	strne	r3, [r2, #4]
 8005992:	4630      	mov	r0, r6
 8005994:	f001 f84e 	bl	8006a34 <__malloc_unlock>
 8005998:	f104 000b 	add.w	r0, r4, #11
 800599c:	1d23      	adds	r3, r4, #4
 800599e:	f020 0007 	bic.w	r0, r0, #7
 80059a2:	1ac2      	subs	r2, r0, r3
 80059a4:	d0cc      	beq.n	8005940 <_malloc_r+0x20>
 80059a6:	1a1b      	subs	r3, r3, r0
 80059a8:	50a3      	str	r3, [r4, r2]
 80059aa:	e7c9      	b.n	8005940 <_malloc_r+0x20>
 80059ac:	4622      	mov	r2, r4
 80059ae:	6864      	ldr	r4, [r4, #4]
 80059b0:	e7cc      	b.n	800594c <_malloc_r+0x2c>
 80059b2:	1cc4      	adds	r4, r0, #3
 80059b4:	f024 0403 	bic.w	r4, r4, #3
 80059b8:	42a0      	cmp	r0, r4
 80059ba:	d0e3      	beq.n	8005984 <_malloc_r+0x64>
 80059bc:	1a21      	subs	r1, r4, r0
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 fc94 	bl	80062ec <_sbrk_r>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d1dd      	bne.n	8005984 <_malloc_r+0x64>
 80059c8:	e7cf      	b.n	800596a <_malloc_r+0x4a>
 80059ca:	bf00      	nop
 80059cc:	20000204 	.word	0x20000204
 80059d0:	20000208 	.word	0x20000208

080059d4 <__ssputs_r>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	688e      	ldr	r6, [r1, #8]
 80059da:	4682      	mov	sl, r0
 80059dc:	429e      	cmp	r6, r3
 80059de:	460c      	mov	r4, r1
 80059e0:	4690      	mov	r8, r2
 80059e2:	461f      	mov	r7, r3
 80059e4:	d838      	bhi.n	8005a58 <__ssputs_r+0x84>
 80059e6:	898a      	ldrh	r2, [r1, #12]
 80059e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059ec:	d032      	beq.n	8005a54 <__ssputs_r+0x80>
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	6909      	ldr	r1, [r1, #16]
 80059f2:	3301      	adds	r3, #1
 80059f4:	eba5 0901 	sub.w	r9, r5, r1
 80059f8:	6965      	ldr	r5, [r4, #20]
 80059fa:	444b      	add	r3, r9
 80059fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a04:	106d      	asrs	r5, r5, #1
 8005a06:	429d      	cmp	r5, r3
 8005a08:	bf38      	it	cc
 8005a0a:	461d      	movcc	r5, r3
 8005a0c:	0553      	lsls	r3, r2, #21
 8005a0e:	d531      	bpl.n	8005a74 <__ssputs_r+0xa0>
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7ff ff85 	bl	8005920 <_malloc_r>
 8005a16:	4606      	mov	r6, r0
 8005a18:	b950      	cbnz	r0, 8005a30 <__ssputs_r+0x5c>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	f8ca 3000 	str.w	r3, [sl]
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a30:	464a      	mov	r2, r9
 8005a32:	6921      	ldr	r1, [r4, #16]
 8005a34:	f7ff fb8a 	bl	800514c <memcpy>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	6126      	str	r6, [r4, #16]
 8005a46:	444e      	add	r6, r9
 8005a48:	6026      	str	r6, [r4, #0]
 8005a4a:	463e      	mov	r6, r7
 8005a4c:	6165      	str	r5, [r4, #20]
 8005a4e:	eba5 0509 	sub.w	r5, r5, r9
 8005a52:	60a5      	str	r5, [r4, #8]
 8005a54:	42be      	cmp	r6, r7
 8005a56:	d900      	bls.n	8005a5a <__ssputs_r+0x86>
 8005a58:	463e      	mov	r6, r7
 8005a5a:	4632      	mov	r2, r6
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	6820      	ldr	r0, [r4, #0]
 8005a60:	f000 ffc8 	bl	80069f4 <memmove>
 8005a64:	68a3      	ldr	r3, [r4, #8]
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	1b9b      	subs	r3, r3, r6
 8005a6a:	4432      	add	r2, r6
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	6022      	str	r2, [r4, #0]
 8005a72:	e7db      	b.n	8005a2c <__ssputs_r+0x58>
 8005a74:	462a      	mov	r2, r5
 8005a76:	f000 ffe3 	bl	8006a40 <_realloc_r>
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d1e1      	bne.n	8005a44 <__ssputs_r+0x70>
 8005a80:	4650      	mov	r0, sl
 8005a82:	6921      	ldr	r1, [r4, #16]
 8005a84:	f7ff ff00 	bl	8005888 <_free_r>
 8005a88:	e7c7      	b.n	8005a1a <__ssputs_r+0x46>
	...

08005a8c <_svfiprintf_r>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	4698      	mov	r8, r3
 8005a92:	898b      	ldrh	r3, [r1, #12]
 8005a94:	4607      	mov	r7, r0
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	460d      	mov	r5, r1
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	b09d      	sub	sp, #116	; 0x74
 8005a9e:	d50e      	bpl.n	8005abe <_svfiprintf_r+0x32>
 8005aa0:	690b      	ldr	r3, [r1, #16]
 8005aa2:	b963      	cbnz	r3, 8005abe <_svfiprintf_r+0x32>
 8005aa4:	2140      	movs	r1, #64	; 0x40
 8005aa6:	f7ff ff3b 	bl	8005920 <_malloc_r>
 8005aaa:	6028      	str	r0, [r5, #0]
 8005aac:	6128      	str	r0, [r5, #16]
 8005aae:	b920      	cbnz	r0, 8005aba <_svfiprintf_r+0x2e>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	e0d1      	b.n	8005c5e <_svfiprintf_r+0x1d2>
 8005aba:	2340      	movs	r3, #64	; 0x40
 8005abc:	616b      	str	r3, [r5, #20]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ac8:	2330      	movs	r3, #48	; 0x30
 8005aca:	f04f 0901 	mov.w	r9, #1
 8005ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ad2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c78 <_svfiprintf_r+0x1ec>
 8005ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ada:	4623      	mov	r3, r4
 8005adc:	469a      	mov	sl, r3
 8005ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae2:	b10a      	cbz	r2, 8005ae8 <_svfiprintf_r+0x5c>
 8005ae4:	2a25      	cmp	r2, #37	; 0x25
 8005ae6:	d1f9      	bne.n	8005adc <_svfiprintf_r+0x50>
 8005ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8005aec:	d00b      	beq.n	8005b06 <_svfiprintf_r+0x7a>
 8005aee:	465b      	mov	r3, fp
 8005af0:	4622      	mov	r2, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	4638      	mov	r0, r7
 8005af6:	f7ff ff6d 	bl	80059d4 <__ssputs_r>
 8005afa:	3001      	adds	r0, #1
 8005afc:	f000 80aa 	beq.w	8005c54 <_svfiprintf_r+0x1c8>
 8005b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b02:	445a      	add	r2, fp
 8005b04:	9209      	str	r2, [sp, #36]	; 0x24
 8005b06:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80a2 	beq.w	8005c54 <_svfiprintf_r+0x1c8>
 8005b10:	2300      	movs	r3, #0
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295
 8005b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b1a:	f10a 0a01 	add.w	sl, sl, #1
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	9307      	str	r3, [sp, #28]
 8005b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b26:	931a      	str	r3, [sp, #104]	; 0x68
 8005b28:	4654      	mov	r4, sl
 8005b2a:	2205      	movs	r2, #5
 8005b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b30:	4851      	ldr	r0, [pc, #324]	; (8005c78 <_svfiprintf_r+0x1ec>)
 8005b32:	f7ff fafd 	bl	8005130 <memchr>
 8005b36:	9a04      	ldr	r2, [sp, #16]
 8005b38:	b9d8      	cbnz	r0, 8005b72 <_svfiprintf_r+0xe6>
 8005b3a:	06d0      	lsls	r0, r2, #27
 8005b3c:	bf44      	itt	mi
 8005b3e:	2320      	movmi	r3, #32
 8005b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b44:	0711      	lsls	r1, r2, #28
 8005b46:	bf44      	itt	mi
 8005b48:	232b      	movmi	r3, #43	; 0x2b
 8005b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b52:	2b2a      	cmp	r3, #42	; 0x2a
 8005b54:	d015      	beq.n	8005b82 <_svfiprintf_r+0xf6>
 8005b56:	4654      	mov	r4, sl
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f04f 0c0a 	mov.w	ip, #10
 8005b5e:	9a07      	ldr	r2, [sp, #28]
 8005b60:	4621      	mov	r1, r4
 8005b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b66:	3b30      	subs	r3, #48	; 0x30
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	d94e      	bls.n	8005c0a <_svfiprintf_r+0x17e>
 8005b6c:	b1b0      	cbz	r0, 8005b9c <_svfiprintf_r+0x110>
 8005b6e:	9207      	str	r2, [sp, #28]
 8005b70:	e014      	b.n	8005b9c <_svfiprintf_r+0x110>
 8005b72:	eba0 0308 	sub.w	r3, r0, r8
 8005b76:	fa09 f303 	lsl.w	r3, r9, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	46a2      	mov	sl, r4
 8005b7e:	9304      	str	r3, [sp, #16]
 8005b80:	e7d2      	b.n	8005b28 <_svfiprintf_r+0x9c>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	1d19      	adds	r1, r3, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	9103      	str	r1, [sp, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bfbb      	ittet	lt
 8005b8e:	425b      	neglt	r3, r3
 8005b90:	f042 0202 	orrlt.w	r2, r2, #2
 8005b94:	9307      	strge	r3, [sp, #28]
 8005b96:	9307      	strlt	r3, [sp, #28]
 8005b98:	bfb8      	it	lt
 8005b9a:	9204      	strlt	r2, [sp, #16]
 8005b9c:	7823      	ldrb	r3, [r4, #0]
 8005b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba0:	d10c      	bne.n	8005bbc <_svfiprintf_r+0x130>
 8005ba2:	7863      	ldrb	r3, [r4, #1]
 8005ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba6:	d135      	bne.n	8005c14 <_svfiprintf_r+0x188>
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	3402      	adds	r4, #2
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	9203      	str	r2, [sp, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bfb8      	it	lt
 8005bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bba:	9305      	str	r3, [sp, #20]
 8005bbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c88 <_svfiprintf_r+0x1fc>
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	7821      	ldrb	r1, [r4, #0]
 8005bc6:	f7ff fab3 	bl	8005130 <memchr>
 8005bca:	b140      	cbz	r0, 8005bde <_svfiprintf_r+0x152>
 8005bcc:	2340      	movs	r3, #64	; 0x40
 8005bce:	eba0 000a 	sub.w	r0, r0, sl
 8005bd2:	fa03 f000 	lsl.w	r0, r3, r0
 8005bd6:	9b04      	ldr	r3, [sp, #16]
 8005bd8:	3401      	adds	r4, #1
 8005bda:	4303      	orrs	r3, r0
 8005bdc:	9304      	str	r3, [sp, #16]
 8005bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be2:	2206      	movs	r2, #6
 8005be4:	4825      	ldr	r0, [pc, #148]	; (8005c7c <_svfiprintf_r+0x1f0>)
 8005be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bea:	f7ff faa1 	bl	8005130 <memchr>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d038      	beq.n	8005c64 <_svfiprintf_r+0x1d8>
 8005bf2:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <_svfiprintf_r+0x1f4>)
 8005bf4:	bb1b      	cbnz	r3, 8005c3e <_svfiprintf_r+0x1b2>
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	3307      	adds	r3, #7
 8005bfa:	f023 0307 	bic.w	r3, r3, #7
 8005bfe:	3308      	adds	r3, #8
 8005c00:	9303      	str	r3, [sp, #12]
 8005c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c04:	4433      	add	r3, r6
 8005c06:	9309      	str	r3, [sp, #36]	; 0x24
 8005c08:	e767      	b.n	8005ada <_svfiprintf_r+0x4e>
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c12:	e7a5      	b.n	8005b60 <_svfiprintf_r+0xd4>
 8005c14:	2300      	movs	r3, #0
 8005c16:	f04f 0c0a 	mov.w	ip, #10
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	3401      	adds	r4, #1
 8005c1e:	9305      	str	r3, [sp, #20]
 8005c20:	4620      	mov	r0, r4
 8005c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c26:	3a30      	subs	r2, #48	; 0x30
 8005c28:	2a09      	cmp	r2, #9
 8005c2a:	d903      	bls.n	8005c34 <_svfiprintf_r+0x1a8>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0c5      	beq.n	8005bbc <_svfiprintf_r+0x130>
 8005c30:	9105      	str	r1, [sp, #20]
 8005c32:	e7c3      	b.n	8005bbc <_svfiprintf_r+0x130>
 8005c34:	4604      	mov	r4, r0
 8005c36:	2301      	movs	r3, #1
 8005c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c3c:	e7f0      	b.n	8005c20 <_svfiprintf_r+0x194>
 8005c3e:	ab03      	add	r3, sp, #12
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	462a      	mov	r2, r5
 8005c44:	4638      	mov	r0, r7
 8005c46:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <_svfiprintf_r+0x1f8>)
 8005c48:	a904      	add	r1, sp, #16
 8005c4a:	f7fd ff61 	bl	8003b10 <_printf_float>
 8005c4e:	1c42      	adds	r2, r0, #1
 8005c50:	4606      	mov	r6, r0
 8005c52:	d1d6      	bne.n	8005c02 <_svfiprintf_r+0x176>
 8005c54:	89ab      	ldrh	r3, [r5, #12]
 8005c56:	065b      	lsls	r3, r3, #25
 8005c58:	f53f af2c 	bmi.w	8005ab4 <_svfiprintf_r+0x28>
 8005c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c5e:	b01d      	add	sp, #116	; 0x74
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	ab03      	add	r3, sp, #12
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	462a      	mov	r2, r5
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <_svfiprintf_r+0x1f8>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	f7fe f9ea 	bl	8004048 <_printf_i>
 8005c74:	e7eb      	b.n	8005c4e <_svfiprintf_r+0x1c2>
 8005c76:	bf00      	nop
 8005c78:	0800733c 	.word	0x0800733c
 8005c7c:	08007346 	.word	0x08007346
 8005c80:	08003b11 	.word	0x08003b11
 8005c84:	080059d5 	.word	0x080059d5
 8005c88:	08007342 	.word	0x08007342

08005c8c <_sungetc_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	1c4b      	adds	r3, r1, #1
 8005c90:	4614      	mov	r4, r2
 8005c92:	d103      	bne.n	8005c9c <_sungetc_r+0x10>
 8005c94:	f04f 35ff 	mov.w	r5, #4294967295
 8005c98:	4628      	mov	r0, r5
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	8993      	ldrh	r3, [r2, #12]
 8005c9e:	b2cd      	uxtb	r5, r1
 8005ca0:	f023 0320 	bic.w	r3, r3, #32
 8005ca4:	8193      	strh	r3, [r2, #12]
 8005ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ca8:	6852      	ldr	r2, [r2, #4]
 8005caa:	b18b      	cbz	r3, 8005cd0 <_sungetc_r+0x44>
 8005cac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	dd08      	ble.n	8005cc4 <_sungetc_r+0x38>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	6022      	str	r2, [r4, #0]
 8005cb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	6063      	str	r3, [r4, #4]
 8005cc2:	e7e9      	b.n	8005c98 <_sungetc_r+0xc>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	f000 fc61 	bl	800658c <__submore>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d0f1      	beq.n	8005cb2 <_sungetc_r+0x26>
 8005cce:	e7e1      	b.n	8005c94 <_sungetc_r+0x8>
 8005cd0:	6921      	ldr	r1, [r4, #16]
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	b151      	cbz	r1, 8005cec <_sungetc_r+0x60>
 8005cd6:	4299      	cmp	r1, r3
 8005cd8:	d208      	bcs.n	8005cec <_sungetc_r+0x60>
 8005cda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005cde:	42a9      	cmp	r1, r5
 8005ce0:	d104      	bne.n	8005cec <_sungetc_r+0x60>
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	6062      	str	r2, [r4, #4]
 8005cea:	e7d5      	b.n	8005c98 <_sungetc_r+0xc>
 8005cec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	63a3      	str	r3, [r4, #56]	; 0x38
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	e7dc      	b.n	8005cc0 <_sungetc_r+0x34>

08005d06 <__ssrefill_r>:
 8005d06:	b510      	push	{r4, lr}
 8005d08:	460c      	mov	r4, r1
 8005d0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005d0c:	b169      	cbz	r1, 8005d2a <__ssrefill_r+0x24>
 8005d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d12:	4299      	cmp	r1, r3
 8005d14:	d001      	beq.n	8005d1a <__ssrefill_r+0x14>
 8005d16:	f7ff fdb7 	bl	8005888 <_free_r>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d1e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	b113      	cbz	r3, 8005d2a <__ssrefill_r+0x24>
 8005d24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f043 0320 	orr.w	r3, r3, #32
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	e7f3      	b.n	8005d28 <__ssrefill_r+0x22>

08005d40 <__ssvfiscanf_r>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	460c      	mov	r4, r1
 8005d46:	2100      	movs	r1, #0
 8005d48:	4606      	mov	r6, r0
 8005d4a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005d4e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005d52:	49b3      	ldr	r1, [pc, #716]	; (8006020 <__ssvfiscanf_r+0x2e0>)
 8005d54:	f10d 0804 	add.w	r8, sp, #4
 8005d58:	91a0      	str	r1, [sp, #640]	; 0x280
 8005d5a:	49b2      	ldr	r1, [pc, #712]	; (8006024 <__ssvfiscanf_r+0x2e4>)
 8005d5c:	4fb2      	ldr	r7, [pc, #712]	; (8006028 <__ssvfiscanf_r+0x2e8>)
 8005d5e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800602c <__ssvfiscanf_r+0x2ec>
 8005d62:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005d66:	91a1      	str	r1, [sp, #644]	; 0x284
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	f892 a000 	ldrb.w	sl, [r2]
 8005d6e:	f1ba 0f00 	cmp.w	sl, #0
 8005d72:	f000 8153 	beq.w	800601c <__ssvfiscanf_r+0x2dc>
 8005d76:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005d7a:	1c55      	adds	r5, r2, #1
 8005d7c:	f013 0308 	ands.w	r3, r3, #8
 8005d80:	d019      	beq.n	8005db6 <__ssvfiscanf_r+0x76>
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dd0f      	ble.n	8005da8 <__ssvfiscanf_r+0x68>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	5cba      	ldrb	r2, [r7, r2]
 8005d8e:	0712      	lsls	r2, r2, #28
 8005d90:	d401      	bmi.n	8005d96 <__ssvfiscanf_r+0x56>
 8005d92:	462a      	mov	r2, r5
 8005d94:	e7e9      	b.n	8005d6a <__ssvfiscanf_r+0x2a>
 8005d96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d98:	3301      	adds	r3, #1
 8005d9a:	3201      	adds	r2, #1
 8005d9c:	9245      	str	r2, [sp, #276]	; 0x114
 8005d9e:	6862      	ldr	r2, [r4, #4]
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	3a01      	subs	r2, #1
 8005da4:	6062      	str	r2, [r4, #4]
 8005da6:	e7ec      	b.n	8005d82 <__ssvfiscanf_r+0x42>
 8005da8:	4621      	mov	r1, r4
 8005daa:	4630      	mov	r0, r6
 8005dac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005dae:	4798      	blx	r3
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d0e9      	beq.n	8005d88 <__ssvfiscanf_r+0x48>
 8005db4:	e7ed      	b.n	8005d92 <__ssvfiscanf_r+0x52>
 8005db6:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8005dba:	f040 8086 	bne.w	8005eca <__ssvfiscanf_r+0x18a>
 8005dbe:	9341      	str	r3, [sp, #260]	; 0x104
 8005dc0:	9343      	str	r3, [sp, #268]	; 0x10c
 8005dc2:	7853      	ldrb	r3, [r2, #1]
 8005dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc6:	bf04      	itt	eq
 8005dc8:	2310      	moveq	r3, #16
 8005dca:	1c95      	addeq	r5, r2, #2
 8005dcc:	f04f 020a 	mov.w	r2, #10
 8005dd0:	bf08      	it	eq
 8005dd2:	9341      	streq	r3, [sp, #260]	; 0x104
 8005dd4:	46ab      	mov	fp, r5
 8005dd6:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8005dda:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005dde:	2b09      	cmp	r3, #9
 8005de0:	d91d      	bls.n	8005e1e <__ssvfiscanf_r+0xde>
 8005de2:	2203      	movs	r2, #3
 8005de4:	4891      	ldr	r0, [pc, #580]	; (800602c <__ssvfiscanf_r+0x2ec>)
 8005de6:	f7ff f9a3 	bl	8005130 <memchr>
 8005dea:	b140      	cbz	r0, 8005dfe <__ssvfiscanf_r+0xbe>
 8005dec:	2301      	movs	r3, #1
 8005dee:	465d      	mov	r5, fp
 8005df0:	eba0 0009 	sub.w	r0, r0, r9
 8005df4:	fa03 f000 	lsl.w	r0, r3, r0
 8005df8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005dfa:	4318      	orrs	r0, r3
 8005dfc:	9041      	str	r0, [sp, #260]	; 0x104
 8005dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e02:	2b78      	cmp	r3, #120	; 0x78
 8005e04:	d806      	bhi.n	8005e14 <__ssvfiscanf_r+0xd4>
 8005e06:	2b57      	cmp	r3, #87	; 0x57
 8005e08:	d810      	bhi.n	8005e2c <__ssvfiscanf_r+0xec>
 8005e0a:	2b25      	cmp	r3, #37	; 0x25
 8005e0c:	d05d      	beq.n	8005eca <__ssvfiscanf_r+0x18a>
 8005e0e:	d857      	bhi.n	8005ec0 <__ssvfiscanf_r+0x180>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d075      	beq.n	8005f00 <__ssvfiscanf_r+0x1c0>
 8005e14:	2303      	movs	r3, #3
 8005e16:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e18:	230a      	movs	r3, #10
 8005e1a:	9342      	str	r3, [sp, #264]	; 0x108
 8005e1c:	e082      	b.n	8005f24 <__ssvfiscanf_r+0x1e4>
 8005e1e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e20:	465d      	mov	r5, fp
 8005e22:	fb02 1303 	mla	r3, r2, r3, r1
 8005e26:	3b30      	subs	r3, #48	; 0x30
 8005e28:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e2a:	e7d3      	b.n	8005dd4 <__ssvfiscanf_r+0x94>
 8005e2c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005e30:	2a20      	cmp	r2, #32
 8005e32:	d8ef      	bhi.n	8005e14 <__ssvfiscanf_r+0xd4>
 8005e34:	a101      	add	r1, pc, #4	; (adr r1, 8005e3c <__ssvfiscanf_r+0xfc>)
 8005e36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005f0f 	.word	0x08005f0f
 8005e40:	08005e15 	.word	0x08005e15
 8005e44:	08005e15 	.word	0x08005e15
 8005e48:	08005f6d 	.word	0x08005f6d
 8005e4c:	08005e15 	.word	0x08005e15
 8005e50:	08005e15 	.word	0x08005e15
 8005e54:	08005e15 	.word	0x08005e15
 8005e58:	08005e15 	.word	0x08005e15
 8005e5c:	08005e15 	.word	0x08005e15
 8005e60:	08005e15 	.word	0x08005e15
 8005e64:	08005e15 	.word	0x08005e15
 8005e68:	08005f83 	.word	0x08005f83
 8005e6c:	08005f59 	.word	0x08005f59
 8005e70:	08005ec7 	.word	0x08005ec7
 8005e74:	08005ec7 	.word	0x08005ec7
 8005e78:	08005ec7 	.word	0x08005ec7
 8005e7c:	08005e15 	.word	0x08005e15
 8005e80:	08005f5d 	.word	0x08005f5d
 8005e84:	08005e15 	.word	0x08005e15
 8005e88:	08005e15 	.word	0x08005e15
 8005e8c:	08005e15 	.word	0x08005e15
 8005e90:	08005e15 	.word	0x08005e15
 8005e94:	08005f93 	.word	0x08005f93
 8005e98:	08005f65 	.word	0x08005f65
 8005e9c:	08005f07 	.word	0x08005f07
 8005ea0:	08005e15 	.word	0x08005e15
 8005ea4:	08005e15 	.word	0x08005e15
 8005ea8:	08005f8f 	.word	0x08005f8f
 8005eac:	08005e15 	.word	0x08005e15
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005e15 	.word	0x08005e15
 8005eb8:	08005e15 	.word	0x08005e15
 8005ebc:	08005f0f 	.word	0x08005f0f
 8005ec0:	3b45      	subs	r3, #69	; 0x45
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d8a6      	bhi.n	8005e14 <__ssvfiscanf_r+0xd4>
 8005ec6:	2305      	movs	r3, #5
 8005ec8:	e02b      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dd0d      	ble.n	8005eec <__ssvfiscanf_r+0x1ac>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	4552      	cmp	r2, sl
 8005ed6:	f040 80a1 	bne.w	800601c <__ssvfiscanf_r+0x2dc>
 8005eda:	3301      	adds	r3, #1
 8005edc:	6862      	ldr	r2, [r4, #4]
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005ee2:	3a01      	subs	r2, #1
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	6062      	str	r2, [r4, #4]
 8005ee8:	9345      	str	r3, [sp, #276]	; 0x114
 8005eea:	e752      	b.n	8005d92 <__ssvfiscanf_r+0x52>
 8005eec:	4621      	mov	r1, r4
 8005eee:	4630      	mov	r0, r6
 8005ef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ef2:	4798      	blx	r3
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0eb      	beq.n	8005ed0 <__ssvfiscanf_r+0x190>
 8005ef8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005efa:	2800      	cmp	r0, #0
 8005efc:	f040 8084 	bne.w	8006008 <__ssvfiscanf_r+0x2c8>
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	e086      	b.n	8006014 <__ssvfiscanf_r+0x2d4>
 8005f06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f08:	f042 0220 	orr.w	r2, r2, #32
 8005f0c:	9241      	str	r2, [sp, #260]	; 0x104
 8005f0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f14:	9241      	str	r2, [sp, #260]	; 0x104
 8005f16:	2210      	movs	r2, #16
 8005f18:	2b6f      	cmp	r3, #111	; 0x6f
 8005f1a:	bf34      	ite	cc
 8005f1c:	2303      	movcc	r3, #3
 8005f1e:	2304      	movcs	r3, #4
 8005f20:	9242      	str	r2, [sp, #264]	; 0x108
 8005f22:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	dd41      	ble.n	8005fae <__ssvfiscanf_r+0x26e>
 8005f2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f2c:	0659      	lsls	r1, r3, #25
 8005f2e:	d404      	bmi.n	8005f3a <__ssvfiscanf_r+0x1fa>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	781a      	ldrb	r2, [r3, #0]
 8005f34:	5cba      	ldrb	r2, [r7, r2]
 8005f36:	0712      	lsls	r2, r2, #28
 8005f38:	d440      	bmi.n	8005fbc <__ssvfiscanf_r+0x27c>
 8005f3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	dc4f      	bgt.n	8005fe0 <__ssvfiscanf_r+0x2a0>
 8005f40:	466b      	mov	r3, sp
 8005f42:	4622      	mov	r2, r4
 8005f44:	4630      	mov	r0, r6
 8005f46:	a941      	add	r1, sp, #260	; 0x104
 8005f48:	f000 f874 	bl	8006034 <_scanf_chars>
 8005f4c:	2801      	cmp	r0, #1
 8005f4e:	d065      	beq.n	800601c <__ssvfiscanf_r+0x2dc>
 8005f50:	2802      	cmp	r0, #2
 8005f52:	f47f af1e 	bne.w	8005d92 <__ssvfiscanf_r+0x52>
 8005f56:	e7cf      	b.n	8005ef8 <__ssvfiscanf_r+0x1b8>
 8005f58:	220a      	movs	r2, #10
 8005f5a:	e7dd      	b.n	8005f18 <__ssvfiscanf_r+0x1d8>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9342      	str	r3, [sp, #264]	; 0x108
 8005f60:	2303      	movs	r3, #3
 8005f62:	e7de      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f64:	2308      	movs	r3, #8
 8005f66:	9342      	str	r3, [sp, #264]	; 0x108
 8005f68:	2304      	movs	r3, #4
 8005f6a:	e7da      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4640      	mov	r0, r8
 8005f70:	f000 f9cc 	bl	800630c <__sccl>
 8005f74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f76:	4605      	mov	r5, r0
 8005f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7c:	9341      	str	r3, [sp, #260]	; 0x104
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7cf      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f88:	9341      	str	r3, [sp, #260]	; 0x104
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e7c9      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e7c7      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f92:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005f94:	06c3      	lsls	r3, r0, #27
 8005f96:	f53f aefc 	bmi.w	8005d92 <__ssvfiscanf_r+0x52>
 8005f9a:	9b00      	ldr	r3, [sp, #0]
 8005f9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005f9e:	1d19      	adds	r1, r3, #4
 8005fa0:	9100      	str	r1, [sp, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	07c0      	lsls	r0, r0, #31
 8005fa6:	bf4c      	ite	mi
 8005fa8:	801a      	strhmi	r2, [r3, #0]
 8005faa:	601a      	strpl	r2, [r3, #0]
 8005fac:	e6f1      	b.n	8005d92 <__ssvfiscanf_r+0x52>
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fb4:	4798      	blx	r3
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d0b7      	beq.n	8005f2a <__ssvfiscanf_r+0x1ea>
 8005fba:	e79d      	b.n	8005ef8 <__ssvfiscanf_r+0x1b8>
 8005fbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005fbe:	3201      	adds	r2, #1
 8005fc0:	9245      	str	r2, [sp, #276]	; 0x114
 8005fc2:	6862      	ldr	r2, [r4, #4]
 8005fc4:	3a01      	subs	r2, #1
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	6062      	str	r2, [r4, #4]
 8005fca:	dd02      	ble.n	8005fd2 <__ssvfiscanf_r+0x292>
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	e7ae      	b.n	8005f30 <__ssvfiscanf_r+0x1f0>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fd8:	4798      	blx	r3
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d0a8      	beq.n	8005f30 <__ssvfiscanf_r+0x1f0>
 8005fde:	e78b      	b.n	8005ef8 <__ssvfiscanf_r+0x1b8>
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	dc06      	bgt.n	8005ff2 <__ssvfiscanf_r+0x2b2>
 8005fe4:	466b      	mov	r3, sp
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	4630      	mov	r0, r6
 8005fea:	a941      	add	r1, sp, #260	; 0x104
 8005fec:	f000 f87a 	bl	80060e4 <_scanf_i>
 8005ff0:	e7ac      	b.n	8005f4c <__ssvfiscanf_r+0x20c>
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <__ssvfiscanf_r+0x2f0>)
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f43f aecc 	beq.w	8005d92 <__ssvfiscanf_r+0x52>
 8005ffa:	466b      	mov	r3, sp
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	4630      	mov	r0, r6
 8006000:	a941      	add	r1, sp, #260	; 0x104
 8006002:	f3af 8000 	nop.w
 8006006:	e7a1      	b.n	8005f4c <__ssvfiscanf_r+0x20c>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800600e:	bf18      	it	ne
 8006010:	f04f 30ff 	movne.w	r0, #4294967295
 8006014:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800601e:	e7f9      	b.n	8006014 <__ssvfiscanf_r+0x2d4>
 8006020:	08005c8d 	.word	0x08005c8d
 8006024:	08005d07 	.word	0x08005d07
 8006028:	080073a5 	.word	0x080073a5
 800602c:	08007342 	.word	0x08007342
 8006030:	00000000 	.word	0x00000000

08006034 <_scanf_chars>:
 8006034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006038:	4615      	mov	r5, r2
 800603a:	688a      	ldr	r2, [r1, #8]
 800603c:	4680      	mov	r8, r0
 800603e:	460c      	mov	r4, r1
 8006040:	b932      	cbnz	r2, 8006050 <_scanf_chars+0x1c>
 8006042:	698a      	ldr	r2, [r1, #24]
 8006044:	2a00      	cmp	r2, #0
 8006046:	bf0c      	ite	eq
 8006048:	2201      	moveq	r2, #1
 800604a:	f04f 32ff 	movne.w	r2, #4294967295
 800604e:	608a      	str	r2, [r1, #8]
 8006050:	2700      	movs	r7, #0
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80060e0 <_scanf_chars+0xac>
 8006058:	06d1      	lsls	r1, r2, #27
 800605a:	bf5f      	itttt	pl
 800605c:	681a      	ldrpl	r2, [r3, #0]
 800605e:	1d11      	addpl	r1, r2, #4
 8006060:	6019      	strpl	r1, [r3, #0]
 8006062:	6816      	ldrpl	r6, [r2, #0]
 8006064:	69a0      	ldr	r0, [r4, #24]
 8006066:	b188      	cbz	r0, 800608c <_scanf_chars+0x58>
 8006068:	2801      	cmp	r0, #1
 800606a:	d107      	bne.n	800607c <_scanf_chars+0x48>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	6963      	ldr	r3, [r4, #20]
 8006072:	5c9b      	ldrb	r3, [r3, r2]
 8006074:	b953      	cbnz	r3, 800608c <_scanf_chars+0x58>
 8006076:	bb27      	cbnz	r7, 80060c2 <_scanf_chars+0x8e>
 8006078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607c:	2802      	cmp	r0, #2
 800607e:	d120      	bne.n	80060c2 <_scanf_chars+0x8e>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006088:	071b      	lsls	r3, r3, #28
 800608a:	d41a      	bmi.n	80060c2 <_scanf_chars+0x8e>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	3701      	adds	r7, #1
 8006090:	06da      	lsls	r2, r3, #27
 8006092:	bf5e      	ittt	pl
 8006094:	682b      	ldrpl	r3, [r5, #0]
 8006096:	781b      	ldrbpl	r3, [r3, #0]
 8006098:	f806 3b01 	strbpl.w	r3, [r6], #1
 800609c:	682a      	ldr	r2, [r5, #0]
 800609e:	686b      	ldr	r3, [r5, #4]
 80060a0:	3201      	adds	r2, #1
 80060a2:	602a      	str	r2, [r5, #0]
 80060a4:	68a2      	ldr	r2, [r4, #8]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	3a01      	subs	r2, #1
 80060aa:	606b      	str	r3, [r5, #4]
 80060ac:	60a2      	str	r2, [r4, #8]
 80060ae:	b142      	cbz	r2, 80060c2 <_scanf_chars+0x8e>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dcd7      	bgt.n	8006064 <_scanf_chars+0x30>
 80060b4:	4629      	mov	r1, r5
 80060b6:	4640      	mov	r0, r8
 80060b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060bc:	4798      	blx	r3
 80060be:	2800      	cmp	r0, #0
 80060c0:	d0d0      	beq.n	8006064 <_scanf_chars+0x30>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f013 0310 	ands.w	r3, r3, #16
 80060c8:	d105      	bne.n	80060d6 <_scanf_chars+0xa2>
 80060ca:	68e2      	ldr	r2, [r4, #12]
 80060cc:	3201      	adds	r2, #1
 80060ce:	60e2      	str	r2, [r4, #12]
 80060d0:	69a2      	ldr	r2, [r4, #24]
 80060d2:	b102      	cbz	r2, 80060d6 <_scanf_chars+0xa2>
 80060d4:	7033      	strb	r3, [r6, #0]
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	2000      	movs	r0, #0
 80060da:	441f      	add	r7, r3
 80060dc:	6127      	str	r7, [r4, #16]
 80060de:	e7cb      	b.n	8006078 <_scanf_chars+0x44>
 80060e0:	080073a5 	.word	0x080073a5

080060e4 <_scanf_i>:
 80060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	460c      	mov	r4, r1
 80060ea:	4698      	mov	r8, r3
 80060ec:	4b72      	ldr	r3, [pc, #456]	; (80062b8 <_scanf_i+0x1d4>)
 80060ee:	b087      	sub	sp, #28
 80060f0:	4682      	mov	sl, r0
 80060f2:	4616      	mov	r6, r2
 80060f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060f8:	ab03      	add	r3, sp, #12
 80060fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060fe:	4b6f      	ldr	r3, [pc, #444]	; (80062bc <_scanf_i+0x1d8>)
 8006100:	69a1      	ldr	r1, [r4, #24]
 8006102:	4a6f      	ldr	r2, [pc, #444]	; (80062c0 <_scanf_i+0x1dc>)
 8006104:	4627      	mov	r7, r4
 8006106:	2903      	cmp	r1, #3
 8006108:	bf18      	it	ne
 800610a:	461a      	movne	r2, r3
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	9201      	str	r2, [sp, #4]
 8006110:	1e5a      	subs	r2, r3, #1
 8006112:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006116:	bf81      	itttt	hi
 8006118:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800611c:	eb03 0905 	addhi.w	r9, r3, r5
 8006120:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006124:	60a3      	strhi	r3, [r4, #8]
 8006126:	f857 3b1c 	ldr.w	r3, [r7], #28
 800612a:	bf98      	it	ls
 800612c:	f04f 0900 	movls.w	r9, #0
 8006130:	463d      	mov	r5, r7
 8006132:	f04f 0b00 	mov.w	fp, #0
 8006136:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	6831      	ldr	r1, [r6, #0]
 800613e:	ab03      	add	r3, sp, #12
 8006140:	2202      	movs	r2, #2
 8006142:	7809      	ldrb	r1, [r1, #0]
 8006144:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006148:	f7fe fff2 	bl	8005130 <memchr>
 800614c:	b328      	cbz	r0, 800619a <_scanf_i+0xb6>
 800614e:	f1bb 0f01 	cmp.w	fp, #1
 8006152:	d159      	bne.n	8006208 <_scanf_i+0x124>
 8006154:	6862      	ldr	r2, [r4, #4]
 8006156:	b92a      	cbnz	r2, 8006164 <_scanf_i+0x80>
 8006158:	2308      	movs	r3, #8
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	6063      	str	r3, [r4, #4]
 800615e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006162:	6022      	str	r2, [r4, #0]
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800616a:	6022      	str	r2, [r4, #0]
 800616c:	68a2      	ldr	r2, [r4, #8]
 800616e:	1e51      	subs	r1, r2, #1
 8006170:	60a1      	str	r1, [r4, #8]
 8006172:	b192      	cbz	r2, 800619a <_scanf_i+0xb6>
 8006174:	6832      	ldr	r2, [r6, #0]
 8006176:	1c51      	adds	r1, r2, #1
 8006178:	6031      	str	r1, [r6, #0]
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	f805 2b01 	strb.w	r2, [r5], #1
 8006180:	6872      	ldr	r2, [r6, #4]
 8006182:	3a01      	subs	r2, #1
 8006184:	2a00      	cmp	r2, #0
 8006186:	6072      	str	r2, [r6, #4]
 8006188:	dc07      	bgt.n	800619a <_scanf_i+0xb6>
 800618a:	4631      	mov	r1, r6
 800618c:	4650      	mov	r0, sl
 800618e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006192:	4790      	blx	r2
 8006194:	2800      	cmp	r0, #0
 8006196:	f040 8085 	bne.w	80062a4 <_scanf_i+0x1c0>
 800619a:	f10b 0b01 	add.w	fp, fp, #1
 800619e:	f1bb 0f03 	cmp.w	fp, #3
 80061a2:	d1cb      	bne.n	800613c <_scanf_i+0x58>
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	b90b      	cbnz	r3, 80061ac <_scanf_i+0xc8>
 80061a8:	230a      	movs	r3, #10
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	4945      	ldr	r1, [pc, #276]	; (80062c4 <_scanf_i+0x1e0>)
 80061b0:	6960      	ldr	r0, [r4, #20]
 80061b2:	1ac9      	subs	r1, r1, r3
 80061b4:	f000 f8aa 	bl	800630c <__sccl>
 80061b8:	f04f 0b00 	mov.w	fp, #0
 80061bc:	68a3      	ldr	r3, [r4, #8]
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d03d      	beq.n	8006240 <_scanf_i+0x15c>
 80061c4:	6831      	ldr	r1, [r6, #0]
 80061c6:	6960      	ldr	r0, [r4, #20]
 80061c8:	f891 c000 	ldrb.w	ip, [r1]
 80061cc:	f810 000c 	ldrb.w	r0, [r0, ip]
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d035      	beq.n	8006240 <_scanf_i+0x15c>
 80061d4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80061d8:	d124      	bne.n	8006224 <_scanf_i+0x140>
 80061da:	0510      	lsls	r0, r2, #20
 80061dc:	d522      	bpl.n	8006224 <_scanf_i+0x140>
 80061de:	f10b 0b01 	add.w	fp, fp, #1
 80061e2:	f1b9 0f00 	cmp.w	r9, #0
 80061e6:	d003      	beq.n	80061f0 <_scanf_i+0x10c>
 80061e8:	3301      	adds	r3, #1
 80061ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80061ee:	60a3      	str	r3, [r4, #8]
 80061f0:	6873      	ldr	r3, [r6, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	6073      	str	r3, [r6, #4]
 80061f8:	dd1b      	ble.n	8006232 <_scanf_i+0x14e>
 80061fa:	6833      	ldr	r3, [r6, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	6033      	str	r3, [r6, #0]
 8006200:	68a3      	ldr	r3, [r4, #8]
 8006202:	3b01      	subs	r3, #1
 8006204:	60a3      	str	r3, [r4, #8]
 8006206:	e7d9      	b.n	80061bc <_scanf_i+0xd8>
 8006208:	f1bb 0f02 	cmp.w	fp, #2
 800620c:	d1ae      	bne.n	800616c <_scanf_i+0x88>
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006214:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006218:	d1bf      	bne.n	800619a <_scanf_i+0xb6>
 800621a:	2310      	movs	r3, #16
 800621c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006220:	6063      	str	r3, [r4, #4]
 8006222:	e7a2      	b.n	800616a <_scanf_i+0x86>
 8006224:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006228:	6022      	str	r2, [r4, #0]
 800622a:	780b      	ldrb	r3, [r1, #0]
 800622c:	f805 3b01 	strb.w	r3, [r5], #1
 8006230:	e7de      	b.n	80061f0 <_scanf_i+0x10c>
 8006232:	4631      	mov	r1, r6
 8006234:	4650      	mov	r0, sl
 8006236:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800623a:	4798      	blx	r3
 800623c:	2800      	cmp	r0, #0
 800623e:	d0df      	beq.n	8006200 <_scanf_i+0x11c>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	05d9      	lsls	r1, r3, #23
 8006244:	d50d      	bpl.n	8006262 <_scanf_i+0x17e>
 8006246:	42bd      	cmp	r5, r7
 8006248:	d909      	bls.n	800625e <_scanf_i+0x17a>
 800624a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800624e:	4632      	mov	r2, r6
 8006250:	4650      	mov	r0, sl
 8006252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006256:	f105 39ff 	add.w	r9, r5, #4294967295
 800625a:	4798      	blx	r3
 800625c:	464d      	mov	r5, r9
 800625e:	42bd      	cmp	r5, r7
 8006260:	d028      	beq.n	80062b4 <_scanf_i+0x1d0>
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	f012 0210 	ands.w	r2, r2, #16
 8006268:	d113      	bne.n	8006292 <_scanf_i+0x1ae>
 800626a:	702a      	strb	r2, [r5, #0]
 800626c:	4639      	mov	r1, r7
 800626e:	6863      	ldr	r3, [r4, #4]
 8006270:	4650      	mov	r0, sl
 8006272:	9e01      	ldr	r6, [sp, #4]
 8006274:	47b0      	blx	r6
 8006276:	f8d8 3000 	ldr.w	r3, [r8]
 800627a:	6821      	ldr	r1, [r4, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	f8c8 2000 	str.w	r2, [r8]
 8006282:	f011 0f20 	tst.w	r1, #32
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	d00f      	beq.n	80062aa <_scanf_i+0x1c6>
 800628a:	6018      	str	r0, [r3, #0]
 800628c:	68e3      	ldr	r3, [r4, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	60e3      	str	r3, [r4, #12]
 8006292:	2000      	movs	r0, #0
 8006294:	1bed      	subs	r5, r5, r7
 8006296:	44ab      	add	fp, r5
 8006298:	6925      	ldr	r5, [r4, #16]
 800629a:	445d      	add	r5, fp
 800629c:	6125      	str	r5, [r4, #16]
 800629e:	b007      	add	sp, #28
 80062a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a4:	f04f 0b00 	mov.w	fp, #0
 80062a8:	e7ca      	b.n	8006240 <_scanf_i+0x15c>
 80062aa:	07ca      	lsls	r2, r1, #31
 80062ac:	bf4c      	ite	mi
 80062ae:	8018      	strhmi	r0, [r3, #0]
 80062b0:	6018      	strpl	r0, [r3, #0]
 80062b2:	e7eb      	b.n	800628c <_scanf_i+0x1a8>
 80062b4:	2001      	movs	r0, #1
 80062b6:	e7f2      	b.n	800629e <_scanf_i+0x1ba>
 80062b8:	080070ec 	.word	0x080070ec
 80062bc:	08006589 	.word	0x08006589
 80062c0:	0800648d 	.word	0x0800648d
 80062c4:	08007366 	.word	0x08007366

080062c8 <_read_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	2200      	movs	r2, #0
 80062d2:	4d05      	ldr	r5, [pc, #20]	; (80062e8 <_read_r+0x20>)
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7fa fd99 	bl	8000e0e <_read>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_read_r+0x1e>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_read_r+0x1e>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	2000031c 	.word	0x2000031c

080062ec <_sbrk_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	2300      	movs	r3, #0
 80062f0:	4d05      	ldr	r5, [pc, #20]	; (8006308 <_sbrk_r+0x1c>)
 80062f2:	4604      	mov	r4, r0
 80062f4:	4608      	mov	r0, r1
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	f7fa fdf2 	bl	8000ee0 <_sbrk>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_sbrk_r+0x1a>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b103      	cbz	r3, 8006306 <_sbrk_r+0x1a>
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	2000031c 	.word	0x2000031c

0800630c <__sccl>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	780b      	ldrb	r3, [r1, #0]
 8006310:	4604      	mov	r4, r0
 8006312:	2b5e      	cmp	r3, #94	; 0x5e
 8006314:	bf13      	iteet	ne
 8006316:	2200      	movne	r2, #0
 8006318:	2201      	moveq	r2, #1
 800631a:	784b      	ldrbeq	r3, [r1, #1]
 800631c:	1c48      	addne	r0, r1, #1
 800631e:	bf08      	it	eq
 8006320:	1c88      	addeq	r0, r1, #2
 8006322:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006326:	1e61      	subs	r1, r4, #1
 8006328:	f801 2f01 	strb.w	r2, [r1, #1]!
 800632c:	42a9      	cmp	r1, r5
 800632e:	d1fb      	bne.n	8006328 <__sccl+0x1c>
 8006330:	b90b      	cbnz	r3, 8006336 <__sccl+0x2a>
 8006332:	3801      	subs	r0, #1
 8006334:	bd70      	pop	{r4, r5, r6, pc}
 8006336:	f082 0101 	eor.w	r1, r2, #1
 800633a:	54e1      	strb	r1, [r4, r3]
 800633c:	1c42      	adds	r2, r0, #1
 800633e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8006342:	4610      	mov	r0, r2
 8006344:	2d2d      	cmp	r5, #45	; 0x2d
 8006346:	f102 36ff 	add.w	r6, r2, #4294967295
 800634a:	d006      	beq.n	800635a <__sccl+0x4e>
 800634c:	2d5d      	cmp	r5, #93	; 0x5d
 800634e:	d0f1      	beq.n	8006334 <__sccl+0x28>
 8006350:	b90d      	cbnz	r5, 8006356 <__sccl+0x4a>
 8006352:	4630      	mov	r0, r6
 8006354:	e7ee      	b.n	8006334 <__sccl+0x28>
 8006356:	462b      	mov	r3, r5
 8006358:	e7ef      	b.n	800633a <__sccl+0x2e>
 800635a:	7816      	ldrb	r6, [r2, #0]
 800635c:	2e5d      	cmp	r6, #93	; 0x5d
 800635e:	d0fa      	beq.n	8006356 <__sccl+0x4a>
 8006360:	42b3      	cmp	r3, r6
 8006362:	dcf8      	bgt.n	8006356 <__sccl+0x4a>
 8006364:	4618      	mov	r0, r3
 8006366:	3001      	adds	r0, #1
 8006368:	4286      	cmp	r6, r0
 800636a:	5421      	strb	r1, [r4, r0]
 800636c:	dcfb      	bgt.n	8006366 <__sccl+0x5a>
 800636e:	43d8      	mvns	r0, r3
 8006370:	4430      	add	r0, r6
 8006372:	42b3      	cmp	r3, r6
 8006374:	bfa8      	it	ge
 8006376:	2000      	movge	r0, #0
 8006378:	1c5d      	adds	r5, r3, #1
 800637a:	182b      	adds	r3, r5, r0
 800637c:	3202      	adds	r2, #2
 800637e:	e7de      	b.n	800633e <__sccl+0x32>

08006380 <_strtol_l.isra.0>:
 8006380:	2b01      	cmp	r3, #1
 8006382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006386:	4686      	mov	lr, r0
 8006388:	d001      	beq.n	800638e <_strtol_l.isra.0+0xe>
 800638a:	2b24      	cmp	r3, #36	; 0x24
 800638c:	d906      	bls.n	800639c <_strtol_l.isra.0+0x1c>
 800638e:	f7fd faef 	bl	8003970 <__errno>
 8006392:	2316      	movs	r3, #22
 8006394:	6003      	str	r3, [r0, #0]
 8006396:	2000      	movs	r0, #0
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	468c      	mov	ip, r1
 800639e:	4e3a      	ldr	r6, [pc, #232]	; (8006488 <_strtol_l.isra.0+0x108>)
 80063a0:	4660      	mov	r0, ip
 80063a2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80063a6:	5da5      	ldrb	r5, [r4, r6]
 80063a8:	f015 0508 	ands.w	r5, r5, #8
 80063ac:	d1f8      	bne.n	80063a0 <_strtol_l.isra.0+0x20>
 80063ae:	2c2d      	cmp	r4, #45	; 0x2d
 80063b0:	d133      	bne.n	800641a <_strtol_l.isra.0+0x9a>
 80063b2:	f04f 0801 	mov.w	r8, #1
 80063b6:	f89c 4000 	ldrb.w	r4, [ip]
 80063ba:	f100 0c02 	add.w	ip, r0, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d05d      	beq.n	800647e <_strtol_l.isra.0+0xfe>
 80063c2:	2b10      	cmp	r3, #16
 80063c4:	d10c      	bne.n	80063e0 <_strtol_l.isra.0+0x60>
 80063c6:	2c30      	cmp	r4, #48	; 0x30
 80063c8:	d10a      	bne.n	80063e0 <_strtol_l.isra.0+0x60>
 80063ca:	f89c 0000 	ldrb.w	r0, [ip]
 80063ce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80063d2:	2858      	cmp	r0, #88	; 0x58
 80063d4:	d14e      	bne.n	8006474 <_strtol_l.isra.0+0xf4>
 80063d6:	2310      	movs	r3, #16
 80063d8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80063dc:	f10c 0c02 	add.w	ip, ip, #2
 80063e0:	2500      	movs	r5, #0
 80063e2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80063e6:	3f01      	subs	r7, #1
 80063e8:	fbb7 f9f3 	udiv	r9, r7, r3
 80063ec:	4628      	mov	r0, r5
 80063ee:	fb03 7a19 	mls	sl, r3, r9, r7
 80063f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80063f6:	2e09      	cmp	r6, #9
 80063f8:	d818      	bhi.n	800642c <_strtol_l.isra.0+0xac>
 80063fa:	4634      	mov	r4, r6
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	dd24      	ble.n	800644a <_strtol_l.isra.0+0xca>
 8006400:	2d00      	cmp	r5, #0
 8006402:	db1f      	blt.n	8006444 <_strtol_l.isra.0+0xc4>
 8006404:	4581      	cmp	r9, r0
 8006406:	d31d      	bcc.n	8006444 <_strtol_l.isra.0+0xc4>
 8006408:	d101      	bne.n	800640e <_strtol_l.isra.0+0x8e>
 800640a:	45a2      	cmp	sl, r4
 800640c:	db1a      	blt.n	8006444 <_strtol_l.isra.0+0xc4>
 800640e:	2501      	movs	r5, #1
 8006410:	fb00 4003 	mla	r0, r0, r3, r4
 8006414:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006418:	e7eb      	b.n	80063f2 <_strtol_l.isra.0+0x72>
 800641a:	2c2b      	cmp	r4, #43	; 0x2b
 800641c:	bf08      	it	eq
 800641e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006422:	46a8      	mov	r8, r5
 8006424:	bf08      	it	eq
 8006426:	f100 0c02 	addeq.w	ip, r0, #2
 800642a:	e7c8      	b.n	80063be <_strtol_l.isra.0+0x3e>
 800642c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006430:	2e19      	cmp	r6, #25
 8006432:	d801      	bhi.n	8006438 <_strtol_l.isra.0+0xb8>
 8006434:	3c37      	subs	r4, #55	; 0x37
 8006436:	e7e1      	b.n	80063fc <_strtol_l.isra.0+0x7c>
 8006438:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800643c:	2e19      	cmp	r6, #25
 800643e:	d804      	bhi.n	800644a <_strtol_l.isra.0+0xca>
 8006440:	3c57      	subs	r4, #87	; 0x57
 8006442:	e7db      	b.n	80063fc <_strtol_l.isra.0+0x7c>
 8006444:	f04f 35ff 	mov.w	r5, #4294967295
 8006448:	e7e4      	b.n	8006414 <_strtol_l.isra.0+0x94>
 800644a:	2d00      	cmp	r5, #0
 800644c:	da08      	bge.n	8006460 <_strtol_l.isra.0+0xe0>
 800644e:	2322      	movs	r3, #34	; 0x22
 8006450:	4638      	mov	r0, r7
 8006452:	f8ce 3000 	str.w	r3, [lr]
 8006456:	2a00      	cmp	r2, #0
 8006458:	d09e      	beq.n	8006398 <_strtol_l.isra.0+0x18>
 800645a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800645e:	e007      	b.n	8006470 <_strtol_l.isra.0+0xf0>
 8006460:	f1b8 0f00 	cmp.w	r8, #0
 8006464:	d000      	beq.n	8006468 <_strtol_l.isra.0+0xe8>
 8006466:	4240      	negs	r0, r0
 8006468:	2a00      	cmp	r2, #0
 800646a:	d095      	beq.n	8006398 <_strtol_l.isra.0+0x18>
 800646c:	2d00      	cmp	r5, #0
 800646e:	d1f4      	bne.n	800645a <_strtol_l.isra.0+0xda>
 8006470:	6011      	str	r1, [r2, #0]
 8006472:	e791      	b.n	8006398 <_strtol_l.isra.0+0x18>
 8006474:	2430      	movs	r4, #48	; 0x30
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1b2      	bne.n	80063e0 <_strtol_l.isra.0+0x60>
 800647a:	2308      	movs	r3, #8
 800647c:	e7b0      	b.n	80063e0 <_strtol_l.isra.0+0x60>
 800647e:	2c30      	cmp	r4, #48	; 0x30
 8006480:	d0a3      	beq.n	80063ca <_strtol_l.isra.0+0x4a>
 8006482:	230a      	movs	r3, #10
 8006484:	e7ac      	b.n	80063e0 <_strtol_l.isra.0+0x60>
 8006486:	bf00      	nop
 8006488:	080073a5 	.word	0x080073a5

0800648c <_strtol_r>:
 800648c:	f7ff bf78 	b.w	8006380 <_strtol_l.isra.0>

08006490 <_strtoul_l.isra.0>:
 8006490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006494:	468c      	mov	ip, r1
 8006496:	4686      	mov	lr, r0
 8006498:	4e3a      	ldr	r6, [pc, #232]	; (8006584 <_strtoul_l.isra.0+0xf4>)
 800649a:	4660      	mov	r0, ip
 800649c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80064a0:	5da5      	ldrb	r5, [r4, r6]
 80064a2:	f015 0508 	ands.w	r5, r5, #8
 80064a6:	d1f8      	bne.n	800649a <_strtoul_l.isra.0+0xa>
 80064a8:	2c2d      	cmp	r4, #45	; 0x2d
 80064aa:	d134      	bne.n	8006516 <_strtoul_l.isra.0+0x86>
 80064ac:	f04f 0801 	mov.w	r8, #1
 80064b0:	f89c 4000 	ldrb.w	r4, [ip]
 80064b4:	f100 0c02 	add.w	ip, r0, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d05e      	beq.n	800657a <_strtoul_l.isra.0+0xea>
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d10c      	bne.n	80064da <_strtoul_l.isra.0+0x4a>
 80064c0:	2c30      	cmp	r4, #48	; 0x30
 80064c2:	d10a      	bne.n	80064da <_strtoul_l.isra.0+0x4a>
 80064c4:	f89c 0000 	ldrb.w	r0, [ip]
 80064c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80064cc:	2858      	cmp	r0, #88	; 0x58
 80064ce:	d14f      	bne.n	8006570 <_strtoul_l.isra.0+0xe0>
 80064d0:	2310      	movs	r3, #16
 80064d2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80064d6:	f10c 0c02 	add.w	ip, ip, #2
 80064da:	f04f 37ff 	mov.w	r7, #4294967295
 80064de:	fbb7 f7f3 	udiv	r7, r7, r3
 80064e2:	2500      	movs	r5, #0
 80064e4:	fb03 f907 	mul.w	r9, r3, r7
 80064e8:	4628      	mov	r0, r5
 80064ea:	ea6f 0909 	mvn.w	r9, r9
 80064ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80064f2:	2e09      	cmp	r6, #9
 80064f4:	d818      	bhi.n	8006528 <_strtoul_l.isra.0+0x98>
 80064f6:	4634      	mov	r4, r6
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	dd24      	ble.n	8006546 <_strtoul_l.isra.0+0xb6>
 80064fc:	2d00      	cmp	r5, #0
 80064fe:	db1f      	blt.n	8006540 <_strtoul_l.isra.0+0xb0>
 8006500:	4287      	cmp	r7, r0
 8006502:	d31d      	bcc.n	8006540 <_strtoul_l.isra.0+0xb0>
 8006504:	d101      	bne.n	800650a <_strtoul_l.isra.0+0x7a>
 8006506:	45a1      	cmp	r9, r4
 8006508:	db1a      	blt.n	8006540 <_strtoul_l.isra.0+0xb0>
 800650a:	2501      	movs	r5, #1
 800650c:	fb00 4003 	mla	r0, r0, r3, r4
 8006510:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006514:	e7eb      	b.n	80064ee <_strtoul_l.isra.0+0x5e>
 8006516:	2c2b      	cmp	r4, #43	; 0x2b
 8006518:	bf08      	it	eq
 800651a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800651e:	46a8      	mov	r8, r5
 8006520:	bf08      	it	eq
 8006522:	f100 0c02 	addeq.w	ip, r0, #2
 8006526:	e7c7      	b.n	80064b8 <_strtoul_l.isra.0+0x28>
 8006528:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800652c:	2e19      	cmp	r6, #25
 800652e:	d801      	bhi.n	8006534 <_strtoul_l.isra.0+0xa4>
 8006530:	3c37      	subs	r4, #55	; 0x37
 8006532:	e7e1      	b.n	80064f8 <_strtoul_l.isra.0+0x68>
 8006534:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006538:	2e19      	cmp	r6, #25
 800653a:	d804      	bhi.n	8006546 <_strtoul_l.isra.0+0xb6>
 800653c:	3c57      	subs	r4, #87	; 0x57
 800653e:	e7db      	b.n	80064f8 <_strtoul_l.isra.0+0x68>
 8006540:	f04f 35ff 	mov.w	r5, #4294967295
 8006544:	e7e4      	b.n	8006510 <_strtoul_l.isra.0+0x80>
 8006546:	2d00      	cmp	r5, #0
 8006548:	da07      	bge.n	800655a <_strtoul_l.isra.0+0xca>
 800654a:	2322      	movs	r3, #34	; 0x22
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	f8ce 3000 	str.w	r3, [lr]
 8006554:	b942      	cbnz	r2, 8006568 <_strtoul_l.isra.0+0xd8>
 8006556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	d000      	beq.n	8006562 <_strtoul_l.isra.0+0xd2>
 8006560:	4240      	negs	r0, r0
 8006562:	2a00      	cmp	r2, #0
 8006564:	d0f7      	beq.n	8006556 <_strtoul_l.isra.0+0xc6>
 8006566:	b10d      	cbz	r5, 800656c <_strtoul_l.isra.0+0xdc>
 8006568:	f10c 31ff 	add.w	r1, ip, #4294967295
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	e7f2      	b.n	8006556 <_strtoul_l.isra.0+0xc6>
 8006570:	2430      	movs	r4, #48	; 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1b1      	bne.n	80064da <_strtoul_l.isra.0+0x4a>
 8006576:	2308      	movs	r3, #8
 8006578:	e7af      	b.n	80064da <_strtoul_l.isra.0+0x4a>
 800657a:	2c30      	cmp	r4, #48	; 0x30
 800657c:	d0a2      	beq.n	80064c4 <_strtoul_l.isra.0+0x34>
 800657e:	230a      	movs	r3, #10
 8006580:	e7ab      	b.n	80064da <_strtoul_l.isra.0+0x4a>
 8006582:	bf00      	nop
 8006584:	080073a5 	.word	0x080073a5

08006588 <_strtoul_r>:
 8006588:	f7ff bf82 	b.w	8006490 <_strtoul_l.isra.0>

0800658c <__submore>:
 800658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006590:	460c      	mov	r4, r1
 8006592:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006598:	4299      	cmp	r1, r3
 800659a:	d11b      	bne.n	80065d4 <__submore+0x48>
 800659c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065a0:	f7ff f9be 	bl	8005920 <_malloc_r>
 80065a4:	b918      	cbnz	r0, 80065ae <__submore+0x22>
 80065a6:	f04f 30ff 	mov.w	r0, #4294967295
 80065aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80065b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80065b8:	6360      	str	r0, [r4, #52]	; 0x34
 80065ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80065be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80065c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80065c6:	7043      	strb	r3, [r0, #1]
 80065c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80065cc:	7003      	strb	r3, [r0, #0]
 80065ce:	6020      	str	r0, [r4, #0]
 80065d0:	2000      	movs	r0, #0
 80065d2:	e7ea      	b.n	80065aa <__submore+0x1e>
 80065d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80065d6:	0077      	lsls	r7, r6, #1
 80065d8:	463a      	mov	r2, r7
 80065da:	f000 fa31 	bl	8006a40 <_realloc_r>
 80065de:	4605      	mov	r5, r0
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d0e0      	beq.n	80065a6 <__submore+0x1a>
 80065e4:	eb00 0806 	add.w	r8, r0, r6
 80065e8:	4601      	mov	r1, r0
 80065ea:	4632      	mov	r2, r6
 80065ec:	4640      	mov	r0, r8
 80065ee:	f7fe fdad 	bl	800514c <memcpy>
 80065f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80065f6:	f8c4 8000 	str.w	r8, [r4]
 80065fa:	e7e9      	b.n	80065d0 <__submore+0x44>

080065fc <__assert_func>:
 80065fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065fe:	4614      	mov	r4, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <__assert_func+0x2c>)
 8006604:	4605      	mov	r5, r0
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68d8      	ldr	r0, [r3, #12]
 800660a:	b14c      	cbz	r4, 8006620 <__assert_func+0x24>
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <__assert_func+0x30>)
 800660e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006612:	9100      	str	r1, [sp, #0]
 8006614:	462b      	mov	r3, r5
 8006616:	4906      	ldr	r1, [pc, #24]	; (8006630 <__assert_func+0x34>)
 8006618:	f000 f9a6 	bl	8006968 <fiprintf>
 800661c:	f000 fc5c 	bl	8006ed8 <abort>
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <__assert_func+0x38>)
 8006622:	461c      	mov	r4, r3
 8006624:	e7f3      	b.n	800660e <__assert_func+0x12>
 8006626:	bf00      	nop
 8006628:	20000010 	.word	0x20000010
 800662c:	08007368 	.word	0x08007368
 8006630:	08007375 	.word	0x08007375
 8006634:	080073a3 	.word	0x080073a3

08006638 <__sflush_r>:
 8006638:	898a      	ldrh	r2, [r1, #12]
 800663a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663e:	4605      	mov	r5, r0
 8006640:	0710      	lsls	r0, r2, #28
 8006642:	460c      	mov	r4, r1
 8006644:	d458      	bmi.n	80066f8 <__sflush_r+0xc0>
 8006646:	684b      	ldr	r3, [r1, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	dc05      	bgt.n	8006658 <__sflush_r+0x20>
 800664c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	dc02      	bgt.n	8006658 <__sflush_r+0x20>
 8006652:	2000      	movs	r0, #0
 8006654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800665a:	2e00      	cmp	r6, #0
 800665c:	d0f9      	beq.n	8006652 <__sflush_r+0x1a>
 800665e:	2300      	movs	r3, #0
 8006660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006664:	682f      	ldr	r7, [r5, #0]
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	d032      	beq.n	80066d0 <__sflush_r+0x98>
 800666a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	075a      	lsls	r2, r3, #29
 8006670:	d505      	bpl.n	800667e <__sflush_r+0x46>
 8006672:	6863      	ldr	r3, [r4, #4]
 8006674:	1ac0      	subs	r0, r0, r3
 8006676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006678:	b10b      	cbz	r3, 800667e <__sflush_r+0x46>
 800667a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800667c:	1ac0      	subs	r0, r0, r3
 800667e:	2300      	movs	r3, #0
 8006680:	4602      	mov	r2, r0
 8006682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006684:	4628      	mov	r0, r5
 8006686:	6a21      	ldr	r1, [r4, #32]
 8006688:	47b0      	blx	r6
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	d106      	bne.n	800669e <__sflush_r+0x66>
 8006690:	6829      	ldr	r1, [r5, #0]
 8006692:	291d      	cmp	r1, #29
 8006694:	d82c      	bhi.n	80066f0 <__sflush_r+0xb8>
 8006696:	4a2a      	ldr	r2, [pc, #168]	; (8006740 <__sflush_r+0x108>)
 8006698:	40ca      	lsrs	r2, r1
 800669a:	07d6      	lsls	r6, r2, #31
 800669c:	d528      	bpl.n	80066f0 <__sflush_r+0xb8>
 800669e:	2200      	movs	r2, #0
 80066a0:	6062      	str	r2, [r4, #4]
 80066a2:	6922      	ldr	r2, [r4, #16]
 80066a4:	04d9      	lsls	r1, r3, #19
 80066a6:	6022      	str	r2, [r4, #0]
 80066a8:	d504      	bpl.n	80066b4 <__sflush_r+0x7c>
 80066aa:	1c42      	adds	r2, r0, #1
 80066ac:	d101      	bne.n	80066b2 <__sflush_r+0x7a>
 80066ae:	682b      	ldr	r3, [r5, #0]
 80066b0:	b903      	cbnz	r3, 80066b4 <__sflush_r+0x7c>
 80066b2:	6560      	str	r0, [r4, #84]	; 0x54
 80066b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b6:	602f      	str	r7, [r5, #0]
 80066b8:	2900      	cmp	r1, #0
 80066ba:	d0ca      	beq.n	8006652 <__sflush_r+0x1a>
 80066bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d002      	beq.n	80066ca <__sflush_r+0x92>
 80066c4:	4628      	mov	r0, r5
 80066c6:	f7ff f8df 	bl	8005888 <_free_r>
 80066ca:	2000      	movs	r0, #0
 80066cc:	6360      	str	r0, [r4, #52]	; 0x34
 80066ce:	e7c1      	b.n	8006654 <__sflush_r+0x1c>
 80066d0:	6a21      	ldr	r1, [r4, #32]
 80066d2:	2301      	movs	r3, #1
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b0      	blx	r6
 80066d8:	1c41      	adds	r1, r0, #1
 80066da:	d1c7      	bne.n	800666c <__sflush_r+0x34>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0c4      	beq.n	800666c <__sflush_r+0x34>
 80066e2:	2b1d      	cmp	r3, #29
 80066e4:	d001      	beq.n	80066ea <__sflush_r+0xb2>
 80066e6:	2b16      	cmp	r3, #22
 80066e8:	d101      	bne.n	80066ee <__sflush_r+0xb6>
 80066ea:	602f      	str	r7, [r5, #0]
 80066ec:	e7b1      	b.n	8006652 <__sflush_r+0x1a>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	e7ad      	b.n	8006654 <__sflush_r+0x1c>
 80066f8:	690f      	ldr	r7, [r1, #16]
 80066fa:	2f00      	cmp	r7, #0
 80066fc:	d0a9      	beq.n	8006652 <__sflush_r+0x1a>
 80066fe:	0793      	lsls	r3, r2, #30
 8006700:	bf18      	it	ne
 8006702:	2300      	movne	r3, #0
 8006704:	680e      	ldr	r6, [r1, #0]
 8006706:	bf08      	it	eq
 8006708:	694b      	ldreq	r3, [r1, #20]
 800670a:	eba6 0807 	sub.w	r8, r6, r7
 800670e:	600f      	str	r7, [r1, #0]
 8006710:	608b      	str	r3, [r1, #8]
 8006712:	f1b8 0f00 	cmp.w	r8, #0
 8006716:	dd9c      	ble.n	8006652 <__sflush_r+0x1a>
 8006718:	4643      	mov	r3, r8
 800671a:	463a      	mov	r2, r7
 800671c:	4628      	mov	r0, r5
 800671e:	6a21      	ldr	r1, [r4, #32]
 8006720:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006722:	47b0      	blx	r6
 8006724:	2800      	cmp	r0, #0
 8006726:	dc06      	bgt.n	8006736 <__sflush_r+0xfe>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	f04f 30ff 	mov.w	r0, #4294967295
 800672e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006732:	81a3      	strh	r3, [r4, #12]
 8006734:	e78e      	b.n	8006654 <__sflush_r+0x1c>
 8006736:	4407      	add	r7, r0
 8006738:	eba8 0800 	sub.w	r8, r8, r0
 800673c:	e7e9      	b.n	8006712 <__sflush_r+0xda>
 800673e:	bf00      	nop
 8006740:	20400001 	.word	0x20400001

08006744 <_fflush_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	690b      	ldr	r3, [r1, #16]
 8006748:	4605      	mov	r5, r0
 800674a:	460c      	mov	r4, r1
 800674c:	b913      	cbnz	r3, 8006754 <_fflush_r+0x10>
 800674e:	2500      	movs	r5, #0
 8006750:	4628      	mov	r0, r5
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	b118      	cbz	r0, 800675e <_fflush_r+0x1a>
 8006756:	6983      	ldr	r3, [r0, #24]
 8006758:	b90b      	cbnz	r3, 800675e <_fflush_r+0x1a>
 800675a:	f000 f887 	bl	800686c <__sinit>
 800675e:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <_fflush_r+0x6c>)
 8006760:	429c      	cmp	r4, r3
 8006762:	d11b      	bne.n	800679c <_fflush_r+0x58>
 8006764:	686c      	ldr	r4, [r5, #4]
 8006766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0ef      	beq.n	800674e <_fflush_r+0xa>
 800676e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006770:	07d0      	lsls	r0, r2, #31
 8006772:	d404      	bmi.n	800677e <_fflush_r+0x3a>
 8006774:	0599      	lsls	r1, r3, #22
 8006776:	d402      	bmi.n	800677e <_fflush_r+0x3a>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f000 f927 	bl	80069cc <__retarget_lock_acquire_recursive>
 800677e:	4628      	mov	r0, r5
 8006780:	4621      	mov	r1, r4
 8006782:	f7ff ff59 	bl	8006638 <__sflush_r>
 8006786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006788:	4605      	mov	r5, r0
 800678a:	07da      	lsls	r2, r3, #31
 800678c:	d4e0      	bmi.n	8006750 <_fflush_r+0xc>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	059b      	lsls	r3, r3, #22
 8006792:	d4dd      	bmi.n	8006750 <_fflush_r+0xc>
 8006794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006796:	f000 f91a 	bl	80069ce <__retarget_lock_release_recursive>
 800679a:	e7d9      	b.n	8006750 <_fflush_r+0xc>
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <_fflush_r+0x70>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	d101      	bne.n	80067a6 <_fflush_r+0x62>
 80067a2:	68ac      	ldr	r4, [r5, #8]
 80067a4:	e7df      	b.n	8006766 <_fflush_r+0x22>
 80067a6:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <_fflush_r+0x74>)
 80067a8:	429c      	cmp	r4, r3
 80067aa:	bf08      	it	eq
 80067ac:	68ec      	ldreq	r4, [r5, #12]
 80067ae:	e7da      	b.n	8006766 <_fflush_r+0x22>
 80067b0:	080074c8 	.word	0x080074c8
 80067b4:	080074e8 	.word	0x080074e8
 80067b8:	080074a8 	.word	0x080074a8

080067bc <std>:
 80067bc:	2300      	movs	r3, #0
 80067be:	b510      	push	{r4, lr}
 80067c0:	4604      	mov	r4, r0
 80067c2:	e9c0 3300 	strd	r3, r3, [r0]
 80067c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067ca:	6083      	str	r3, [r0, #8]
 80067cc:	8181      	strh	r1, [r0, #12]
 80067ce:	6643      	str	r3, [r0, #100]	; 0x64
 80067d0:	81c2      	strh	r2, [r0, #14]
 80067d2:	6183      	str	r3, [r0, #24]
 80067d4:	4619      	mov	r1, r3
 80067d6:	2208      	movs	r2, #8
 80067d8:	305c      	adds	r0, #92	; 0x5c
 80067da:	f7fd f8f3 	bl	80039c4 <memset>
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <std+0x38>)
 80067e0:	6224      	str	r4, [r4, #32]
 80067e2:	6263      	str	r3, [r4, #36]	; 0x24
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <std+0x3c>)
 80067e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80067e8:	4b04      	ldr	r3, [pc, #16]	; (80067fc <std+0x40>)
 80067ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <std+0x44>)
 80067ee:	6323      	str	r3, [r4, #48]	; 0x30
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	08004329 	.word	0x08004329
 80067f8:	0800434f 	.word	0x0800434f
 80067fc:	08004387 	.word	0x08004387
 8006800:	080043ab 	.word	0x080043ab

08006804 <_cleanup_r>:
 8006804:	4901      	ldr	r1, [pc, #4]	; (800680c <_cleanup_r+0x8>)
 8006806:	f000 b8c1 	b.w	800698c <_fwalk_reent>
 800680a:	bf00      	nop
 800680c:	08006745 	.word	0x08006745

08006810 <__sfmoreglue>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	2568      	movs	r5, #104	; 0x68
 8006814:	1e4a      	subs	r2, r1, #1
 8006816:	4355      	muls	r5, r2
 8006818:	460e      	mov	r6, r1
 800681a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800681e:	f7ff f87f 	bl	8005920 <_malloc_r>
 8006822:	4604      	mov	r4, r0
 8006824:	b140      	cbz	r0, 8006838 <__sfmoreglue+0x28>
 8006826:	2100      	movs	r1, #0
 8006828:	e9c0 1600 	strd	r1, r6, [r0]
 800682c:	300c      	adds	r0, #12
 800682e:	60a0      	str	r0, [r4, #8]
 8006830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006834:	f7fd f8c6 	bl	80039c4 <memset>
 8006838:	4620      	mov	r0, r4
 800683a:	bd70      	pop	{r4, r5, r6, pc}

0800683c <__sfp_lock_acquire>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__sfp_lock_acquire+0x8>)
 800683e:	f000 b8c5 	b.w	80069cc <__retarget_lock_acquire_recursive>
 8006842:	bf00      	nop
 8006844:	20000328 	.word	0x20000328

08006848 <__sfp_lock_release>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__sfp_lock_release+0x8>)
 800684a:	f000 b8c0 	b.w	80069ce <__retarget_lock_release_recursive>
 800684e:	bf00      	nop
 8006850:	20000328 	.word	0x20000328

08006854 <__sinit_lock_acquire>:
 8006854:	4801      	ldr	r0, [pc, #4]	; (800685c <__sinit_lock_acquire+0x8>)
 8006856:	f000 b8b9 	b.w	80069cc <__retarget_lock_acquire_recursive>
 800685a:	bf00      	nop
 800685c:	20000323 	.word	0x20000323

08006860 <__sinit_lock_release>:
 8006860:	4801      	ldr	r0, [pc, #4]	; (8006868 <__sinit_lock_release+0x8>)
 8006862:	f000 b8b4 	b.w	80069ce <__retarget_lock_release_recursive>
 8006866:	bf00      	nop
 8006868:	20000323 	.word	0x20000323

0800686c <__sinit>:
 800686c:	b510      	push	{r4, lr}
 800686e:	4604      	mov	r4, r0
 8006870:	f7ff fff0 	bl	8006854 <__sinit_lock_acquire>
 8006874:	69a3      	ldr	r3, [r4, #24]
 8006876:	b11b      	cbz	r3, 8006880 <__sinit+0x14>
 8006878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800687c:	f7ff bff0 	b.w	8006860 <__sinit_lock_release>
 8006880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006884:	6523      	str	r3, [r4, #80]	; 0x50
 8006886:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <__sinit+0x68>)
 8006888:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <__sinit+0x6c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	62a2      	str	r2, [r4, #40]	; 0x28
 800688e:	42a3      	cmp	r3, r4
 8006890:	bf08      	it	eq
 8006892:	2301      	moveq	r3, #1
 8006894:	4620      	mov	r0, r4
 8006896:	bf08      	it	eq
 8006898:	61a3      	streq	r3, [r4, #24]
 800689a:	f000 f81f 	bl	80068dc <__sfp>
 800689e:	6060      	str	r0, [r4, #4]
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 f81b 	bl	80068dc <__sfp>
 80068a6:	60a0      	str	r0, [r4, #8]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 f817 	bl	80068dc <__sfp>
 80068ae:	2200      	movs	r2, #0
 80068b0:	2104      	movs	r1, #4
 80068b2:	60e0      	str	r0, [r4, #12]
 80068b4:	6860      	ldr	r0, [r4, #4]
 80068b6:	f7ff ff81 	bl	80067bc <std>
 80068ba:	2201      	movs	r2, #1
 80068bc:	2109      	movs	r1, #9
 80068be:	68a0      	ldr	r0, [r4, #8]
 80068c0:	f7ff ff7c 	bl	80067bc <std>
 80068c4:	2202      	movs	r2, #2
 80068c6:	2112      	movs	r1, #18
 80068c8:	68e0      	ldr	r0, [r4, #12]
 80068ca:	f7ff ff77 	bl	80067bc <std>
 80068ce:	2301      	movs	r3, #1
 80068d0:	61a3      	str	r3, [r4, #24]
 80068d2:	e7d1      	b.n	8006878 <__sinit+0xc>
 80068d4:	08007110 	.word	0x08007110
 80068d8:	08006805 	.word	0x08006805

080068dc <__sfp>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	4607      	mov	r7, r0
 80068e0:	f7ff ffac 	bl	800683c <__sfp_lock_acquire>
 80068e4:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <__sfp+0x84>)
 80068e6:	681e      	ldr	r6, [r3, #0]
 80068e8:	69b3      	ldr	r3, [r6, #24]
 80068ea:	b913      	cbnz	r3, 80068f2 <__sfp+0x16>
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7ff ffbd 	bl	800686c <__sinit>
 80068f2:	3648      	adds	r6, #72	; 0x48
 80068f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	d503      	bpl.n	8006904 <__sfp+0x28>
 80068fc:	6833      	ldr	r3, [r6, #0]
 80068fe:	b30b      	cbz	r3, 8006944 <__sfp+0x68>
 8006900:	6836      	ldr	r6, [r6, #0]
 8006902:	e7f7      	b.n	80068f4 <__sfp+0x18>
 8006904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006908:	b9d5      	cbnz	r5, 8006940 <__sfp+0x64>
 800690a:	4b16      	ldr	r3, [pc, #88]	; (8006964 <__sfp+0x88>)
 800690c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006910:	60e3      	str	r3, [r4, #12]
 8006912:	6665      	str	r5, [r4, #100]	; 0x64
 8006914:	f000 f859 	bl	80069ca <__retarget_lock_init_recursive>
 8006918:	f7ff ff96 	bl	8006848 <__sfp_lock_release>
 800691c:	2208      	movs	r2, #8
 800691e:	4629      	mov	r1, r5
 8006920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006928:	6025      	str	r5, [r4, #0]
 800692a:	61a5      	str	r5, [r4, #24]
 800692c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006930:	f7fd f848 	bl	80039c4 <memset>
 8006934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800693c:	4620      	mov	r0, r4
 800693e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006940:	3468      	adds	r4, #104	; 0x68
 8006942:	e7d9      	b.n	80068f8 <__sfp+0x1c>
 8006944:	2104      	movs	r1, #4
 8006946:	4638      	mov	r0, r7
 8006948:	f7ff ff62 	bl	8006810 <__sfmoreglue>
 800694c:	4604      	mov	r4, r0
 800694e:	6030      	str	r0, [r6, #0]
 8006950:	2800      	cmp	r0, #0
 8006952:	d1d5      	bne.n	8006900 <__sfp+0x24>
 8006954:	f7ff ff78 	bl	8006848 <__sfp_lock_release>
 8006958:	230c      	movs	r3, #12
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	e7ee      	b.n	800693c <__sfp+0x60>
 800695e:	bf00      	nop
 8006960:	08007110 	.word	0x08007110
 8006964:	ffff0001 	.word	0xffff0001

08006968 <fiprintf>:
 8006968:	b40e      	push	{r1, r2, r3}
 800696a:	b503      	push	{r0, r1, lr}
 800696c:	4601      	mov	r1, r0
 800696e:	ab03      	add	r3, sp, #12
 8006970:	4805      	ldr	r0, [pc, #20]	; (8006988 <fiprintf+0x20>)
 8006972:	f853 2b04 	ldr.w	r2, [r3], #4
 8006976:	6800      	ldr	r0, [r0, #0]
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	f000 f8af 	bl	8006adc <_vfiprintf_r>
 800697e:	b002      	add	sp, #8
 8006980:	f85d eb04 	ldr.w	lr, [sp], #4
 8006984:	b003      	add	sp, #12
 8006986:	4770      	bx	lr
 8006988:	20000010 	.word	0x20000010

0800698c <_fwalk_reent>:
 800698c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006990:	4606      	mov	r6, r0
 8006992:	4688      	mov	r8, r1
 8006994:	2700      	movs	r7, #0
 8006996:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800699a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800699e:	f1b9 0901 	subs.w	r9, r9, #1
 80069a2:	d505      	bpl.n	80069b0 <_fwalk_reent+0x24>
 80069a4:	6824      	ldr	r4, [r4, #0]
 80069a6:	2c00      	cmp	r4, #0
 80069a8:	d1f7      	bne.n	800699a <_fwalk_reent+0xe>
 80069aa:	4638      	mov	r0, r7
 80069ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069b0:	89ab      	ldrh	r3, [r5, #12]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d907      	bls.n	80069c6 <_fwalk_reent+0x3a>
 80069b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069ba:	3301      	adds	r3, #1
 80069bc:	d003      	beq.n	80069c6 <_fwalk_reent+0x3a>
 80069be:	4629      	mov	r1, r5
 80069c0:	4630      	mov	r0, r6
 80069c2:	47c0      	blx	r8
 80069c4:	4307      	orrs	r7, r0
 80069c6:	3568      	adds	r5, #104	; 0x68
 80069c8:	e7e9      	b.n	800699e <_fwalk_reent+0x12>

080069ca <__retarget_lock_init_recursive>:
 80069ca:	4770      	bx	lr

080069cc <__retarget_lock_acquire_recursive>:
 80069cc:	4770      	bx	lr

080069ce <__retarget_lock_release_recursive>:
 80069ce:	4770      	bx	lr

080069d0 <__ascii_mbtowc>:
 80069d0:	b082      	sub	sp, #8
 80069d2:	b901      	cbnz	r1, 80069d6 <__ascii_mbtowc+0x6>
 80069d4:	a901      	add	r1, sp, #4
 80069d6:	b142      	cbz	r2, 80069ea <__ascii_mbtowc+0x1a>
 80069d8:	b14b      	cbz	r3, 80069ee <__ascii_mbtowc+0x1e>
 80069da:	7813      	ldrb	r3, [r2, #0]
 80069dc:	600b      	str	r3, [r1, #0]
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	1e10      	subs	r0, r2, #0
 80069e2:	bf18      	it	ne
 80069e4:	2001      	movne	r0, #1
 80069e6:	b002      	add	sp, #8
 80069e8:	4770      	bx	lr
 80069ea:	4610      	mov	r0, r2
 80069ec:	e7fb      	b.n	80069e6 <__ascii_mbtowc+0x16>
 80069ee:	f06f 0001 	mvn.w	r0, #1
 80069f2:	e7f8      	b.n	80069e6 <__ascii_mbtowc+0x16>

080069f4 <memmove>:
 80069f4:	4288      	cmp	r0, r1
 80069f6:	b510      	push	{r4, lr}
 80069f8:	eb01 0402 	add.w	r4, r1, r2
 80069fc:	d902      	bls.n	8006a04 <memmove+0x10>
 80069fe:	4284      	cmp	r4, r0
 8006a00:	4623      	mov	r3, r4
 8006a02:	d807      	bhi.n	8006a14 <memmove+0x20>
 8006a04:	1e43      	subs	r3, r0, #1
 8006a06:	42a1      	cmp	r1, r4
 8006a08:	d008      	beq.n	8006a1c <memmove+0x28>
 8006a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a12:	e7f8      	b.n	8006a06 <memmove+0x12>
 8006a14:	4601      	mov	r1, r0
 8006a16:	4402      	add	r2, r0
 8006a18:	428a      	cmp	r2, r1
 8006a1a:	d100      	bne.n	8006a1e <memmove+0x2a>
 8006a1c:	bd10      	pop	{r4, pc}
 8006a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a26:	e7f7      	b.n	8006a18 <memmove+0x24>

08006a28 <__malloc_lock>:
 8006a28:	4801      	ldr	r0, [pc, #4]	; (8006a30 <__malloc_lock+0x8>)
 8006a2a:	f7ff bfcf 	b.w	80069cc <__retarget_lock_acquire_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20000324 	.word	0x20000324

08006a34 <__malloc_unlock>:
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <__malloc_unlock+0x8>)
 8006a36:	f7ff bfca 	b.w	80069ce <__retarget_lock_release_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20000324 	.word	0x20000324

08006a40 <_realloc_r>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	4607      	mov	r7, r0
 8006a44:	4614      	mov	r4, r2
 8006a46:	460e      	mov	r6, r1
 8006a48:	b921      	cbnz	r1, 8006a54 <_realloc_r+0x14>
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a50:	f7fe bf66 	b.w	8005920 <_malloc_r>
 8006a54:	b922      	cbnz	r2, 8006a60 <_realloc_r+0x20>
 8006a56:	f7fe ff17 	bl	8005888 <_free_r>
 8006a5a:	4625      	mov	r5, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a60:	f000 faa6 	bl	8006fb0 <_malloc_usable_size_r>
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d20f      	bcs.n	8006a88 <_realloc_r+0x48>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f7fe ff58 	bl	8005920 <_malloc_r>
 8006a70:	4605      	mov	r5, r0
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d0f2      	beq.n	8006a5c <_realloc_r+0x1c>
 8006a76:	4631      	mov	r1, r6
 8006a78:	4622      	mov	r2, r4
 8006a7a:	f7fe fb67 	bl	800514c <memcpy>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7fe ff01 	bl	8005888 <_free_r>
 8006a86:	e7e9      	b.n	8006a5c <_realloc_r+0x1c>
 8006a88:	4635      	mov	r5, r6
 8006a8a:	e7e7      	b.n	8006a5c <_realloc_r+0x1c>

08006a8c <__sfputc_r>:
 8006a8c:	6893      	ldr	r3, [r2, #8]
 8006a8e:	b410      	push	{r4}
 8006a90:	3b01      	subs	r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	6093      	str	r3, [r2, #8]
 8006a96:	da07      	bge.n	8006aa8 <__sfputc_r+0x1c>
 8006a98:	6994      	ldr	r4, [r2, #24]
 8006a9a:	42a3      	cmp	r3, r4
 8006a9c:	db01      	blt.n	8006aa2 <__sfputc_r+0x16>
 8006a9e:	290a      	cmp	r1, #10
 8006aa0:	d102      	bne.n	8006aa8 <__sfputc_r+0x1c>
 8006aa2:	bc10      	pop	{r4}
 8006aa4:	f000 b94a 	b.w	8006d3c <__swbuf_r>
 8006aa8:	6813      	ldr	r3, [r2, #0]
 8006aaa:	1c58      	adds	r0, r3, #1
 8006aac:	6010      	str	r0, [r2, #0]
 8006aae:	7019      	strb	r1, [r3, #0]
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	bc10      	pop	{r4}
 8006ab4:	4770      	bx	lr

08006ab6 <__sfputs_r>:
 8006ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab8:	4606      	mov	r6, r0
 8006aba:	460f      	mov	r7, r1
 8006abc:	4614      	mov	r4, r2
 8006abe:	18d5      	adds	r5, r2, r3
 8006ac0:	42ac      	cmp	r4, r5
 8006ac2:	d101      	bne.n	8006ac8 <__sfputs_r+0x12>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e007      	b.n	8006ad8 <__sfputs_r+0x22>
 8006ac8:	463a      	mov	r2, r7
 8006aca:	4630      	mov	r0, r6
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	f7ff ffdc 	bl	8006a8c <__sfputc_r>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d1f3      	bne.n	8006ac0 <__sfputs_r+0xa>
 8006ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006adc <_vfiprintf_r>:
 8006adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	4614      	mov	r4, r2
 8006ae4:	4698      	mov	r8, r3
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	b09d      	sub	sp, #116	; 0x74
 8006aea:	b118      	cbz	r0, 8006af4 <_vfiprintf_r+0x18>
 8006aec:	6983      	ldr	r3, [r0, #24]
 8006aee:	b90b      	cbnz	r3, 8006af4 <_vfiprintf_r+0x18>
 8006af0:	f7ff febc 	bl	800686c <__sinit>
 8006af4:	4b89      	ldr	r3, [pc, #548]	; (8006d1c <_vfiprintf_r+0x240>)
 8006af6:	429d      	cmp	r5, r3
 8006af8:	d11b      	bne.n	8006b32 <_vfiprintf_r+0x56>
 8006afa:	6875      	ldr	r5, [r6, #4]
 8006afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d405      	bmi.n	8006b0e <_vfiprintf_r+0x32>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d402      	bmi.n	8006b0e <_vfiprintf_r+0x32>
 8006b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b0a:	f7ff ff5f 	bl	80069cc <__retarget_lock_acquire_recursive>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	071b      	lsls	r3, r3, #28
 8006b12:	d501      	bpl.n	8006b18 <_vfiprintf_r+0x3c>
 8006b14:	692b      	ldr	r3, [r5, #16]
 8006b16:	b9eb      	cbnz	r3, 8006b54 <_vfiprintf_r+0x78>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f96e 	bl	8006dfc <__swsetup_r>
 8006b20:	b1c0      	cbz	r0, 8006b54 <_vfiprintf_r+0x78>
 8006b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b24:	07dc      	lsls	r4, r3, #31
 8006b26:	d50e      	bpl.n	8006b46 <_vfiprintf_r+0x6a>
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	b01d      	add	sp, #116	; 0x74
 8006b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b32:	4b7b      	ldr	r3, [pc, #492]	; (8006d20 <_vfiprintf_r+0x244>)
 8006b34:	429d      	cmp	r5, r3
 8006b36:	d101      	bne.n	8006b3c <_vfiprintf_r+0x60>
 8006b38:	68b5      	ldr	r5, [r6, #8]
 8006b3a:	e7df      	b.n	8006afc <_vfiprintf_r+0x20>
 8006b3c:	4b79      	ldr	r3, [pc, #484]	; (8006d24 <_vfiprintf_r+0x248>)
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	bf08      	it	eq
 8006b42:	68f5      	ldreq	r5, [r6, #12]
 8006b44:	e7da      	b.n	8006afc <_vfiprintf_r+0x20>
 8006b46:	89ab      	ldrh	r3, [r5, #12]
 8006b48:	0598      	lsls	r0, r3, #22
 8006b4a:	d4ed      	bmi.n	8006b28 <_vfiprintf_r+0x4c>
 8006b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b4e:	f7ff ff3e 	bl	80069ce <__retarget_lock_release_recursive>
 8006b52:	e7e9      	b.n	8006b28 <_vfiprintf_r+0x4c>
 8006b54:	2300      	movs	r3, #0
 8006b56:	9309      	str	r3, [sp, #36]	; 0x24
 8006b58:	2320      	movs	r3, #32
 8006b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b5e:	2330      	movs	r3, #48	; 0x30
 8006b60:	f04f 0901 	mov.w	r9, #1
 8006b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006d28 <_vfiprintf_r+0x24c>
 8006b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b70:	4623      	mov	r3, r4
 8006b72:	469a      	mov	sl, r3
 8006b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b78:	b10a      	cbz	r2, 8006b7e <_vfiprintf_r+0xa2>
 8006b7a:	2a25      	cmp	r2, #37	; 0x25
 8006b7c:	d1f9      	bne.n	8006b72 <_vfiprintf_r+0x96>
 8006b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b82:	d00b      	beq.n	8006b9c <_vfiprintf_r+0xc0>
 8006b84:	465b      	mov	r3, fp
 8006b86:	4622      	mov	r2, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff ff93 	bl	8006ab6 <__sfputs_r>
 8006b90:	3001      	adds	r0, #1
 8006b92:	f000 80aa 	beq.w	8006cea <_vfiprintf_r+0x20e>
 8006b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b98:	445a      	add	r2, fp
 8006b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a2 	beq.w	8006cea <_vfiprintf_r+0x20e>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb0:	f10a 0a01 	add.w	sl, sl, #1
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	9307      	str	r3, [sp, #28]
 8006bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8006bbe:	4654      	mov	r4, sl
 8006bc0:	2205      	movs	r2, #5
 8006bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc6:	4858      	ldr	r0, [pc, #352]	; (8006d28 <_vfiprintf_r+0x24c>)
 8006bc8:	f7fe fab2 	bl	8005130 <memchr>
 8006bcc:	9a04      	ldr	r2, [sp, #16]
 8006bce:	b9d8      	cbnz	r0, 8006c08 <_vfiprintf_r+0x12c>
 8006bd0:	06d1      	lsls	r1, r2, #27
 8006bd2:	bf44      	itt	mi
 8006bd4:	2320      	movmi	r3, #32
 8006bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bda:	0713      	lsls	r3, r2, #28
 8006bdc:	bf44      	itt	mi
 8006bde:	232b      	movmi	r3, #43	; 0x2b
 8006be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be4:	f89a 3000 	ldrb.w	r3, [sl]
 8006be8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bea:	d015      	beq.n	8006c18 <_vfiprintf_r+0x13c>
 8006bec:	4654      	mov	r4, sl
 8006bee:	2000      	movs	r0, #0
 8006bf0:	f04f 0c0a 	mov.w	ip, #10
 8006bf4:	9a07      	ldr	r2, [sp, #28]
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bfc:	3b30      	subs	r3, #48	; 0x30
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d94e      	bls.n	8006ca0 <_vfiprintf_r+0x1c4>
 8006c02:	b1b0      	cbz	r0, 8006c32 <_vfiprintf_r+0x156>
 8006c04:	9207      	str	r2, [sp, #28]
 8006c06:	e014      	b.n	8006c32 <_vfiprintf_r+0x156>
 8006c08:	eba0 0308 	sub.w	r3, r0, r8
 8006c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c10:	4313      	orrs	r3, r2
 8006c12:	46a2      	mov	sl, r4
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	e7d2      	b.n	8006bbe <_vfiprintf_r+0xe2>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	1d19      	adds	r1, r3, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	9103      	str	r1, [sp, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfbb      	ittet	lt
 8006c24:	425b      	neglt	r3, r3
 8006c26:	f042 0202 	orrlt.w	r2, r2, #2
 8006c2a:	9307      	strge	r3, [sp, #28]
 8006c2c:	9307      	strlt	r3, [sp, #28]
 8006c2e:	bfb8      	it	lt
 8006c30:	9204      	strlt	r2, [sp, #16]
 8006c32:	7823      	ldrb	r3, [r4, #0]
 8006c34:	2b2e      	cmp	r3, #46	; 0x2e
 8006c36:	d10c      	bne.n	8006c52 <_vfiprintf_r+0x176>
 8006c38:	7863      	ldrb	r3, [r4, #1]
 8006c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c3c:	d135      	bne.n	8006caa <_vfiprintf_r+0x1ce>
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	3402      	adds	r4, #2
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	9203      	str	r2, [sp, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bfb8      	it	lt
 8006c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d38 <_vfiprintf_r+0x25c>
 8006c56:	2203      	movs	r2, #3
 8006c58:	4650      	mov	r0, sl
 8006c5a:	7821      	ldrb	r1, [r4, #0]
 8006c5c:	f7fe fa68 	bl	8005130 <memchr>
 8006c60:	b140      	cbz	r0, 8006c74 <_vfiprintf_r+0x198>
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	eba0 000a 	sub.w	r0, r0, sl
 8006c68:	fa03 f000 	lsl.w	r0, r3, r0
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	3401      	adds	r4, #1
 8006c70:	4303      	orrs	r3, r0
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c78:	2206      	movs	r2, #6
 8006c7a:	482c      	ldr	r0, [pc, #176]	; (8006d2c <_vfiprintf_r+0x250>)
 8006c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c80:	f7fe fa56 	bl	8005130 <memchr>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d03f      	beq.n	8006d08 <_vfiprintf_r+0x22c>
 8006c88:	4b29      	ldr	r3, [pc, #164]	; (8006d30 <_vfiprintf_r+0x254>)
 8006c8a:	bb1b      	cbnz	r3, 8006cd4 <_vfiprintf_r+0x1f8>
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	3307      	adds	r3, #7
 8006c90:	f023 0307 	bic.w	r3, r3, #7
 8006c94:	3308      	adds	r3, #8
 8006c96:	9303      	str	r3, [sp, #12]
 8006c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9a:	443b      	add	r3, r7
 8006c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9e:	e767      	b.n	8006b70 <_vfiprintf_r+0x94>
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca8:	e7a5      	b.n	8006bf6 <_vfiprintf_r+0x11a>
 8006caa:	2300      	movs	r3, #0
 8006cac:	f04f 0c0a 	mov.w	ip, #10
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	3401      	adds	r4, #1
 8006cb4:	9305      	str	r3, [sp, #20]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cbc:	3a30      	subs	r2, #48	; 0x30
 8006cbe:	2a09      	cmp	r2, #9
 8006cc0:	d903      	bls.n	8006cca <_vfiprintf_r+0x1ee>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0c5      	beq.n	8006c52 <_vfiprintf_r+0x176>
 8006cc6:	9105      	str	r1, [sp, #20]
 8006cc8:	e7c3      	b.n	8006c52 <_vfiprintf_r+0x176>
 8006cca:	4604      	mov	r4, r0
 8006ccc:	2301      	movs	r3, #1
 8006cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cd2:	e7f0      	b.n	8006cb6 <_vfiprintf_r+0x1da>
 8006cd4:	ab03      	add	r3, sp, #12
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4630      	mov	r0, r6
 8006cdc:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <_vfiprintf_r+0x258>)
 8006cde:	a904      	add	r1, sp, #16
 8006ce0:	f7fc ff16 	bl	8003b10 <_printf_float>
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	1c78      	adds	r0, r7, #1
 8006ce8:	d1d6      	bne.n	8006c98 <_vfiprintf_r+0x1bc>
 8006cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cec:	07d9      	lsls	r1, r3, #31
 8006cee:	d405      	bmi.n	8006cfc <_vfiprintf_r+0x220>
 8006cf0:	89ab      	ldrh	r3, [r5, #12]
 8006cf2:	059a      	lsls	r2, r3, #22
 8006cf4:	d402      	bmi.n	8006cfc <_vfiprintf_r+0x220>
 8006cf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cf8:	f7ff fe69 	bl	80069ce <__retarget_lock_release_recursive>
 8006cfc:	89ab      	ldrh	r3, [r5, #12]
 8006cfe:	065b      	lsls	r3, r3, #25
 8006d00:	f53f af12 	bmi.w	8006b28 <_vfiprintf_r+0x4c>
 8006d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d06:	e711      	b.n	8006b2c <_vfiprintf_r+0x50>
 8006d08:	ab03      	add	r3, sp, #12
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	462a      	mov	r2, r5
 8006d0e:	4630      	mov	r0, r6
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <_vfiprintf_r+0x258>)
 8006d12:	a904      	add	r1, sp, #16
 8006d14:	f7fd f998 	bl	8004048 <_printf_i>
 8006d18:	e7e4      	b.n	8006ce4 <_vfiprintf_r+0x208>
 8006d1a:	bf00      	nop
 8006d1c:	080074c8 	.word	0x080074c8
 8006d20:	080074e8 	.word	0x080074e8
 8006d24:	080074a8 	.word	0x080074a8
 8006d28:	0800733c 	.word	0x0800733c
 8006d2c:	08007346 	.word	0x08007346
 8006d30:	08003b11 	.word	0x08003b11
 8006d34:	08006ab7 	.word	0x08006ab7
 8006d38:	08007342 	.word	0x08007342

08006d3c <__swbuf_r>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	460e      	mov	r6, r1
 8006d40:	4614      	mov	r4, r2
 8006d42:	4605      	mov	r5, r0
 8006d44:	b118      	cbz	r0, 8006d4e <__swbuf_r+0x12>
 8006d46:	6983      	ldr	r3, [r0, #24]
 8006d48:	b90b      	cbnz	r3, 8006d4e <__swbuf_r+0x12>
 8006d4a:	f7ff fd8f 	bl	800686c <__sinit>
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <__swbuf_r+0x98>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d12b      	bne.n	8006dac <__swbuf_r+0x70>
 8006d54:	686c      	ldr	r4, [r5, #4]
 8006d56:	69a3      	ldr	r3, [r4, #24]
 8006d58:	60a3      	str	r3, [r4, #8]
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	071a      	lsls	r2, r3, #28
 8006d5e:	d52f      	bpl.n	8006dc0 <__swbuf_r+0x84>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	b36b      	cbz	r3, 8006dc0 <__swbuf_r+0x84>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	b2f6      	uxtb	r6, r6
 8006d6a:	1ac0      	subs	r0, r0, r3
 8006d6c:	6963      	ldr	r3, [r4, #20]
 8006d6e:	4637      	mov	r7, r6
 8006d70:	4283      	cmp	r3, r0
 8006d72:	dc04      	bgt.n	8006d7e <__swbuf_r+0x42>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7ff fce4 	bl	8006744 <_fflush_r>
 8006d7c:	bb30      	cbnz	r0, 8006dcc <__swbuf_r+0x90>
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	3001      	adds	r0, #1
 8006d82:	3b01      	subs	r3, #1
 8006d84:	60a3      	str	r3, [r4, #8]
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	701e      	strb	r6, [r3, #0]
 8006d8e:	6963      	ldr	r3, [r4, #20]
 8006d90:	4283      	cmp	r3, r0
 8006d92:	d004      	beq.n	8006d9e <__swbuf_r+0x62>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	07db      	lsls	r3, r3, #31
 8006d98:	d506      	bpl.n	8006da8 <__swbuf_r+0x6c>
 8006d9a:	2e0a      	cmp	r6, #10
 8006d9c:	d104      	bne.n	8006da8 <__swbuf_r+0x6c>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4628      	mov	r0, r5
 8006da2:	f7ff fccf 	bl	8006744 <_fflush_r>
 8006da6:	b988      	cbnz	r0, 8006dcc <__swbuf_r+0x90>
 8006da8:	4638      	mov	r0, r7
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <__swbuf_r+0x9c>)
 8006dae:	429c      	cmp	r4, r3
 8006db0:	d101      	bne.n	8006db6 <__swbuf_r+0x7a>
 8006db2:	68ac      	ldr	r4, [r5, #8]
 8006db4:	e7cf      	b.n	8006d56 <__swbuf_r+0x1a>
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <__swbuf_r+0xa0>)
 8006db8:	429c      	cmp	r4, r3
 8006dba:	bf08      	it	eq
 8006dbc:	68ec      	ldreq	r4, [r5, #12]
 8006dbe:	e7ca      	b.n	8006d56 <__swbuf_r+0x1a>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 f81a 	bl	8006dfc <__swsetup_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d0cb      	beq.n	8006d64 <__swbuf_r+0x28>
 8006dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd0:	e7ea      	b.n	8006da8 <__swbuf_r+0x6c>
 8006dd2:	bf00      	nop
 8006dd4:	080074c8 	.word	0x080074c8
 8006dd8:	080074e8 	.word	0x080074e8
 8006ddc:	080074a8 	.word	0x080074a8

08006de0 <__ascii_wctomb>:
 8006de0:	4603      	mov	r3, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	b141      	cbz	r1, 8006df8 <__ascii_wctomb+0x18>
 8006de6:	2aff      	cmp	r2, #255	; 0xff
 8006de8:	d904      	bls.n	8006df4 <__ascii_wctomb+0x14>
 8006dea:	228a      	movs	r2, #138	; 0x8a
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	4770      	bx	lr
 8006df4:	2001      	movs	r0, #1
 8006df6:	700a      	strb	r2, [r1, #0]
 8006df8:	4770      	bx	lr
	...

08006dfc <__swsetup_r>:
 8006dfc:	4b32      	ldr	r3, [pc, #200]	; (8006ec8 <__swsetup_r+0xcc>)
 8006dfe:	b570      	push	{r4, r5, r6, lr}
 8006e00:	681d      	ldr	r5, [r3, #0]
 8006e02:	4606      	mov	r6, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	b125      	cbz	r5, 8006e12 <__swsetup_r+0x16>
 8006e08:	69ab      	ldr	r3, [r5, #24]
 8006e0a:	b913      	cbnz	r3, 8006e12 <__swsetup_r+0x16>
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f7ff fd2d 	bl	800686c <__sinit>
 8006e12:	4b2e      	ldr	r3, [pc, #184]	; (8006ecc <__swsetup_r+0xd0>)
 8006e14:	429c      	cmp	r4, r3
 8006e16:	d10f      	bne.n	8006e38 <__swsetup_r+0x3c>
 8006e18:	686c      	ldr	r4, [r5, #4]
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e20:	0719      	lsls	r1, r3, #28
 8006e22:	d42c      	bmi.n	8006e7e <__swsetup_r+0x82>
 8006e24:	06dd      	lsls	r5, r3, #27
 8006e26:	d411      	bmi.n	8006e4c <__swsetup_r+0x50>
 8006e28:	2309      	movs	r3, #9
 8006e2a:	6033      	str	r3, [r6, #0]
 8006e2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	e03e      	b.n	8006eb6 <__swsetup_r+0xba>
 8006e38:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <__swsetup_r+0xd4>)
 8006e3a:	429c      	cmp	r4, r3
 8006e3c:	d101      	bne.n	8006e42 <__swsetup_r+0x46>
 8006e3e:	68ac      	ldr	r4, [r5, #8]
 8006e40:	e7eb      	b.n	8006e1a <__swsetup_r+0x1e>
 8006e42:	4b24      	ldr	r3, [pc, #144]	; (8006ed4 <__swsetup_r+0xd8>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	bf08      	it	eq
 8006e48:	68ec      	ldreq	r4, [r5, #12]
 8006e4a:	e7e6      	b.n	8006e1a <__swsetup_r+0x1e>
 8006e4c:	0758      	lsls	r0, r3, #29
 8006e4e:	d512      	bpl.n	8006e76 <__swsetup_r+0x7a>
 8006e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e52:	b141      	cbz	r1, 8006e66 <__swsetup_r+0x6a>
 8006e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e58:	4299      	cmp	r1, r3
 8006e5a:	d002      	beq.n	8006e62 <__swsetup_r+0x66>
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7fe fd13 	bl	8005888 <_free_r>
 8006e62:	2300      	movs	r3, #0
 8006e64:	6363      	str	r3, [r4, #52]	; 0x34
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	f043 0308 	orr.w	r3, r3, #8
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	b94b      	cbnz	r3, 8006e96 <__swsetup_r+0x9a>
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8c:	d003      	beq.n	8006e96 <__swsetup_r+0x9a>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4630      	mov	r0, r6
 8006e92:	f000 f84d 	bl	8006f30 <__smakebuf_r>
 8006e96:	89a0      	ldrh	r0, [r4, #12]
 8006e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e9c:	f010 0301 	ands.w	r3, r0, #1
 8006ea0:	d00a      	beq.n	8006eb8 <__swsetup_r+0xbc>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60a3      	str	r3, [r4, #8]
 8006ea6:	6963      	ldr	r3, [r4, #20]
 8006ea8:	425b      	negs	r3, r3
 8006eaa:	61a3      	str	r3, [r4, #24]
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	b943      	cbnz	r3, 8006ec2 <__swsetup_r+0xc6>
 8006eb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eb4:	d1ba      	bne.n	8006e2c <__swsetup_r+0x30>
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	0781      	lsls	r1, r0, #30
 8006eba:	bf58      	it	pl
 8006ebc:	6963      	ldrpl	r3, [r4, #20]
 8006ebe:	60a3      	str	r3, [r4, #8]
 8006ec0:	e7f4      	b.n	8006eac <__swsetup_r+0xb0>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e7f7      	b.n	8006eb6 <__swsetup_r+0xba>
 8006ec6:	bf00      	nop
 8006ec8:	20000010 	.word	0x20000010
 8006ecc:	080074c8 	.word	0x080074c8
 8006ed0:	080074e8 	.word	0x080074e8
 8006ed4:	080074a8 	.word	0x080074a8

08006ed8 <abort>:
 8006ed8:	2006      	movs	r0, #6
 8006eda:	b508      	push	{r3, lr}
 8006edc:	f000 f898 	bl	8007010 <raise>
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7f9 ff8a 	bl	8000dfa <_exit>

08006ee6 <__swhatbuf_r>:
 8006ee6:	b570      	push	{r4, r5, r6, lr}
 8006ee8:	460e      	mov	r6, r1
 8006eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eee:	4614      	mov	r4, r2
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	461d      	mov	r5, r3
 8006ef4:	b096      	sub	sp, #88	; 0x58
 8006ef6:	da07      	bge.n	8006f08 <__swhatbuf_r+0x22>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	89b3      	ldrh	r3, [r6, #12]
 8006efe:	061a      	lsls	r2, r3, #24
 8006f00:	d410      	bmi.n	8006f24 <__swhatbuf_r+0x3e>
 8006f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f06:	e00e      	b.n	8006f26 <__swhatbuf_r+0x40>
 8006f08:	466a      	mov	r2, sp
 8006f0a:	f000 f89d 	bl	8007048 <_fstat_r>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	dbf2      	blt.n	8006ef8 <__swhatbuf_r+0x12>
 8006f12:	9a01      	ldr	r2, [sp, #4]
 8006f14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f1c:	425a      	negs	r2, r3
 8006f1e:	415a      	adcs	r2, r3
 8006f20:	602a      	str	r2, [r5, #0]
 8006f22:	e7ee      	b.n	8006f02 <__swhatbuf_r+0x1c>
 8006f24:	2340      	movs	r3, #64	; 0x40
 8006f26:	2000      	movs	r0, #0
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	b016      	add	sp, #88	; 0x58
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f30 <__smakebuf_r>:
 8006f30:	898b      	ldrh	r3, [r1, #12]
 8006f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f34:	079d      	lsls	r5, r3, #30
 8006f36:	4606      	mov	r6, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	d507      	bpl.n	8006f4c <__smakebuf_r+0x1c>
 8006f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	2301      	movs	r3, #1
 8006f46:	6163      	str	r3, [r4, #20]
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	466a      	mov	r2, sp
 8006f4e:	ab01      	add	r3, sp, #4
 8006f50:	f7ff ffc9 	bl	8006ee6 <__swhatbuf_r>
 8006f54:	9900      	ldr	r1, [sp, #0]
 8006f56:	4605      	mov	r5, r0
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f7fe fce1 	bl	8005920 <_malloc_r>
 8006f5e:	b948      	cbnz	r0, 8006f74 <__smakebuf_r+0x44>
 8006f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f64:	059a      	lsls	r2, r3, #22
 8006f66:	d4ef      	bmi.n	8006f48 <__smakebuf_r+0x18>
 8006f68:	f023 0303 	bic.w	r3, r3, #3
 8006f6c:	f043 0302 	orr.w	r3, r3, #2
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	e7e3      	b.n	8006f3c <__smakebuf_r+0xc>
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <__smakebuf_r+0x7c>)
 8006f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	6020      	str	r0, [r4, #0]
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	9b00      	ldr	r3, [sp, #0]
 8006f84:	6120      	str	r0, [r4, #16]
 8006f86:	6163      	str	r3, [r4, #20]
 8006f88:	9b01      	ldr	r3, [sp, #4]
 8006f8a:	b15b      	cbz	r3, 8006fa4 <__smakebuf_r+0x74>
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f92:	f000 f86b 	bl	800706c <_isatty_r>
 8006f96:	b128      	cbz	r0, 8006fa4 <__smakebuf_r+0x74>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	89a0      	ldrh	r0, [r4, #12]
 8006fa6:	4305      	orrs	r5, r0
 8006fa8:	81a5      	strh	r5, [r4, #12]
 8006faa:	e7cd      	b.n	8006f48 <__smakebuf_r+0x18>
 8006fac:	08006805 	.word	0x08006805

08006fb0 <_malloc_usable_size_r>:
 8006fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb4:	1f18      	subs	r0, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bfbc      	itt	lt
 8006fba:	580b      	ldrlt	r3, [r1, r0]
 8006fbc:	18c0      	addlt	r0, r0, r3
 8006fbe:	4770      	bx	lr

08006fc0 <_raise_r>:
 8006fc0:	291f      	cmp	r1, #31
 8006fc2:	b538      	push	{r3, r4, r5, lr}
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	d904      	bls.n	8006fd4 <_raise_r+0x14>
 8006fca:	2316      	movs	r3, #22
 8006fcc:	6003      	str	r3, [r0, #0]
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fd6:	b112      	cbz	r2, 8006fde <_raise_r+0x1e>
 8006fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fdc:	b94b      	cbnz	r3, 8006ff2 <_raise_r+0x32>
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 f830 	bl	8007044 <_getpid_r>
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	4620      	mov	r0, r4
 8006fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fee:	f000 b817 	b.w	8007020 <_kill_r>
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d00a      	beq.n	800700c <_raise_r+0x4c>
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	d103      	bne.n	8007002 <_raise_r+0x42>
 8006ffa:	2316      	movs	r3, #22
 8006ffc:	6003      	str	r3, [r0, #0]
 8006ffe:	2001      	movs	r0, #1
 8007000:	e7e7      	b.n	8006fd2 <_raise_r+0x12>
 8007002:	2400      	movs	r4, #0
 8007004:	4628      	mov	r0, r5
 8007006:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800700a:	4798      	blx	r3
 800700c:	2000      	movs	r0, #0
 800700e:	e7e0      	b.n	8006fd2 <_raise_r+0x12>

08007010 <raise>:
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <raise+0xc>)
 8007012:	4601      	mov	r1, r0
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f7ff bfd3 	b.w	8006fc0 <_raise_r>
 800701a:	bf00      	nop
 800701c:	20000010 	.word	0x20000010

08007020 <_kill_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	2300      	movs	r3, #0
 8007024:	4d06      	ldr	r5, [pc, #24]	; (8007040 <_kill_r+0x20>)
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f7f9 fed4 	bl	8000dda <_kill>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d102      	bne.n	800703c <_kill_r+0x1c>
 8007036:	682b      	ldr	r3, [r5, #0]
 8007038:	b103      	cbz	r3, 800703c <_kill_r+0x1c>
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	bf00      	nop
 8007040:	2000031c 	.word	0x2000031c

08007044 <_getpid_r>:
 8007044:	f7f9 bec2 	b.w	8000dcc <_getpid>

08007048 <_fstat_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	2300      	movs	r3, #0
 800704c:	4d06      	ldr	r5, [pc, #24]	; (8007068 <_fstat_r+0x20>)
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	4611      	mov	r1, r2
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	f7f9 ff1e 	bl	8000e96 <_fstat>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	d102      	bne.n	8007064 <_fstat_r+0x1c>
 800705e:	682b      	ldr	r3, [r5, #0]
 8007060:	b103      	cbz	r3, 8007064 <_fstat_r+0x1c>
 8007062:	6023      	str	r3, [r4, #0]
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	bf00      	nop
 8007068:	2000031c 	.word	0x2000031c

0800706c <_isatty_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	2300      	movs	r3, #0
 8007070:	4d05      	ldr	r5, [pc, #20]	; (8007088 <_isatty_r+0x1c>)
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	f7f9 ff1c 	bl	8000eb4 <_isatty>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_isatty_r+0x1a>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_isatty_r+0x1a>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	2000031c 	.word	0x2000031c

0800708c <_init>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	bf00      	nop
 8007090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007092:	bc08      	pop	{r3}
 8007094:	469e      	mov	lr, r3
 8007096:	4770      	bx	lr

08007098 <_fini>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr
