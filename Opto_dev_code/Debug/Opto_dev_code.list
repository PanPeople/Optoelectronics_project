
Opto_dev_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007118  08007118  00017118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075cc  080075cc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080075cc  080075cc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075cc  080075cc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080075d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  200001e8  080077bc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080077bc  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cebc  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225e  00000000  00000000  0002d0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0002f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018934  00000000  00000000  00030c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcd0  00000000  00000000  0004955c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be49  00000000  00000000  0005722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000491c  00000000  00000000  000e30c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080070fc 	.word	0x080070fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080070fc 	.word	0x080070fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <MX_GPIO_Init+0xd4>)
 8000b04:	f000 ffc4 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_GPIO_Init+0xd8>)
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_GPIO_Init+0xdc>)
 8000b1e:	f000 fe33 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000b22:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <MX_GPIO_Init+0xd4>)
 8000b3c:	f000 fe24 	bl	8001788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f000 fd38 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f000 fd51 	bl	80015f2 <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	10110000 	.word	0x10110000
 8000b64:	40011000 	.word	0x40011000

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fbc8 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f832 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f7ff ff88 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b78:	f000 fb34 	bl	80011e4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b7c:	f000 fa40 	bl	8001000 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b80:	f000 f86b 	bl	8000c5a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b84:	2100      	movs	r1, #0
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <main+0x58>)
 8000b88:	f001 fc7e 	bl	8002488 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, uart_rx, 3);
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <main+0x5c>)
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <main+0x60>)
 8000b92:	f002 facf 	bl	8003134 <HAL_UART_Receive_IT>



  size = sprintf(message, "\nSTM32 is running...\n\r");
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <main+0x64>)
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <main+0x68>)
 8000b9a:	f003 fbb5 	bl	8004308 <siprintf>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <main+0x6c>)
 8000ba4:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)message, size, 100);
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <main+0x6c>)
 8000ba8:	881a      	ldrh	r2, [r3, #0]
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <main+0x68>)
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <main+0x60>)
 8000bb0:	f002 fa2e 	bl	8003010 <HAL_UART_Transmit>
//
//	  if(dupa>254){
//		  dupa =10;
//	  }

	  HAL_Delay(500);
 8000bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb8:	f000 fc04 	bl	80013c4 <HAL_Delay>
 8000bbc:	e7fa      	b.n	8000bb4 <main+0x4c>
 8000bbe:	bf00      	nop
 8000bc0:	20000294 	.word	0x20000294
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	200002dc 	.word	0x200002dc
 8000bcc:	08007118 	.word	0x08007118
 8000bd0:	20000214 	.word	0x20000214
 8000bd4:	20000204 	.word	0x20000204

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	; 0x40
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 ff26 	bl	8003a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2310      	movs	r3, #16
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c0e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 ff73 	bl	8001b04 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c24:	f000 f8b4 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f9de 	bl	8002004 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c4e:	f000 f89f 	bl	8000d90 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2026      	movs	r0, #38	; 0x26
 8000c64:	f000 fca9 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c68:	2026      	movs	r0, #38	; 0x26
 8000c6a:	f000 fcc2 	bl	80015f2 <HAL_NVIC_EnableIRQ>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	if (uart_rx[0] == 101 && uart_rx[1] == 110){
 8000c7c:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <HAL_UART_RxCpltCallback+0xec>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b65      	cmp	r3, #101	; 0x65
 8000c82:	d137      	bne.n	8000cf4 <HAL_UART_RxCpltCallback+0x80>
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <HAL_UART_RxCpltCallback+0xec>)
 8000c86:	785b      	ldrb	r3, [r3, #1]
 8000c88:	2b6e      	cmp	r3, #110	; 0x6e
 8000c8a:	d133      	bne.n	8000cf4 <HAL_UART_RxCpltCallback+0x80>
		if(uart_rx[2] == 49){
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_UART_RxCpltCallback+0xec>)
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	2b31      	cmp	r3, #49	; 0x31
 8000c92:	d115      	bne.n	8000cc0 <HAL_UART_RxCpltCallback+0x4c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9a:	4832      	ldr	r0, [pc, #200]	; (8000d64 <HAL_UART_RxCpltCallback+0xf0>)
 8000c9c:	f000 fef8 	bl	8001a90 <HAL_GPIO_WritePin>
			size = sprintf(message, "\n\r___________\n\rON\n");
 8000ca0:	4931      	ldr	r1, [pc, #196]	; (8000d68 <HAL_UART_RxCpltCallback+0xf4>)
 8000ca2:	4832      	ldr	r0, [pc, #200]	; (8000d6c <HAL_UART_RxCpltCallback+0xf8>)
 8000ca4:	f003 fb30 	bl	8004308 <siprintf>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_UART_RxCpltCallback+0xfc>)
 8000cae:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)message, size, 100);
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_UART_RxCpltCallback+0xfc>)
 8000cb2:	881a      	ldrh	r2, [r3, #0]
 8000cb4:	2364      	movs	r3, #100	; 0x64
 8000cb6:	492d      	ldr	r1, [pc, #180]	; (8000d6c <HAL_UART_RxCpltCallback+0xf8>)
 8000cb8:	482e      	ldr	r0, [pc, #184]	; (8000d74 <HAL_UART_RxCpltCallback+0x100>)
 8000cba:	f002 f9a9 	bl	8003010 <HAL_UART_Transmit>
		if(uart_rx[2] == 49){
 8000cbe:	e044      	b.n	8000d4a <HAL_UART_RxCpltCallback+0xd6>
		}
		else if (uart_rx[2] == 48){
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <HAL_UART_RxCpltCallback+0xec>)
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	2b30      	cmp	r3, #48	; 0x30
 8000cc6:	d140      	bne.n	8000d4a <HAL_UART_RxCpltCallback+0xd6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cce:	4825      	ldr	r0, [pc, #148]	; (8000d64 <HAL_UART_RxCpltCallback+0xf0>)
 8000cd0:	f000 fede 	bl	8001a90 <HAL_GPIO_WritePin>
			size = sprintf(message, "\n\r___________\n\rOFF\n");
 8000cd4:	4928      	ldr	r1, [pc, #160]	; (8000d78 <HAL_UART_RxCpltCallback+0x104>)
 8000cd6:	4825      	ldr	r0, [pc, #148]	; (8000d6c <HAL_UART_RxCpltCallback+0xf8>)
 8000cd8:	f003 fb16 	bl	8004308 <siprintf>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_UART_RxCpltCallback+0xfc>)
 8000ce2:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)message, size, 100);
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_UART_RxCpltCallback+0xfc>)
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	2364      	movs	r3, #100	; 0x64
 8000cea:	4920      	ldr	r1, [pc, #128]	; (8000d6c <HAL_UART_RxCpltCallback+0xf8>)
 8000cec:	4821      	ldr	r0, [pc, #132]	; (8000d74 <HAL_UART_RxCpltCallback+0x100>)
 8000cee:	f002 f98f 	bl	8003010 <HAL_UART_Transmit>
		if(uart_rx[2] == 49){
 8000cf2:	e02a      	b.n	8000d4a <HAL_UART_RxCpltCallback+0xd6>
	}
	else{



	sscanf(uart_rx, "%d", &x); // Using sscanf
 8000cf4:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <HAL_UART_RxCpltCallback+0x108>)
 8000cf6:	4922      	ldr	r1, [pc, #136]	; (8000d80 <HAL_UART_RxCpltCallback+0x10c>)
 8000cf8:	4819      	ldr	r0, [pc, #100]	; (8000d60 <HAL_UART_RxCpltCallback+0xec>)
 8000cfa:	f003 fb25 	bl	8004348 <siscanf>
	//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
	//	size = sprintf(message, "\n\r___________\n\rON/OFF\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*)message, size, 100);
	//}
	//else{
		if(x > 254){
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_UART_RxCpltCallback+0x108>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	2bfe      	cmp	r3, #254	; 0xfe
 8000d04:	d902      	bls.n	8000d0c <HAL_UART_RxCpltCallback+0x98>
			x =254;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_UART_RxCpltCallback+0x108>)
 8000d08:	22fe      	movs	r2, #254	; 0xfe
 8000d0a:	801a      	strh	r2, [r3, #0]
		}


		//dupa = x*300/254 -24;
		dupa = x +25;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_UART_RxCpltCallback+0x108>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	3319      	adds	r3, #25
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <HAL_UART_RxCpltCallback+0x110>)
 8000d14:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, x);
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_UART_RxCpltCallback+0x108>)
 8000d18:	881a      	ldrh	r2, [r3, #0]
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_UART_RxCpltCallback+0x114>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34

		size = sprintf(message, "\n\r___________\n\rreceive value: %d \n\rcurrent value: %d mA\n", x,dupa);
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_UART_RxCpltCallback+0x108>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_UART_RxCpltCallback+0x110>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4918      	ldr	r1, [pc, #96]	; (8000d8c <HAL_UART_RxCpltCallback+0x118>)
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <HAL_UART_RxCpltCallback+0xf8>)
 8000d2e:	f003 faeb 	bl	8004308 <siprintf>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_RxCpltCallback+0xfc>)
 8000d38:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)message, size, 100);
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_UART_RxCpltCallback+0xfc>)
 8000d3c:	881a      	ldrh	r2, [r3, #0]
 8000d3e:	2364      	movs	r3, #100	; 0x64
 8000d40:	490a      	ldr	r1, [pc, #40]	; (8000d6c <HAL_UART_RxCpltCallback+0xf8>)
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <HAL_UART_RxCpltCallback+0x100>)
 8000d44:	f002 f964 	bl	8003010 <HAL_UART_Transmit>
 8000d48:	e000      	b.n	8000d4c <HAL_UART_RxCpltCallback+0xd8>
		if(uart_rx[2] == 49){
 8000d4a:	bf00      	nop

	}



    HAL_UART_Receive_IT(&huart2, uart_rx, 3);
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4904      	ldr	r1, [pc, #16]	; (8000d60 <HAL_UART_RxCpltCallback+0xec>)
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <HAL_UART_RxCpltCallback+0x100>)
 8000d52:	f002 f9ef 	bl	8003134 <HAL_UART_Receive_IT>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000000 	.word	0x20000000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	08007130 	.word	0x08007130
 8000d6c:	20000214 	.word	0x20000214
 8000d70:	20000204 	.word	0x20000204
 8000d74:	200002dc 	.word	0x200002dc
 8000d78:	08007144 	.word	0x08007144
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	08007158 	.word	0x08007158
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000294 	.word	0x20000294
 8000d8c:	0800715c 	.word	0x0800715c

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_MspInit+0x60>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_MspInit+0x60>)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 faa1 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <USART2_IRQHandler+0x10>)
 8000e56:	f002 f99d 	bl	8003194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200002dc 	.word	0x200002dc

08000e64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e6c:	f000 fe28 	bl	8001ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	return 1;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <_kill>:

int _kill(int pid, int sig)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e8c:	f002 fdaa 	bl	80039e4 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2216      	movs	r2, #22
 8000e94:	601a      	str	r2, [r3, #0]
	return -1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_exit>:

void _exit (int status)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffe7 	bl	8000e82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eb4:	e7fe      	b.n	8000eb4 <_exit+0x12>

08000eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e00a      	b.n	8000ede <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec8:	f3af 8000 	nop.w
 8000ecc:	4601      	mov	r1, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	60ba      	str	r2, [r7, #8]
 8000ed4:	b2ca      	uxtb	r2, r1
 8000ed6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbf0      	blt.n	8000ec8 <_read+0x12>
	}

return len;
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e009      	b.n	8000f16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbf1      	blt.n	8000f02 <_write+0x12>
	}
	return len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_close>:

int _close(int file)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	return -1;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <_isatty>:

int _isatty(int file)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	return 1;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d207      	bcs.n	8000fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb8:	f002 fd14 	bl	80039e4 <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20005000 	.word	0x20005000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	20000208 	.word	0x20000208
 8000ff0:	20000338 	.word	0x20000338

08000ff4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b096      	sub	sp, #88	; 0x58
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2220      	movs	r2, #32
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fcfd 	bl	8003a38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800103e:	4b3e      	ldr	r3, [pc, #248]	; (8001138 <MX_TIM1_Init+0x138>)
 8001040:	4a3e      	ldr	r2, [pc, #248]	; (800113c <MX_TIM1_Init+0x13c>)
 8001042:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <MX_TIM1_Init+0x138>)
 8001046:	220b      	movs	r2, #11
 8001048:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <MX_TIM1_Init+0x138>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 254;
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <MX_TIM1_Init+0x138>)
 8001052:	22fe      	movs	r2, #254	; 0xfe
 8001054:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b38      	ldr	r3, [pc, #224]	; (8001138 <MX_TIM1_Init+0x138>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <MX_TIM1_Init+0x138>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MX_TIM1_Init+0x138>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001068:	4833      	ldr	r0, [pc, #204]	; (8001138 <MX_TIM1_Init+0x138>)
 800106a:	f001 f965 	bl	8002338 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001074:	f7ff fe8c 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001082:	4619      	mov	r1, r3
 8001084:	482c      	ldr	r0, [pc, #176]	; (8001138 <MX_TIM1_Init+0x138>)
 8001086:	f001 fb5f 	bl	8002748 <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001090:	f7ff fe7e 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001094:	4828      	ldr	r0, [pc, #160]	; (8001138 <MX_TIM1_Init+0x138>)
 8001096:	f001 f99e 	bl	80023d6 <HAL_TIM_PWM_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010a0:	f7ff fe76 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b0:	4619      	mov	r1, r3
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_TIM1_Init+0x138>)
 80010b4:	f001 feb0 	bl	8002e18 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010be:	f7ff fe67 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	; 0x60
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_TIM1_Init+0x138>)
 80010e8:	f001 fa70 	bl	80025cc <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010f2:	f7ff fe4d 	bl	8000d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM1_Init+0x138>)
 800111a:	f001 fedb 	bl	8002ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001124:	f7ff fe34 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM1_Init+0x138>)
 800112a:	f000 f827 	bl	800117c <HAL_TIM_MspPostInit>

}
 800112e:	bf00      	nop
 8001130:	3758      	adds	r7, #88	; 0x58
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000294 	.word	0x20000294
 800113c:	40012c00 	.word	0x40012c00

08001140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_TIM_Base_MspInit+0x34>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10b      	bne.n	800116a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_TIM_Base_MspInit+0x38>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_TIM_Base_MspInit+0x38>)
 8001158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_TIM_Base_MspInit+0x38>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40012c00 	.word	0x40012c00
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_TIM_MspPostInit+0x5c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d118      	bne.n	80011ce <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_TIM_MspPostInit+0x60>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_TIM_MspPostInit+0x60>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_TIM_MspPostInit+0x60>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_TIM_MspPostInit+0x64>)
 80011ca:	f000 fadd 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40012c00 	.word	0x40012c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010800 	.word	0x40010800

080011e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f001 feab 	bl	8002f76 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f7ff fdb3 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002dc 	.word	0x200002dc
 8001234:	40004400 	.word	0x40004400

08001238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x70>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d123      	bne.n	80012a0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x74>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_UART_MspInit+0x74>)
 800125e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001262:	61d3      	str	r3, [r2, #28]
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x74>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_UART_MspInit+0x74>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_UART_MspInit+0x74>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_UART_MspInit+0x74>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001288:	230c      	movs	r3, #12
 800128a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_UART_MspInit+0x78>)
 800129c:	f000 fa74 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010800 	.word	0x40010800

080012b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	; (80012f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012da:	f7ff fe8b 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f002 fb87 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e2:	f7ff fc41 	bl	8000b68 <main>
  bx lr
 80012e6:	4770      	bx	lr
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80012f0:	080075d4 	.word	0x080075d4
  ldr r2, =_sbss
 80012f4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80012f8:	20000334 	.word	0x20000334

080012fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_2_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_Init+0x28>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_Init+0x28>)
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f947 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff fd3e 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f95f 	bl	800160e <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f927 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000000c 	.word	0x2000000c
 8001384:	20000014 	.word	0x20000014
 8001388:	20000010 	.word	0x20000010

0800138c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_IncTick+0x1c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_IncTick+0x20>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <HAL_IncTick+0x20>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000014 	.word	0x20000014
 80013ac:	20000320 	.word	0x20000320

080013b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <HAL_GetTick+0x10>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000320 	.word	0x20000320

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff fff0 	bl	80013b0 <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffe0 	bl	80013b0 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000014 	.word	0x20000014

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4906      	ldr	r1, [pc, #24]	; (80014a4 <__NVIC_EnableIRQ+0x34>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff90 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff2d 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff42 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff90 	bl	80014fc <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5f 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff35 	bl	8001470 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001638:	2b02      	cmp	r3, #2
 800163a:	d008      	beq.n	800164e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2204      	movs	r2, #4
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e020      	b.n	8001690 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 020e 	bic.w	r2, r2, #14
 800165c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
	...

0800169c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d005      	beq.n	80016be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2204      	movs	r2, #4
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e051      	b.n	8001762 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020e 	bic.w	r2, r2, #14
 80016cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <HAL_DMA_Abort_IT+0xd0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d029      	beq.n	800173c <HAL_DMA_Abort_IT+0xa0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a20      	ldr	r2, [pc, #128]	; (8001770 <HAL_DMA_Abort_IT+0xd4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d022      	beq.n	8001738 <HAL_DMA_Abort_IT+0x9c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_DMA_Abort_IT+0xd8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d01a      	beq.n	8001732 <HAL_DMA_Abort_IT+0x96>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_DMA_Abort_IT+0xdc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d012      	beq.n	800172c <HAL_DMA_Abort_IT+0x90>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <HAL_DMA_Abort_IT+0xe0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00a      	beq.n	8001726 <HAL_DMA_Abort_IT+0x8a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_DMA_Abort_IT+0xe4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <HAL_DMA_Abort_IT+0x84>
 800171a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800171e:	e00e      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001724:	e00b      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172a:	e008      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	e005      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001736:	e002      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001738:	2310      	movs	r3, #16
 800173a:	e000      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 800173c:	2301      	movs	r3, #1
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_DMA_Abort_IT+0xe8>)
 8001740:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
    } 
  }
  return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c
 8001784:	40020000 	.word	0x40020000

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e169      	b.n	8001a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800179c:	2201      	movs	r2, #1
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 8158 	bne.w	8001a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a9a      	ldr	r2, [pc, #616]	; (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d05e      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017c4:	4a98      	ldr	r2, [pc, #608]	; (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d875      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ca:	4a98      	ldr	r2, [pc, #608]	; (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d058      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017d0:	4a96      	ldr	r2, [pc, #600]	; (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d86f      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017d6:	4a96      	ldr	r2, [pc, #600]	; (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d052      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017dc:	4a94      	ldr	r2, [pc, #592]	; (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d869      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017e2:	4a94      	ldr	r2, [pc, #592]	; (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d04c      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017e8:	4a92      	ldr	r2, [pc, #584]	; (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d863      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ee:	4a92      	ldr	r2, [pc, #584]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d046      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017f4:	4a90      	ldr	r2, [pc, #576]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d85d      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d82a      	bhi.n	8001854 <HAL_GPIO_Init+0xcc>
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d859      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <HAL_GPIO_Init+0x80>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001883 	.word	0x08001883
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800186f 	.word	0x0800186f
 8001814:	080018b1 	.word	0x080018b1
 8001818:	080018b7 	.word	0x080018b7
 800181c:	080018b7 	.word	0x080018b7
 8001820:	080018b7 	.word	0x080018b7
 8001824:	080018b7 	.word	0x080018b7
 8001828:	080018b7 	.word	0x080018b7
 800182c:	080018b7 	.word	0x080018b7
 8001830:	080018b7 	.word	0x080018b7
 8001834:	080018b7 	.word	0x080018b7
 8001838:	080018b7 	.word	0x080018b7
 800183c:	080018b7 	.word	0x080018b7
 8001840:	080018b7 	.word	0x080018b7
 8001844:	080018b7 	.word	0x080018b7
 8001848:	080018b7 	.word	0x080018b7
 800184c:	08001865 	.word	0x08001865
 8001850:	08001879 	.word	0x08001879
 8001854:	4a79      	ldr	r2, [pc, #484]	; (8001a3c <HAL_GPIO_Init+0x2b4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800185a:	e02c      	b.n	80018b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e029      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	3304      	adds	r3, #4
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e024      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	3308      	adds	r3, #8
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e01f      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	330c      	adds	r3, #12
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e01a      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800188a:	2304      	movs	r3, #4
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e013      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	611a      	str	r2, [r3, #16]
          break;
 80018a2:	e009      	b.n	80018b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	615a      	str	r2, [r3, #20]
          break;
 80018ae:	e003      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          break;
 80018b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d801      	bhi.n	80018c2 <HAL_GPIO_Init+0x13a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_Init+0x13e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3304      	adds	r3, #4
 80018c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d802      	bhi.n	80018d4 <HAL_GPIO_Init+0x14c>
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x152>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3b08      	subs	r3, #8
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	210f      	movs	r1, #15
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80b1 	beq.w	8001a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001920:	4a48      	ldr	r2, [pc, #288]	; (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <HAL_GPIO_Init+0x2c0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d013      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3f      	ldr	r2, [pc, #252]	; (8001a4c <HAL_GPIO_Init+0x2c4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00d      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <HAL_GPIO_Init+0x2c8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x1e4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <HAL_GPIO_Init+0x2cc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_GPIO_Init+0x1e0>
 8001964:	2303      	movs	r3, #3
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001968:	2304      	movs	r3, #4
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001974:	2300      	movs	r3, #0
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001986:	492f      	ldr	r1, [pc, #188]	; (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	492c      	ldr	r1, [pc, #176]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4928      	ldr	r1, [pc, #160]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4922      	ldr	r1, [pc, #136]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	491e      	ldr	r1, [pc, #120]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4918      	ldr	r1, [pc, #96]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4914      	ldr	r1, [pc, #80]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d021      	beq.n	8001a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
 8001a24:	e021      	b.n	8001a6a <HAL_GPIO_Init+0x2e2>
 8001a26:	bf00      	nop
 8001a28:	10320000 	.word	0x10320000
 8001a2c:	10310000 	.word	0x10310000
 8001a30:	10220000 	.word	0x10220000
 8001a34:	10210000 	.word	0x10210000
 8001a38:	10120000 	.word	0x10120000
 8001a3c:	10110000 	.word	0x10110000
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	40010c00 	.word	0x40010c00
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40011400 	.word	0x40011400
 8001a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_GPIO_Init+0x304>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <HAL_GPIO_Init+0x304>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f47f ae8e 	bne.w	800179c <HAL_GPIO_Init+0x14>
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	372c      	adds	r7, #44	; 0x2c
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aac:	e003      	b.n	8001ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f806 	bl	8001af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e26c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b30:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d112      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x12c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d168      	bne.n	8001c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e246      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x76>
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7f      	ldr	r2, [pc, #508]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xbc>
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a71      	ldr	r2, [pc, #452]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6a      	ldr	r2, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a67      	ldr	r2, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fbe6 	bl	80013b0 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fbe2 	bl	80013b0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1fa      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe4>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fbd2 	bl	80013b0 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fbce 	bl	80013b0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1e6      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x10c>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1ba      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4939      	ldr	r1, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e03a      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb87 	bl	80013b0 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb83 	bl	80013b0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e19b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb66 	bl	80013b0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb62 	bl	80013b0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e17a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03a      	beq.n	8001d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fb46 	bl	80013b0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb42 	bl	80013b0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e15a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f000 fad8 	bl	80022fc <RCC_Delay>
 8001d4c:	e01c      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fb2c 	bl	80013b0 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fb28 	bl	80013b0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d908      	bls.n	8001d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e140      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	42420000 	.word	0x42420000
 8001d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e9      	bne.n	8001d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a6 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b97      	ldr	r3, [pc, #604]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a93      	ldr	r2, [pc, #588]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fae9 	bl	80013b0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fae5 	bl	80013b0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0fd      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x334>
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a72      	ldr	r2, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x356>
 8001e40:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fa99 	bl	80013b0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fa95 	bl	80013b0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0ab      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x37e>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fa83 	bl	80013b0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fa7f 	bl	80013b0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e095      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8081 	beq.w	8001fee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d061      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d146      	bne.n	8001f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa53 	bl	80013b0 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fa4f 	bl	80013b0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e067      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f36:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	492d      	ldr	r1, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a19      	ldr	r1, [r3, #32]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fa23 	bl	80013b0 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fa1f 	bl	80013b0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e037      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46a>
 8001f8c:	e02f      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fa0c 	bl	80013b0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff fa08 	bl	80013b0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e020      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x498>
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e013      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42420060 	.word	0x42420060

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff f95c 	bl	80013b0 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff f958 	bl	80013b0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1cc>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f8ba 	bl	800132c <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	080071b4 	.word	0x080071b4
 80021d0:	2000000c 	.word	0x2000000c
 80021d4:	20000010 	.word	0x20000010

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b490      	push	{r4, r7}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e0:	1d3c      	adds	r4, r7, #4
 80021e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021e8:	f240 2301 	movw	r3, #513	; 0x201
 80021ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b04      	cmp	r3, #4
 8002210:	d002      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x40>
 8002212:	2b08      	cmp	r3, #8
 8002214:	d003      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x46>
 8002216:	e02d      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221a:	623b      	str	r3, [r7, #32]
      break;
 800221c:	e02d      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800222a:	4413      	add	r3, r2
 800222c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002230:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_RCC_GetSysClockFreq+0xb4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0c5b      	lsrs	r3, r3, #17
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224a:	4413      	add	r3, r2
 800224c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	fb02 f203 	mul.w	r2, r2, r3
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	e004      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	623b      	str	r3, [r7, #32]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	6a3b      	ldr	r3, [r7, #32]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bc90      	pop	{r4, r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	08007198 	.word	0x08007198
 800228c:	40021000 	.word	0x40021000
 8002290:	007a1200 	.word	0x007a1200
 8002294:	003d0900 	.word	0x003d0900

08002298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	2000000c 	.word	0x2000000c

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b0:	f7ff fff2 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	080071c4 	.word	0x080071c4

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d8:	f7ff ffde 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0adb      	lsrs	r3, r3, #11
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	080071c4 	.word	0x080071c4

080022fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <RCC_Delay+0x34>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <RCC_Delay+0x38>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0a5b      	lsrs	r3, r3, #9
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002318:	bf00      	nop
  }
  while (Delay --);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f9      	bne.n	8002318 <RCC_Delay+0x1c>
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	2000000c 	.word	0x2000000c
 8002334:	10624dd3 	.word	0x10624dd3

08002338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe feee 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 faaa 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e041      	b.n	800246c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f839 	bl	8002474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f000 fa5b 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
	...

08002488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_TIM_PWM_Start+0x24>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e022      	b.n	80024f2 <HAL_TIM_PWM_Start+0x6a>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d109      	bne.n	80024c6 <HAL_TIM_PWM_Start+0x3e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	e015      	b.n	80024f2 <HAL_TIM_PWM_Start+0x6a>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d109      	bne.n	80024e0 <HAL_TIM_PWM_Start+0x58>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e008      	b.n	80024f2 <HAL_TIM_PWM_Start+0x6a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e05e      	b.n	80025b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_TIM_PWM_Start+0x82>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002508:	e013      	b.n	8002532 <HAL_TIM_PWM_Start+0xaa>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d104      	bne.n	800251a <HAL_TIM_PWM_Start+0x92>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002518:	e00b      	b.n	8002532 <HAL_TIM_PWM_Start+0xaa>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d104      	bne.n	800252a <HAL_TIM_PWM_Start+0xa2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002528:	e003      	b.n	8002532 <HAL_TIM_PWM_Start+0xaa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fc48 	bl	8002dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_TIM_PWM_Start+0x138>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d107      	bne.n	800255a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_TIM_PWM_Start+0x138>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00e      	beq.n	8002582 <HAL_TIM_PWM_Start+0xfa>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d009      	beq.n	8002582 <HAL_TIM_PWM_Start+0xfa>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_TIM_PWM_Start+0x13c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_TIM_PWM_Start+0xfa>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_TIM_PWM_Start+0x140>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d010      	beq.n	80025b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a4:	e007      	b.n	80025b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800

080025cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0ac      	b.n	8002740 <HAL_TIM_PWM_ConfigChannel+0x174>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	f200 809f 	bhi.w	8002734 <HAL_TIM_PWM_ConfigChannel+0x168>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002631 	.word	0x08002631
 8002600:	08002735 	.word	0x08002735
 8002604:	08002735 	.word	0x08002735
 8002608:	08002735 	.word	0x08002735
 800260c:	08002671 	.word	0x08002671
 8002610:	08002735 	.word	0x08002735
 8002614:	08002735 	.word	0x08002735
 8002618:	08002735 	.word	0x08002735
 800261c:	080026b3 	.word	0x080026b3
 8002620:	08002735 	.word	0x08002735
 8002624:	08002735 	.word	0x08002735
 8002628:	08002735 	.word	0x08002735
 800262c:	080026f3 	.word	0x080026f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f9ac 	bl	8002994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	619a      	str	r2, [r3, #24]
      break;
 800266e:	e062      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f9f2 	bl	8002a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6999      	ldr	r1, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	021a      	lsls	r2, r3, #8
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]
      break;
 80026b0:	e041      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fa3b 	bl	8002b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0208 	orr.w	r2, r2, #8
 80026cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0204 	bic.w	r2, r2, #4
 80026dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69d9      	ldr	r1, [r3, #28]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	61da      	str	r2, [r3, #28]
      break;
 80026f0:	e021      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fa85 	bl	8002c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	61da      	str	r2, [r3, #28]
      break;
 8002732:	e000      	b.n	8002736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIM_ConfigClockSource+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e0b3      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x180>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002786:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d03e      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0xd0>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	f200 8087 	bhi.w	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a6:	f000 8085 	beq.w	80028b4 <HAL_TIM_ConfigClockSource+0x16c>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d87f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d01a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xa2>
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d87b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d050      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x116>
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d877      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d03c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xf6>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d873      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d058      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x136>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d86f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d064      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d86b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d060      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d867      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d05a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027e8:	e062      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f000 faca 	bl	8002d92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800280c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
      break;
 8002816:	e04e      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f000 fab3 	bl	8002d92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	609a      	str	r2, [r3, #8]
      break;
 800283c:	e03b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 fa2a 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2150      	movs	r1, #80	; 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fa81 	bl	8002d5e <TIM_ITRx_SetConfig>
      break;
 800285c:	e02b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fa48 	bl	8002d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2160      	movs	r1, #96	; 0x60
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fa71 	bl	8002d5e <TIM_ITRx_SetConfig>
      break;
 800287c:	e01b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 fa0a 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fa61 	bl	8002d5e <TIM_ITRx_SetConfig>
      break;
 800289c:	e00b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 fa58 	bl	8002d5e <TIM_ITRx_SetConfig>
        break;
 80028ae:	e002      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a29      	ldr	r2, [pc, #164]	; (8002988 <TIM_Base_SetConfig+0xb8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a26      	ldr	r2, [pc, #152]	; (800298c <TIM_Base_SetConfig+0xbc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0x30>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a25      	ldr	r2, [pc, #148]	; (8002990 <TIM_Base_SetConfig+0xc0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d108      	bne.n	8002912 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <TIM_Base_SetConfig+0xb8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00b      	beq.n	8002932 <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d007      	beq.n	8002932 <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <TIM_Base_SetConfig+0xbc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d003      	beq.n	8002932 <TIM_Base_SetConfig+0x62>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <TIM_Base_SetConfig+0xc0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d108      	bne.n	8002944 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <TIM_Base_SetConfig+0xb8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d103      	bne.n	8002978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	615a      	str	r2, [r3, #20]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800

08002994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0201 	bic.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 0302 	bic.w	r3, r3, #2
 80029dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <TIM_OC1_SetConfig+0xc8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10c      	bne.n	8002a0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f023 0308 	bic.w	r3, r3, #8
 80029f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f023 0304 	bic.w	r3, r3, #4
 8002a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <TIM_OC1_SetConfig+0xc8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d111      	bne.n	8002a36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00

08002a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0210 	bic.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0320 	bic.w	r3, r3, #32
 8002aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <TIM_OC2_SetConfig+0xd0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10d      	bne.n	8002adc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <TIM_OC2_SetConfig+0xd0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d113      	bne.n	8002b0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00

08002b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <TIM_OC3_SetConfig+0xd0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10d      	bne.n	8002bae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <TIM_OC3_SetConfig+0xd0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d113      	bne.n	8002bde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40012c00 	.word	0x40012c00

08002c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	031b      	lsls	r3, r3, #12
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <TIM_OC4_SetConfig+0x98>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d109      	bne.n	8002c7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	40012c00 	.word	0x40012c00

08002ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f023 0201 	bic.w	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 030a 	bic.w	r3, r3, #10
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 0210 	bic.w	r2, r3, #16
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	031b      	lsls	r3, r3, #12
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f043 0307 	orr.w	r3, r3, #7
 8002d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	021a      	lsls	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	609a      	str	r2, [r3, #8]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2201      	movs	r2, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e046      	b.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d009      	beq.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10c      	bne.n	8002eac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800

08002ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e03d      	b.n	8002f6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e03f      	b.n	8003008 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe f94b 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2224      	movs	r2, #36	; 0x24
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fc84 	bl	80038c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	d17c      	bne.n	800312a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Transmit+0x2c>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e075      	b.n	800312c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_UART_Transmit+0x3e>
 800304a:	2302      	movs	r3, #2
 800304c:	e06e      	b.n	800312c <HAL_UART_Transmit+0x11c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2221      	movs	r2, #33	; 0x21
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003064:	f7fe f9a4 	bl	80013b0 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d108      	bne.n	8003092 <HAL_UART_Transmit+0x82>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e003      	b.n	800309a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030a2:	e02a      	b.n	80030fa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa37 	bl	8003522 <UART_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e036      	b.n	800312c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	3302      	adds	r3, #2
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e007      	b.n	80030ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1cf      	bne.n	80030a4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2200      	movs	r2, #0
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa07 	bl	8003522 <UART_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e006      	b.n	800312c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d11d      	bne.n	800318a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_UART_Receive_IT+0x26>
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e016      	b.n	800318c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_UART_Receive_IT+0x38>
 8003168:	2302      	movs	r3, #2
 800316a:	e00f      	b.n	800318c <HAL_UART_Receive_IT+0x58>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	461a      	mov	r2, r3
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fa18 	bl	80035b6 <UART_Start_Receive_IT>
 8003186:	4603      	mov	r3, r0
 8003188:	e000      	b.n	800318c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_UART_IRQHandler+0x52>
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fac9 	bl	8003776 <UART_Receive_IT>
      return;
 80031e4:	e17b      	b.n	80034de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80b1 	beq.w	8003350 <HAL_UART_IRQHandler+0x1bc>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_UART_IRQHandler+0x70>
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80a6 	beq.w	8003350 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_UART_IRQHandler+0x90>
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_UART_IRQHandler+0xb0>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0202 	orr.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_UART_IRQHandler+0xd0>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00f      	beq.n	800328e <HAL_UART_IRQHandler+0xfa>
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_UART_IRQHandler+0xee>
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f043 0208 	orr.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 811e 	beq.w	80034d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_UART_IRQHandler+0x11e>
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fa62 	bl	8003776 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <HAL_UART_IRQHandler+0x146>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d031      	beq.n	800333e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9a4 	bl	8003628 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d023      	beq.n	8003336 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	2b00      	cmp	r3, #0
 8003304:	d013      	beq.n	800332e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	4a76      	ldr	r2, [pc, #472]	; (80034e4 <HAL_UART_IRQHandler+0x350>)
 800330c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe f9c2 	bl	800169c <HAL_DMA_Abort_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	e00e      	b.n	800334c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8e3 	bl	80034fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	e00a      	b.n	800334c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8df 	bl	80034fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	e006      	b.n	800334c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8db 	bl	80034fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800334a:	e0c3      	b.n	80034d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	bf00      	nop
    return;
 800334e:	e0c1      	b.n	80034d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 80a1 	bne.w	800349c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 809b 	beq.w	800349c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8095 	beq.w	800349c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04e      	beq.n	8003434 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80033a0:	8a3b      	ldrh	r3, [r7, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8098 	beq.w	80034d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033ac:	8a3a      	ldrh	r2, [r7, #16]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	f080 8092 	bcs.w	80034d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8a3a      	ldrh	r2, [r7, #16]
 80033b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d02b      	beq.n	800341c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0210 	bic.w	r2, r2, #16
 8003410:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe f905 	bl	8001626 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003424:	b29b      	uxth	r3, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	b29b      	uxth	r3, r3
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f86d 	bl	800350c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003432:	e051      	b.n	80034d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d047      	beq.n	80034dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800344c:	8a7b      	ldrh	r3, [r7, #18]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d044      	beq.n	80034dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003460:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0210 	bic.w	r2, r2, #16
 800348e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003490:	8a7b      	ldrh	r3, [r7, #18]
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f839 	bl	800350c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800349a:	e01f      	b.n	80034dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_UART_IRQHandler+0x324>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f8f9 	bl	80036a8 <UART_Transmit_IT>
    return;
 80034b6:	e012      	b.n	80034de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <HAL_UART_IRQHandler+0x34a>
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f93a 	bl	8003746 <UART_EndTransmit_IT>
    return;
 80034d2:	e004      	b.n	80034de <HAL_UART_IRQHandler+0x34a>
    return;
 80034d4:	bf00      	nop
 80034d6:	e002      	b.n	80034de <HAL_UART_IRQHandler+0x34a>
      return;
 80034d8:	bf00      	nop
 80034da:	e000      	b.n	80034de <HAL_UART_IRQHandler+0x34a>
      return;
 80034dc:	bf00      	nop
  }
}
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	08003681 	.word	0x08003681

080034e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr

080034fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003532:	e02c      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d028      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x30>
 8003542:	f7fd ff35 	bl	80013b0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	429a      	cmp	r2, r3
 8003550:	d21d      	bcs.n	800358e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003560:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e00f      	b.n	80035ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d0c3      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	4613      	mov	r3, r2
 80035c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2222      	movs	r2, #34	; 0x22
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0220 	orr.w	r2, r2, #32
 800361a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800363e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0210 	bic.w	r2, r2, #16
 8003666:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff ff2d 	bl	80034fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b21      	cmp	r3, #33	; 0x21
 80036ba:	d13e      	bne.n	800373a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d114      	bne.n	80036f0 <UART_Transmit_IT+0x48>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d110      	bne.n	80036f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	621a      	str	r2, [r3, #32]
 80036ee:	e008      	b.n	8003702 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6211      	str	r1, [r2, #32]
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4619      	mov	r1, r3
 8003710:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003724:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003734:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800373a:	2302      	movs	r3, #2
  }
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff febe 	bl	80034e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b22      	cmp	r3, #34	; 0x22
 8003788:	f040 8099 	bne.w	80038be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	d117      	bne.n	80037c6 <UART_Receive_IT+0x50>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d113      	bne.n	80037c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	1c9a      	adds	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
 80037c4:	e026      	b.n	8003814 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d8:	d007      	beq.n	80037ea <UART_Receive_IT+0x74>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <UART_Receive_IT+0x82>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e008      	b.n	800380a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003804:	b2da      	uxtb	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29b      	uxth	r3, r3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4619      	mov	r1, r3
 8003822:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003824:	2b00      	cmp	r3, #0
 8003826:	d148      	bne.n	80038ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0220 	bic.w	r2, r2, #32
 8003836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	2b01      	cmp	r3, #1
 8003866:	d123      	bne.n	80038b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0210 	bic.w	r2, r2, #16
 800387c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b10      	cmp	r3, #16
 800388a:	d10a      	bne.n	80038a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff fe2f 	bl	800350c <HAL_UARTEx_RxEventCallback>
 80038ae:	e002      	b.n	80038b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd f9df 	bl	8000c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e002      	b.n	80038c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e000      	b.n	80038c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
  }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003902:	f023 030c 	bic.w	r3, r3, #12
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	430b      	orrs	r3, r1
 800390e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <UART_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7fe fcd0 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	e002      	b.n	800393e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7fe fcb8 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 800393c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <UART_SetConfig+0x118>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	0119      	lsls	r1, r3, #4
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f2f3 	udiv	r2, r2, r3
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <UART_SetConfig+0x118>)
 8003976:	fba3 0302 	umull	r0, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	fb00 f303 	mul.w	r3, r0, r3
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	3332      	adds	r3, #50	; 0x32
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <UART_SetConfig+0x118>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003994:	4419      	add	r1, r3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <UART_SetConfig+0x118>)
 80039ae:	fba3 0302 	umull	r0, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2064      	movs	r0, #100	; 0x64
 80039b6:	fb00 f303 	mul.w	r3, r0, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	3332      	adds	r3, #50	; 0x32
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <UART_SetConfig+0x118>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	f003 020f 	and.w	r2, r3, #15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	440a      	add	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40013800 	.word	0x40013800
 80039e0:	51eb851f 	.word	0x51eb851f

080039e4 <__errno>:
 80039e4:	4b01      	ldr	r3, [pc, #4]	; (80039ec <__errno+0x8>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000018 	.word	0x20000018

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	2600      	movs	r6, #0
 80039f4:	4d0c      	ldr	r5, [pc, #48]	; (8003a28 <__libc_init_array+0x38>)
 80039f6:	4c0d      	ldr	r4, [pc, #52]	; (8003a2c <__libc_init_array+0x3c>)
 80039f8:	1b64      	subs	r4, r4, r5
 80039fa:	10a4      	asrs	r4, r4, #2
 80039fc:	42a6      	cmp	r6, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	f003 fb7c 	bl	80070fc <_init>
 8003a04:	2600      	movs	r6, #0
 8003a06:	4d0a      	ldr	r5, [pc, #40]	; (8003a30 <__libc_init_array+0x40>)
 8003a08:	4c0a      	ldr	r4, [pc, #40]	; (8003a34 <__libc_init_array+0x44>)
 8003a0a:	1b64      	subs	r4, r4, r5
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	42a6      	cmp	r6, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a18:	4798      	blx	r3
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a22:	4798      	blx	r3
 8003a24:	3601      	adds	r6, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	080075cc 	.word	0x080075cc
 8003a2c:	080075cc 	.word	0x080075cc
 8003a30:	080075cc 	.word	0x080075cc
 8003a34:	080075d0 	.word	0x080075d0

08003a38 <memset>:
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4402      	add	r2, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <memset+0xa>
 8003a40:	4770      	bx	lr
 8003a42:	f803 1b01 	strb.w	r1, [r3], #1
 8003a46:	e7f9      	b.n	8003a3c <memset+0x4>

08003a48 <__cvt>:
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4e:	461f      	mov	r7, r3
 8003a50:	bfbb      	ittet	lt
 8003a52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003a56:	461f      	movlt	r7, r3
 8003a58:	2300      	movge	r3, #0
 8003a5a:	232d      	movlt	r3, #45	; 0x2d
 8003a5c:	b088      	sub	sp, #32
 8003a5e:	4614      	mov	r4, r2
 8003a60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a64:	7013      	strb	r3, [r2, #0]
 8003a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a68:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003a6c:	f023 0820 	bic.w	r8, r3, #32
 8003a70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a74:	d005      	beq.n	8003a82 <__cvt+0x3a>
 8003a76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a7a:	d100      	bne.n	8003a7e <__cvt+0x36>
 8003a7c:	3501      	adds	r5, #1
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e000      	b.n	8003a84 <__cvt+0x3c>
 8003a82:	2303      	movs	r3, #3
 8003a84:	aa07      	add	r2, sp, #28
 8003a86:	9204      	str	r2, [sp, #16]
 8003a88:	aa06      	add	r2, sp, #24
 8003a8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a8e:	e9cd 3500 	strd	r3, r5, [sp]
 8003a92:	4622      	mov	r2, r4
 8003a94:	463b      	mov	r3, r7
 8003a96:	f000 fd77 	bl	8004588 <_dtoa_r>
 8003a9a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	d102      	bne.n	8003aa8 <__cvt+0x60>
 8003aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003aa4:	07db      	lsls	r3, r3, #31
 8003aa6:	d522      	bpl.n	8003aee <__cvt+0xa6>
 8003aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003aac:	eb06 0905 	add.w	r9, r6, r5
 8003ab0:	d110      	bne.n	8003ad4 <__cvt+0x8c>
 8003ab2:	7833      	ldrb	r3, [r6, #0]
 8003ab4:	2b30      	cmp	r3, #48	; 0x30
 8003ab6:	d10a      	bne.n	8003ace <__cvt+0x86>
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2300      	movs	r3, #0
 8003abc:	4620      	mov	r0, r4
 8003abe:	4639      	mov	r1, r7
 8003ac0:	f7fc ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8003ac4:	b918      	cbnz	r0, 8003ace <__cvt+0x86>
 8003ac6:	f1c5 0501 	rsb	r5, r5, #1
 8003aca:	f8ca 5000 	str.w	r5, [sl]
 8003ace:	f8da 3000 	ldr.w	r3, [sl]
 8003ad2:	4499      	add	r9, r3
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	4620      	mov	r0, r4
 8003ada:	4639      	mov	r1, r7
 8003adc:	f7fc ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8003ae0:	b108      	cbz	r0, 8003ae6 <__cvt+0x9e>
 8003ae2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ae6:	2230      	movs	r2, #48	; 0x30
 8003ae8:	9b07      	ldr	r3, [sp, #28]
 8003aea:	454b      	cmp	r3, r9
 8003aec:	d307      	bcc.n	8003afe <__cvt+0xb6>
 8003aee:	4630      	mov	r0, r6
 8003af0:	9b07      	ldr	r3, [sp, #28]
 8003af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003af4:	1b9b      	subs	r3, r3, r6
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	b008      	add	sp, #32
 8003afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	9107      	str	r1, [sp, #28]
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e7f0      	b.n	8003ae8 <__cvt+0xa0>

08003b06 <__exponent>:
 8003b06:	4603      	mov	r3, r0
 8003b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	f803 2b02 	strb.w	r2, [r3], #2
 8003b10:	bfb6      	itet	lt
 8003b12:	222d      	movlt	r2, #45	; 0x2d
 8003b14:	222b      	movge	r2, #43	; 0x2b
 8003b16:	4249      	neglt	r1, r1
 8003b18:	2909      	cmp	r1, #9
 8003b1a:	7042      	strb	r2, [r0, #1]
 8003b1c:	dd2b      	ble.n	8003b76 <__exponent+0x70>
 8003b1e:	f10d 0407 	add.w	r4, sp, #7
 8003b22:	46a4      	mov	ip, r4
 8003b24:	270a      	movs	r7, #10
 8003b26:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	46a6      	mov	lr, r4
 8003b2e:	fb07 1516 	mls	r5, r7, r6, r1
 8003b32:	2a63      	cmp	r2, #99	; 0x63
 8003b34:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003b38:	4631      	mov	r1, r6
 8003b3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b42:	dcf0      	bgt.n	8003b26 <__exponent+0x20>
 8003b44:	3130      	adds	r1, #48	; 0x30
 8003b46:	f1ae 0502 	sub.w	r5, lr, #2
 8003b4a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	1c44      	adds	r4, r0, #1
 8003b52:	4561      	cmp	r1, ip
 8003b54:	d30a      	bcc.n	8003b6c <__exponent+0x66>
 8003b56:	f10d 0209 	add.w	r2, sp, #9
 8003b5a:	eba2 020e 	sub.w	r2, r2, lr
 8003b5e:	4565      	cmp	r5, ip
 8003b60:	bf88      	it	hi
 8003b62:	2200      	movhi	r2, #0
 8003b64:	4413      	add	r3, r2
 8003b66:	1a18      	subs	r0, r3, r0
 8003b68:	b003      	add	sp, #12
 8003b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b70:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b74:	e7ed      	b.n	8003b52 <__exponent+0x4c>
 8003b76:	2330      	movs	r3, #48	; 0x30
 8003b78:	3130      	adds	r1, #48	; 0x30
 8003b7a:	7083      	strb	r3, [r0, #2]
 8003b7c:	70c1      	strb	r1, [r0, #3]
 8003b7e:	1d03      	adds	r3, r0, #4
 8003b80:	e7f1      	b.n	8003b66 <__exponent+0x60>
	...

08003b84 <_printf_float>:
 8003b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	b091      	sub	sp, #68	; 0x44
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003b90:	4616      	mov	r6, r2
 8003b92:	461f      	mov	r7, r3
 8003b94:	4605      	mov	r5, r0
 8003b96:	f001 fae5 	bl	8005164 <_localeconv_r>
 8003b9a:	6803      	ldr	r3, [r0, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ba0:	f7fc fad6 	bl	8000150 <strlen>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	930e      	str	r3, [sp, #56]	; 0x38
 8003ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bac:	900a      	str	r0, [sp, #40]	; 0x28
 8003bae:	3307      	adds	r3, #7
 8003bb0:	f023 0307 	bic.w	r3, r3, #7
 8003bb4:	f103 0208 	add.w	r2, r3, #8
 8003bb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003bbc:	f8d4 b000 	ldr.w	fp, [r4]
 8003bc0:	f8c8 2000 	str.w	r2, [r8]
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003bcc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003bd0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bda:	4640      	mov	r0, r8
 8003bdc:	4b9c      	ldr	r3, [pc, #624]	; (8003e50 <_printf_float+0x2cc>)
 8003bde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003be0:	f7fc ff14 	bl	8000a0c <__aeabi_dcmpun>
 8003be4:	bb70      	cbnz	r0, 8003c44 <_printf_float+0xc0>
 8003be6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bea:	4640      	mov	r0, r8
 8003bec:	4b98      	ldr	r3, [pc, #608]	; (8003e50 <_printf_float+0x2cc>)
 8003bee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bf0:	f7fc feee 	bl	80009d0 <__aeabi_dcmple>
 8003bf4:	bb30      	cbnz	r0, 8003c44 <_printf_float+0xc0>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	f7fc fedd 	bl	80009bc <__aeabi_dcmplt>
 8003c02:	b110      	cbz	r0, 8003c0a <_printf_float+0x86>
 8003c04:	232d      	movs	r3, #45	; 0x2d
 8003c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c0a:	4b92      	ldr	r3, [pc, #584]	; (8003e54 <_printf_float+0x2d0>)
 8003c0c:	4892      	ldr	r0, [pc, #584]	; (8003e58 <_printf_float+0x2d4>)
 8003c0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003c12:	bf94      	ite	ls
 8003c14:	4698      	movls	r8, r3
 8003c16:	4680      	movhi	r8, r0
 8003c18:	2303      	movs	r3, #3
 8003c1a:	f04f 0a00 	mov.w	sl, #0
 8003c1e:	6123      	str	r3, [r4, #16]
 8003c20:	f02b 0304 	bic.w	r3, fp, #4
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	4633      	mov	r3, r6
 8003c28:	4621      	mov	r1, r4
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	9700      	str	r7, [sp, #0]
 8003c2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c30:	f000 f9d4 	bl	8003fdc <_printf_common>
 8003c34:	3001      	adds	r0, #1
 8003c36:	f040 8090 	bne.w	8003d5a <_printf_float+0x1d6>
 8003c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3e:	b011      	add	sp, #68	; 0x44
 8003c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c44:	4642      	mov	r2, r8
 8003c46:	4653      	mov	r3, sl
 8003c48:	4640      	mov	r0, r8
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	f7fc fede 	bl	8000a0c <__aeabi_dcmpun>
 8003c50:	b148      	cbz	r0, 8003c66 <_printf_float+0xe2>
 8003c52:	f1ba 0f00 	cmp.w	sl, #0
 8003c56:	bfb8      	it	lt
 8003c58:	232d      	movlt	r3, #45	; 0x2d
 8003c5a:	4880      	ldr	r0, [pc, #512]	; (8003e5c <_printf_float+0x2d8>)
 8003c5c:	bfb8      	it	lt
 8003c5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c62:	4b7f      	ldr	r3, [pc, #508]	; (8003e60 <_printf_float+0x2dc>)
 8003c64:	e7d3      	b.n	8003c0e <_printf_float+0x8a>
 8003c66:	6863      	ldr	r3, [r4, #4]
 8003c68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	d142      	bne.n	8003cf6 <_printf_float+0x172>
 8003c70:	2306      	movs	r3, #6
 8003c72:	6063      	str	r3, [r4, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	9206      	str	r2, [sp, #24]
 8003c78:	aa0e      	add	r2, sp, #56	; 0x38
 8003c7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003c7e:	aa0d      	add	r2, sp, #52	; 0x34
 8003c80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003c84:	9203      	str	r2, [sp, #12]
 8003c86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003c8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c8e:	6023      	str	r3, [r4, #0]
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	4642      	mov	r2, r8
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4628      	mov	r0, r5
 8003c98:	4653      	mov	r3, sl
 8003c9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c9c:	f7ff fed4 	bl	8003a48 <__cvt>
 8003ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ca2:	4680      	mov	r8, r0
 8003ca4:	2947      	cmp	r1, #71	; 0x47
 8003ca6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ca8:	d108      	bne.n	8003cbc <_printf_float+0x138>
 8003caa:	1cc8      	adds	r0, r1, #3
 8003cac:	db02      	blt.n	8003cb4 <_printf_float+0x130>
 8003cae:	6863      	ldr	r3, [r4, #4]
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	dd40      	ble.n	8003d36 <_printf_float+0x1b2>
 8003cb4:	f1a9 0902 	sub.w	r9, r9, #2
 8003cb8:	fa5f f989 	uxtb.w	r9, r9
 8003cbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003cc0:	d81f      	bhi.n	8003d02 <_printf_float+0x17e>
 8003cc2:	464a      	mov	r2, r9
 8003cc4:	3901      	subs	r1, #1
 8003cc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cca:	910d      	str	r1, [sp, #52]	; 0x34
 8003ccc:	f7ff ff1b 	bl	8003b06 <__exponent>
 8003cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cd2:	4682      	mov	sl, r0
 8003cd4:	1813      	adds	r3, r2, r0
 8003cd6:	2a01      	cmp	r2, #1
 8003cd8:	6123      	str	r3, [r4, #16]
 8003cda:	dc02      	bgt.n	8003ce2 <_printf_float+0x15e>
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	07d2      	lsls	r2, r2, #31
 8003ce0:	d501      	bpl.n	8003ce6 <_printf_float+0x162>
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	6123      	str	r3, [r4, #16]
 8003ce6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d09b      	beq.n	8003c26 <_printf_float+0xa2>
 8003cee:	232d      	movs	r3, #45	; 0x2d
 8003cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf4:	e797      	b.n	8003c26 <_printf_float+0xa2>
 8003cf6:	2947      	cmp	r1, #71	; 0x47
 8003cf8:	d1bc      	bne.n	8003c74 <_printf_float+0xf0>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ba      	bne.n	8003c74 <_printf_float+0xf0>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e7b7      	b.n	8003c72 <_printf_float+0xee>
 8003d02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003d06:	d118      	bne.n	8003d3a <_printf_float+0x1b6>
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	dd0b      	ble.n	8003d26 <_printf_float+0x1a2>
 8003d0e:	6121      	str	r1, [r4, #16]
 8003d10:	b913      	cbnz	r3, 8003d18 <_printf_float+0x194>
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	07d0      	lsls	r0, r2, #31
 8003d16:	d502      	bpl.n	8003d1e <_printf_float+0x19a>
 8003d18:	3301      	adds	r3, #1
 8003d1a:	440b      	add	r3, r1
 8003d1c:	6123      	str	r3, [r4, #16]
 8003d1e:	f04f 0a00 	mov.w	sl, #0
 8003d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d24:	e7df      	b.n	8003ce6 <_printf_float+0x162>
 8003d26:	b913      	cbnz	r3, 8003d2e <_printf_float+0x1aa>
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	07d2      	lsls	r2, r2, #31
 8003d2c:	d501      	bpl.n	8003d32 <_printf_float+0x1ae>
 8003d2e:	3302      	adds	r3, #2
 8003d30:	e7f4      	b.n	8003d1c <_printf_float+0x198>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e7f2      	b.n	8003d1c <_printf_float+0x198>
 8003d36:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	db05      	blt.n	8003d4c <_printf_float+0x1c8>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	6121      	str	r1, [r4, #16]
 8003d44:	07d8      	lsls	r0, r3, #31
 8003d46:	d5ea      	bpl.n	8003d1e <_printf_float+0x19a>
 8003d48:	1c4b      	adds	r3, r1, #1
 8003d4a:	e7e7      	b.n	8003d1c <_printf_float+0x198>
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	bfcc      	ite	gt
 8003d50:	2201      	movgt	r2, #1
 8003d52:	f1c1 0202 	rsble	r2, r1, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	e7e0      	b.n	8003d1c <_printf_float+0x198>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	055a      	lsls	r2, r3, #21
 8003d5e:	d407      	bmi.n	8003d70 <_printf_float+0x1ec>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	4642      	mov	r2, r8
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d12b      	bne.n	8003dc6 <_printf_float+0x242>
 8003d6e:	e764      	b.n	8003c3a <_printf_float+0xb6>
 8003d70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d74:	f240 80dd 	bls.w	8003f32 <_printf_float+0x3ae>
 8003d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f7fc fe12 	bl	80009a8 <__aeabi_dcmpeq>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d033      	beq.n	8003df0 <_printf_float+0x26c>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	4a35      	ldr	r2, [pc, #212]	; (8003e64 <_printf_float+0x2e0>)
 8003d90:	47b8      	blx	r7
 8003d92:	3001      	adds	r0, #1
 8003d94:	f43f af51 	beq.w	8003c3a <_printf_float+0xb6>
 8003d98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	db02      	blt.n	8003da6 <_printf_float+0x222>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	07d8      	lsls	r0, r3, #31
 8003da4:	d50f      	bpl.n	8003dc6 <_printf_float+0x242>
 8003da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003daa:	4631      	mov	r1, r6
 8003dac:	4628      	mov	r0, r5
 8003dae:	47b8      	blx	r7
 8003db0:	3001      	adds	r0, #1
 8003db2:	f43f af42 	beq.w	8003c3a <_printf_float+0xb6>
 8003db6:	f04f 0800 	mov.w	r8, #0
 8003dba:	f104 091a 	add.w	r9, r4, #26
 8003dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	4543      	cmp	r3, r8
 8003dc4:	dc09      	bgt.n	8003dda <_printf_float+0x256>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	079b      	lsls	r3, r3, #30
 8003dca:	f100 8102 	bmi.w	8003fd2 <_printf_float+0x44e>
 8003dce:	68e0      	ldr	r0, [r4, #12]
 8003dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dd2:	4298      	cmp	r0, r3
 8003dd4:	bfb8      	it	lt
 8003dd6:	4618      	movlt	r0, r3
 8003dd8:	e731      	b.n	8003c3e <_printf_float+0xba>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	464a      	mov	r2, r9
 8003dde:	4631      	mov	r1, r6
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b8      	blx	r7
 8003de4:	3001      	adds	r0, #1
 8003de6:	f43f af28 	beq.w	8003c3a <_printf_float+0xb6>
 8003dea:	f108 0801 	add.w	r8, r8, #1
 8003dee:	e7e6      	b.n	8003dbe <_printf_float+0x23a>
 8003df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	dc38      	bgt.n	8003e68 <_printf_float+0x2e4>
 8003df6:	2301      	movs	r3, #1
 8003df8:	4631      	mov	r1, r6
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <_printf_float+0x2e0>)
 8003dfe:	47b8      	blx	r7
 8003e00:	3001      	adds	r0, #1
 8003e02:	f43f af1a 	beq.w	8003c3a <_printf_float+0xb6>
 8003e06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d102      	bne.n	8003e14 <_printf_float+0x290>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	07d9      	lsls	r1, r3, #31
 8003e12:	d5d8      	bpl.n	8003dc6 <_printf_float+0x242>
 8003e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e18:	4631      	mov	r1, r6
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	47b8      	blx	r7
 8003e1e:	3001      	adds	r0, #1
 8003e20:	f43f af0b 	beq.w	8003c3a <_printf_float+0xb6>
 8003e24:	f04f 0900 	mov.w	r9, #0
 8003e28:	f104 0a1a 	add.w	sl, r4, #26
 8003e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e2e:	425b      	negs	r3, r3
 8003e30:	454b      	cmp	r3, r9
 8003e32:	dc01      	bgt.n	8003e38 <_printf_float+0x2b4>
 8003e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e36:	e794      	b.n	8003d62 <_printf_float+0x1de>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4652      	mov	r2, sl
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	4628      	mov	r0, r5
 8003e40:	47b8      	blx	r7
 8003e42:	3001      	adds	r0, #1
 8003e44:	f43f aef9 	beq.w	8003c3a <_printf_float+0xb6>
 8003e48:	f109 0901 	add.w	r9, r9, #1
 8003e4c:	e7ee      	b.n	8003e2c <_printf_float+0x2a8>
 8003e4e:	bf00      	nop
 8003e50:	7fefffff 	.word	0x7fefffff
 8003e54:	080071d0 	.word	0x080071d0
 8003e58:	080071d4 	.word	0x080071d4
 8003e5c:	080071dc 	.word	0x080071dc
 8003e60:	080071d8 	.word	0x080071d8
 8003e64:	08007409 	.word	0x08007409
 8003e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bfa8      	it	ge
 8003e70:	461a      	movge	r2, r3
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	4691      	mov	r9, r2
 8003e76:	dc37      	bgt.n	8003ee8 <_printf_float+0x364>
 8003e78:	f04f 0b00 	mov.w	fp, #0
 8003e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e80:	f104 021a 	add.w	r2, r4, #26
 8003e84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003e88:	ebaa 0309 	sub.w	r3, sl, r9
 8003e8c:	455b      	cmp	r3, fp
 8003e8e:	dc33      	bgt.n	8003ef8 <_printf_float+0x374>
 8003e90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e94:	429a      	cmp	r2, r3
 8003e96:	db3b      	blt.n	8003f10 <_printf_float+0x38c>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	07da      	lsls	r2, r3, #31
 8003e9c:	d438      	bmi.n	8003f10 <_printf_float+0x38c>
 8003e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ea0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ea2:	eba2 030a 	sub.w	r3, r2, sl
 8003ea6:	eba2 0901 	sub.w	r9, r2, r1
 8003eaa:	4599      	cmp	r9, r3
 8003eac:	bfa8      	it	ge
 8003eae:	4699      	movge	r9, r3
 8003eb0:	f1b9 0f00 	cmp.w	r9, #0
 8003eb4:	dc34      	bgt.n	8003f20 <_printf_float+0x39c>
 8003eb6:	f04f 0800 	mov.w	r8, #0
 8003eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ebe:	f104 0a1a 	add.w	sl, r4, #26
 8003ec2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	eba3 0309 	sub.w	r3, r3, r9
 8003ecc:	4543      	cmp	r3, r8
 8003ece:	f77f af7a 	ble.w	8003dc6 <_printf_float+0x242>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4652      	mov	r2, sl
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	f43f aeac 	beq.w	8003c3a <_printf_float+0xb6>
 8003ee2:	f108 0801 	add.w	r8, r8, #1
 8003ee6:	e7ec      	b.n	8003ec2 <_printf_float+0x33e>
 8003ee8:	4613      	mov	r3, r2
 8003eea:	4631      	mov	r1, r6
 8003eec:	4642      	mov	r2, r8
 8003eee:	4628      	mov	r0, r5
 8003ef0:	47b8      	blx	r7
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d1c0      	bne.n	8003e78 <_printf_float+0x2f4>
 8003ef6:	e6a0      	b.n	8003c3a <_printf_float+0xb6>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4631      	mov	r1, r6
 8003efc:	4628      	mov	r0, r5
 8003efe:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	f43f ae99 	beq.w	8003c3a <_printf_float+0xb6>
 8003f08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f0a:	f10b 0b01 	add.w	fp, fp, #1
 8003f0e:	e7b9      	b.n	8003e84 <_printf_float+0x300>
 8003f10:	4631      	mov	r1, r6
 8003f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d1bf      	bne.n	8003e9e <_printf_float+0x31a>
 8003f1e:	e68c      	b.n	8003c3a <_printf_float+0xb6>
 8003f20:	464b      	mov	r3, r9
 8003f22:	4631      	mov	r1, r6
 8003f24:	4628      	mov	r0, r5
 8003f26:	eb08 020a 	add.w	r2, r8, sl
 8003f2a:	47b8      	blx	r7
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d1c2      	bne.n	8003eb6 <_printf_float+0x332>
 8003f30:	e683      	b.n	8003c3a <_printf_float+0xb6>
 8003f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f34:	2a01      	cmp	r2, #1
 8003f36:	dc01      	bgt.n	8003f3c <_printf_float+0x3b8>
 8003f38:	07db      	lsls	r3, r3, #31
 8003f3a:	d537      	bpl.n	8003fac <_printf_float+0x428>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4642      	mov	r2, r8
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f ae77 	beq.w	8003c3a <_printf_float+0xb6>
 8003f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f50:	4631      	mov	r1, r6
 8003f52:	4628      	mov	r0, r5
 8003f54:	47b8      	blx	r7
 8003f56:	3001      	adds	r0, #1
 8003f58:	f43f ae6f 	beq.w	8003c3a <_printf_float+0xb6>
 8003f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f60:	2200      	movs	r2, #0
 8003f62:	2300      	movs	r3, #0
 8003f64:	f7fc fd20 	bl	80009a8 <__aeabi_dcmpeq>
 8003f68:	b9d8      	cbnz	r0, 8003fa2 <_printf_float+0x41e>
 8003f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f6c:	f108 0201 	add.w	r2, r8, #1
 8003f70:	3b01      	subs	r3, #1
 8003f72:	4631      	mov	r1, r6
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b8      	blx	r7
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d10e      	bne.n	8003f9a <_printf_float+0x416>
 8003f7c:	e65d      	b.n	8003c3a <_printf_float+0xb6>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	464a      	mov	r2, r9
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f ae56 	beq.w	8003c3a <_printf_float+0xb6>
 8003f8e:	f108 0801 	add.w	r8, r8, #1
 8003f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f94:	3b01      	subs	r3, #1
 8003f96:	4543      	cmp	r3, r8
 8003f98:	dcf1      	bgt.n	8003f7e <_printf_float+0x3fa>
 8003f9a:	4653      	mov	r3, sl
 8003f9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003fa0:	e6e0      	b.n	8003d64 <_printf_float+0x1e0>
 8003fa2:	f04f 0800 	mov.w	r8, #0
 8003fa6:	f104 091a 	add.w	r9, r4, #26
 8003faa:	e7f2      	b.n	8003f92 <_printf_float+0x40e>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4642      	mov	r2, r8
 8003fb0:	e7df      	b.n	8003f72 <_printf_float+0x3ee>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	464a      	mov	r2, r9
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	47b8      	blx	r7
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	f43f ae3c 	beq.w	8003c3a <_printf_float+0xb6>
 8003fc2:	f108 0801 	add.w	r8, r8, #1
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fca:	1a5b      	subs	r3, r3, r1
 8003fcc:	4543      	cmp	r3, r8
 8003fce:	dcf0      	bgt.n	8003fb2 <_printf_float+0x42e>
 8003fd0:	e6fd      	b.n	8003dce <_printf_float+0x24a>
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	f104 0919 	add.w	r9, r4, #25
 8003fda:	e7f4      	b.n	8003fc6 <_printf_float+0x442>

08003fdc <_printf_common>:
 8003fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe0:	4616      	mov	r6, r2
 8003fe2:	4699      	mov	r9, r3
 8003fe4:	688a      	ldr	r2, [r1, #8]
 8003fe6:	690b      	ldr	r3, [r1, #16]
 8003fe8:	4607      	mov	r7, r0
 8003fea:	4293      	cmp	r3, r2
 8003fec:	bfb8      	it	lt
 8003fee:	4613      	movlt	r3, r2
 8003ff0:	6033      	str	r3, [r6, #0]
 8003ff2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ffc:	b10a      	cbz	r2, 8004002 <_printf_common+0x26>
 8003ffe:	3301      	adds	r3, #1
 8004000:	6033      	str	r3, [r6, #0]
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	0699      	lsls	r1, r3, #26
 8004006:	bf42      	ittt	mi
 8004008:	6833      	ldrmi	r3, [r6, #0]
 800400a:	3302      	addmi	r3, #2
 800400c:	6033      	strmi	r3, [r6, #0]
 800400e:	6825      	ldr	r5, [r4, #0]
 8004010:	f015 0506 	ands.w	r5, r5, #6
 8004014:	d106      	bne.n	8004024 <_printf_common+0x48>
 8004016:	f104 0a19 	add.w	sl, r4, #25
 800401a:	68e3      	ldr	r3, [r4, #12]
 800401c:	6832      	ldr	r2, [r6, #0]
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	42ab      	cmp	r3, r5
 8004022:	dc28      	bgt.n	8004076 <_printf_common+0x9a>
 8004024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004028:	1e13      	subs	r3, r2, #0
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	bf18      	it	ne
 800402e:	2301      	movne	r3, #1
 8004030:	0692      	lsls	r2, r2, #26
 8004032:	d42d      	bmi.n	8004090 <_printf_common+0xb4>
 8004034:	4649      	mov	r1, r9
 8004036:	4638      	mov	r0, r7
 8004038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800403c:	47c0      	blx	r8
 800403e:	3001      	adds	r0, #1
 8004040:	d020      	beq.n	8004084 <_printf_common+0xa8>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	68e5      	ldr	r5, [r4, #12]
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf18      	it	ne
 800404e:	2500      	movne	r5, #0
 8004050:	6832      	ldr	r2, [r6, #0]
 8004052:	f04f 0600 	mov.w	r6, #0
 8004056:	68a3      	ldr	r3, [r4, #8]
 8004058:	bf08      	it	eq
 800405a:	1aad      	subeq	r5, r5, r2
 800405c:	6922      	ldr	r2, [r4, #16]
 800405e:	bf08      	it	eq
 8004060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004064:	4293      	cmp	r3, r2
 8004066:	bfc4      	itt	gt
 8004068:	1a9b      	subgt	r3, r3, r2
 800406a:	18ed      	addgt	r5, r5, r3
 800406c:	341a      	adds	r4, #26
 800406e:	42b5      	cmp	r5, r6
 8004070:	d11a      	bne.n	80040a8 <_printf_common+0xcc>
 8004072:	2000      	movs	r0, #0
 8004074:	e008      	b.n	8004088 <_printf_common+0xac>
 8004076:	2301      	movs	r3, #1
 8004078:	4652      	mov	r2, sl
 800407a:	4649      	mov	r1, r9
 800407c:	4638      	mov	r0, r7
 800407e:	47c0      	blx	r8
 8004080:	3001      	adds	r0, #1
 8004082:	d103      	bne.n	800408c <_printf_common+0xb0>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408c:	3501      	adds	r5, #1
 800408e:	e7c4      	b.n	800401a <_printf_common+0x3e>
 8004090:	2030      	movs	r0, #48	; 0x30
 8004092:	18e1      	adds	r1, r4, r3
 8004094:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800409e:	4422      	add	r2, r4
 80040a0:	3302      	adds	r3, #2
 80040a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040a6:	e7c5      	b.n	8004034 <_printf_common+0x58>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4622      	mov	r2, r4
 80040ac:	4649      	mov	r1, r9
 80040ae:	4638      	mov	r0, r7
 80040b0:	47c0      	blx	r8
 80040b2:	3001      	adds	r0, #1
 80040b4:	d0e6      	beq.n	8004084 <_printf_common+0xa8>
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7d9      	b.n	800406e <_printf_common+0x92>
	...

080040bc <_printf_i>:
 80040bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	460c      	mov	r4, r1
 80040c2:	7e27      	ldrb	r7, [r4, #24]
 80040c4:	4691      	mov	r9, r2
 80040c6:	2f78      	cmp	r7, #120	; 0x78
 80040c8:	4680      	mov	r8, r0
 80040ca:	469a      	mov	sl, r3
 80040cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d2:	d807      	bhi.n	80040e4 <_printf_i+0x28>
 80040d4:	2f62      	cmp	r7, #98	; 0x62
 80040d6:	d80a      	bhi.n	80040ee <_printf_i+0x32>
 80040d8:	2f00      	cmp	r7, #0
 80040da:	f000 80d9 	beq.w	8004290 <_printf_i+0x1d4>
 80040de:	2f58      	cmp	r7, #88	; 0x58
 80040e0:	f000 80a4 	beq.w	800422c <_printf_i+0x170>
 80040e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040ec:	e03a      	b.n	8004164 <_printf_i+0xa8>
 80040ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040f2:	2b15      	cmp	r3, #21
 80040f4:	d8f6      	bhi.n	80040e4 <_printf_i+0x28>
 80040f6:	a001      	add	r0, pc, #4	; (adr r0, 80040fc <_printf_i+0x40>)
 80040f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004169 	.word	0x08004169
 8004104:	080040e5 	.word	0x080040e5
 8004108:	080040e5 	.word	0x080040e5
 800410c:	080040e5 	.word	0x080040e5
 8004110:	080040e5 	.word	0x080040e5
 8004114:	08004169 	.word	0x08004169
 8004118:	080040e5 	.word	0x080040e5
 800411c:	080040e5 	.word	0x080040e5
 8004120:	080040e5 	.word	0x080040e5
 8004124:	080040e5 	.word	0x080040e5
 8004128:	08004277 	.word	0x08004277
 800412c:	08004199 	.word	0x08004199
 8004130:	08004259 	.word	0x08004259
 8004134:	080040e5 	.word	0x080040e5
 8004138:	080040e5 	.word	0x080040e5
 800413c:	08004299 	.word	0x08004299
 8004140:	080040e5 	.word	0x080040e5
 8004144:	08004199 	.word	0x08004199
 8004148:	080040e5 	.word	0x080040e5
 800414c:	080040e5 	.word	0x080040e5
 8004150:	08004261 	.word	0x08004261
 8004154:	680b      	ldr	r3, [r1, #0]
 8004156:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	600a      	str	r2, [r1, #0]
 8004160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004164:	2301      	movs	r3, #1
 8004166:	e0a4      	b.n	80042b2 <_printf_i+0x1f6>
 8004168:	6825      	ldr	r5, [r4, #0]
 800416a:	6808      	ldr	r0, [r1, #0]
 800416c:	062e      	lsls	r6, r5, #24
 800416e:	f100 0304 	add.w	r3, r0, #4
 8004172:	d50a      	bpl.n	800418a <_printf_i+0xce>
 8004174:	6805      	ldr	r5, [r0, #0]
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	2d00      	cmp	r5, #0
 800417a:	da03      	bge.n	8004184 <_printf_i+0xc8>
 800417c:	232d      	movs	r3, #45	; 0x2d
 800417e:	426d      	negs	r5, r5
 8004180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004184:	230a      	movs	r3, #10
 8004186:	485e      	ldr	r0, [pc, #376]	; (8004300 <_printf_i+0x244>)
 8004188:	e019      	b.n	80041be <_printf_i+0x102>
 800418a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800418e:	6805      	ldr	r5, [r0, #0]
 8004190:	600b      	str	r3, [r1, #0]
 8004192:	bf18      	it	ne
 8004194:	b22d      	sxthne	r5, r5
 8004196:	e7ef      	b.n	8004178 <_printf_i+0xbc>
 8004198:	680b      	ldr	r3, [r1, #0]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	1d18      	adds	r0, r3, #4
 800419e:	6008      	str	r0, [r1, #0]
 80041a0:	0628      	lsls	r0, r5, #24
 80041a2:	d501      	bpl.n	80041a8 <_printf_i+0xec>
 80041a4:	681d      	ldr	r5, [r3, #0]
 80041a6:	e002      	b.n	80041ae <_printf_i+0xf2>
 80041a8:	0669      	lsls	r1, r5, #25
 80041aa:	d5fb      	bpl.n	80041a4 <_printf_i+0xe8>
 80041ac:	881d      	ldrh	r5, [r3, #0]
 80041ae:	2f6f      	cmp	r7, #111	; 0x6f
 80041b0:	bf0c      	ite	eq
 80041b2:	2308      	moveq	r3, #8
 80041b4:	230a      	movne	r3, #10
 80041b6:	4852      	ldr	r0, [pc, #328]	; (8004300 <_printf_i+0x244>)
 80041b8:	2100      	movs	r1, #0
 80041ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041be:	6866      	ldr	r6, [r4, #4]
 80041c0:	2e00      	cmp	r6, #0
 80041c2:	bfa8      	it	ge
 80041c4:	6821      	ldrge	r1, [r4, #0]
 80041c6:	60a6      	str	r6, [r4, #8]
 80041c8:	bfa4      	itt	ge
 80041ca:	f021 0104 	bicge.w	r1, r1, #4
 80041ce:	6021      	strge	r1, [r4, #0]
 80041d0:	b90d      	cbnz	r5, 80041d6 <_printf_i+0x11a>
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d04d      	beq.n	8004272 <_printf_i+0x1b6>
 80041d6:	4616      	mov	r6, r2
 80041d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80041dc:	fb03 5711 	mls	r7, r3, r1, r5
 80041e0:	5dc7      	ldrb	r7, [r0, r7]
 80041e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041e6:	462f      	mov	r7, r5
 80041e8:	42bb      	cmp	r3, r7
 80041ea:	460d      	mov	r5, r1
 80041ec:	d9f4      	bls.n	80041d8 <_printf_i+0x11c>
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10b      	bne.n	800420a <_printf_i+0x14e>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	07df      	lsls	r7, r3, #31
 80041f6:	d508      	bpl.n	800420a <_printf_i+0x14e>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6861      	ldr	r1, [r4, #4]
 80041fc:	4299      	cmp	r1, r3
 80041fe:	bfde      	ittt	le
 8004200:	2330      	movle	r3, #48	; 0x30
 8004202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800420a:	1b92      	subs	r2, r2, r6
 800420c:	6122      	str	r2, [r4, #16]
 800420e:	464b      	mov	r3, r9
 8004210:	4621      	mov	r1, r4
 8004212:	4640      	mov	r0, r8
 8004214:	f8cd a000 	str.w	sl, [sp]
 8004218:	aa03      	add	r2, sp, #12
 800421a:	f7ff fedf 	bl	8003fdc <_printf_common>
 800421e:	3001      	adds	r0, #1
 8004220:	d14c      	bne.n	80042bc <_printf_i+0x200>
 8004222:	f04f 30ff 	mov.w	r0, #4294967295
 8004226:	b004      	add	sp, #16
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	4834      	ldr	r0, [pc, #208]	; (8004300 <_printf_i+0x244>)
 800422e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004232:	680e      	ldr	r6, [r1, #0]
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f856 5b04 	ldr.w	r5, [r6], #4
 800423a:	061f      	lsls	r7, r3, #24
 800423c:	600e      	str	r6, [r1, #0]
 800423e:	d514      	bpl.n	800426a <_printf_i+0x1ae>
 8004240:	07d9      	lsls	r1, r3, #31
 8004242:	bf44      	itt	mi
 8004244:	f043 0320 	orrmi.w	r3, r3, #32
 8004248:	6023      	strmi	r3, [r4, #0]
 800424a:	b91d      	cbnz	r5, 8004254 <_printf_i+0x198>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f023 0320 	bic.w	r3, r3, #32
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	2310      	movs	r3, #16
 8004256:	e7af      	b.n	80041b8 <_printf_i+0xfc>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	2378      	movs	r3, #120	; 0x78
 8004262:	4828      	ldr	r0, [pc, #160]	; (8004304 <_printf_i+0x248>)
 8004264:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004268:	e7e3      	b.n	8004232 <_printf_i+0x176>
 800426a:	065e      	lsls	r6, r3, #25
 800426c:	bf48      	it	mi
 800426e:	b2ad      	uxthmi	r5, r5
 8004270:	e7e6      	b.n	8004240 <_printf_i+0x184>
 8004272:	4616      	mov	r6, r2
 8004274:	e7bb      	b.n	80041ee <_printf_i+0x132>
 8004276:	680b      	ldr	r3, [r1, #0]
 8004278:	6826      	ldr	r6, [r4, #0]
 800427a:	1d1d      	adds	r5, r3, #4
 800427c:	6960      	ldr	r0, [r4, #20]
 800427e:	600d      	str	r5, [r1, #0]
 8004280:	0635      	lsls	r5, r6, #24
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	d501      	bpl.n	800428a <_printf_i+0x1ce>
 8004286:	6018      	str	r0, [r3, #0]
 8004288:	e002      	b.n	8004290 <_printf_i+0x1d4>
 800428a:	0671      	lsls	r1, r6, #25
 800428c:	d5fb      	bpl.n	8004286 <_printf_i+0x1ca>
 800428e:	8018      	strh	r0, [r3, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	4616      	mov	r6, r2
 8004294:	6123      	str	r3, [r4, #16]
 8004296:	e7ba      	b.n	800420e <_printf_i+0x152>
 8004298:	680b      	ldr	r3, [r1, #0]
 800429a:	1d1a      	adds	r2, r3, #4
 800429c:	600a      	str	r2, [r1, #0]
 800429e:	681e      	ldr	r6, [r3, #0]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4630      	mov	r0, r6
 80042a4:	6862      	ldr	r2, [r4, #4]
 80042a6:	f000 ff7b 	bl	80051a0 <memchr>
 80042aa:	b108      	cbz	r0, 80042b0 <_printf_i+0x1f4>
 80042ac:	1b80      	subs	r0, r0, r6
 80042ae:	6060      	str	r0, [r4, #4]
 80042b0:	6863      	ldr	r3, [r4, #4]
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	2300      	movs	r3, #0
 80042b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ba:	e7a8      	b.n	800420e <_printf_i+0x152>
 80042bc:	4632      	mov	r2, r6
 80042be:	4649      	mov	r1, r9
 80042c0:	4640      	mov	r0, r8
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	47d0      	blx	sl
 80042c6:	3001      	adds	r0, #1
 80042c8:	d0ab      	beq.n	8004222 <_printf_i+0x166>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	079b      	lsls	r3, r3, #30
 80042ce:	d413      	bmi.n	80042f8 <_printf_i+0x23c>
 80042d0:	68e0      	ldr	r0, [r4, #12]
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	4298      	cmp	r0, r3
 80042d6:	bfb8      	it	lt
 80042d8:	4618      	movlt	r0, r3
 80042da:	e7a4      	b.n	8004226 <_printf_i+0x16a>
 80042dc:	2301      	movs	r3, #1
 80042de:	4632      	mov	r2, r6
 80042e0:	4649      	mov	r1, r9
 80042e2:	4640      	mov	r0, r8
 80042e4:	47d0      	blx	sl
 80042e6:	3001      	adds	r0, #1
 80042e8:	d09b      	beq.n	8004222 <_printf_i+0x166>
 80042ea:	3501      	adds	r5, #1
 80042ec:	68e3      	ldr	r3, [r4, #12]
 80042ee:	9903      	ldr	r1, [sp, #12]
 80042f0:	1a5b      	subs	r3, r3, r1
 80042f2:	42ab      	cmp	r3, r5
 80042f4:	dcf2      	bgt.n	80042dc <_printf_i+0x220>
 80042f6:	e7eb      	b.n	80042d0 <_printf_i+0x214>
 80042f8:	2500      	movs	r5, #0
 80042fa:	f104 0619 	add.w	r6, r4, #25
 80042fe:	e7f5      	b.n	80042ec <_printf_i+0x230>
 8004300:	080071e0 	.word	0x080071e0
 8004304:	080071f1 	.word	0x080071f1

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800430e:	b500      	push	{lr}
 8004310:	b09c      	sub	sp, #112	; 0x70
 8004312:	ab1d      	add	r3, sp, #116	; 0x74
 8004314:	9002      	str	r0, [sp, #8]
 8004316:	9006      	str	r0, [sp, #24]
 8004318:	9107      	str	r1, [sp, #28]
 800431a:	9104      	str	r1, [sp, #16]
 800431c:	4808      	ldr	r0, [pc, #32]	; (8004340 <siprintf+0x38>)
 800431e:	4909      	ldr	r1, [pc, #36]	; (8004344 <siprintf+0x3c>)
 8004320:	f853 2b04 	ldr.w	r2, [r3], #4
 8004324:	9105      	str	r1, [sp, #20]
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	a902      	add	r1, sp, #8
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	f001 fbe6 	bl	8005afc <_svfiprintf_r>
 8004330:	2200      	movs	r2, #0
 8004332:	9b02      	ldr	r3, [sp, #8]
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	b01c      	add	sp, #112	; 0x70
 8004338:	f85d eb04 	ldr.w	lr, [sp], #4
 800433c:	b003      	add	sp, #12
 800433e:	4770      	bx	lr
 8004340:	20000018 	.word	0x20000018
 8004344:	ffff0208 	.word	0xffff0208

08004348 <siscanf>:
 8004348:	b40e      	push	{r1, r2, r3}
 800434a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800434e:	b530      	push	{r4, r5, lr}
 8004350:	b09c      	sub	sp, #112	; 0x70
 8004352:	ac1f      	add	r4, sp, #124	; 0x7c
 8004354:	f854 5b04 	ldr.w	r5, [r4], #4
 8004358:	f8ad 2014 	strh.w	r2, [sp, #20]
 800435c:	9002      	str	r0, [sp, #8]
 800435e:	9006      	str	r0, [sp, #24]
 8004360:	f7fb fef6 	bl	8000150 <strlen>
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <siscanf+0x4c>)
 8004366:	9003      	str	r0, [sp, #12]
 8004368:	930b      	str	r3, [sp, #44]	; 0x2c
 800436a:	2300      	movs	r3, #0
 800436c:	930f      	str	r3, [sp, #60]	; 0x3c
 800436e:	9314      	str	r3, [sp, #80]	; 0x50
 8004370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004374:	9007      	str	r0, [sp, #28]
 8004376:	4808      	ldr	r0, [pc, #32]	; (8004398 <siscanf+0x50>)
 8004378:	f8ad 3016 	strh.w	r3, [sp, #22]
 800437c:	462a      	mov	r2, r5
 800437e:	4623      	mov	r3, r4
 8004380:	a902      	add	r1, sp, #8
 8004382:	6800      	ldr	r0, [r0, #0]
 8004384:	9401      	str	r4, [sp, #4]
 8004386:	f001 fd13 	bl	8005db0 <__ssvfiscanf_r>
 800438a:	b01c      	add	sp, #112	; 0x70
 800438c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004390:	b003      	add	sp, #12
 8004392:	4770      	bx	lr
 8004394:	080043bf 	.word	0x080043bf
 8004398:	20000018 	.word	0x20000018

0800439c <__sread>:
 800439c:	b510      	push	{r4, lr}
 800439e:	460c      	mov	r4, r1
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	f001 ffc8 	bl	8006338 <_read_r>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	bfab      	itete	ge
 80043ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043ae:	89a3      	ldrhlt	r3, [r4, #12]
 80043b0:	181b      	addge	r3, r3, r0
 80043b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043b6:	bfac      	ite	ge
 80043b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043ba:	81a3      	strhlt	r3, [r4, #12]
 80043bc:	bd10      	pop	{r4, pc}

080043be <__seofread>:
 80043be:	2000      	movs	r0, #0
 80043c0:	4770      	bx	lr

080043c2 <__swrite>:
 80043c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	461f      	mov	r7, r3
 80043c8:	898b      	ldrh	r3, [r1, #12]
 80043ca:	4605      	mov	r5, r0
 80043cc:	05db      	lsls	r3, r3, #23
 80043ce:	460c      	mov	r4, r1
 80043d0:	4616      	mov	r6, r2
 80043d2:	d505      	bpl.n	80043e0 <__swrite+0x1e>
 80043d4:	2302      	movs	r3, #2
 80043d6:	2200      	movs	r2, #0
 80043d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043dc:	f000 fec6 	bl	800516c <_lseek_r>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	4632      	mov	r2, r6
 80043e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	4628      	mov	r0, r5
 80043ec:	463b      	mov	r3, r7
 80043ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f6:	f000 b817 	b.w	8004428 <_write_r>

080043fa <__sseek>:
 80043fa:	b510      	push	{r4, lr}
 80043fc:	460c      	mov	r4, r1
 80043fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004402:	f000 feb3 	bl	800516c <_lseek_r>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	bf15      	itete	ne
 800440c:	6560      	strne	r0, [r4, #84]	; 0x54
 800440e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004416:	81a3      	strheq	r3, [r4, #12]
 8004418:	bf18      	it	ne
 800441a:	81a3      	strhne	r3, [r4, #12]
 800441c:	bd10      	pop	{r4, pc}

0800441e <__sclose>:
 800441e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004422:	f000 b813 	b.w	800444c <_close_r>
	...

08004428 <_write_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	2200      	movs	r2, #0
 8004432:	4d05      	ldr	r5, [pc, #20]	; (8004448 <_write_r+0x20>)
 8004434:	602a      	str	r2, [r5, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f7fc fd5a 	bl	8000ef0 <_write>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_write_r+0x1e>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_write_r+0x1e>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	20000324 	.word	0x20000324

0800444c <_close_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	2300      	movs	r3, #0
 8004450:	4d05      	ldr	r5, [pc, #20]	; (8004468 <_close_r+0x1c>)
 8004452:	4604      	mov	r4, r0
 8004454:	4608      	mov	r0, r1
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	f7fc fd66 	bl	8000f28 <_close>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_close_r+0x1a>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	b103      	cbz	r3, 8004466 <_close_r+0x1a>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	20000324 	.word	0x20000324

0800446c <quorem>:
 800446c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004470:	6903      	ldr	r3, [r0, #16]
 8004472:	690c      	ldr	r4, [r1, #16]
 8004474:	4607      	mov	r7, r0
 8004476:	42a3      	cmp	r3, r4
 8004478:	f2c0 8083 	blt.w	8004582 <quorem+0x116>
 800447c:	3c01      	subs	r4, #1
 800447e:	f100 0514 	add.w	r5, r0, #20
 8004482:	f101 0814 	add.w	r8, r1, #20
 8004486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004494:	3301      	adds	r3, #1
 8004496:	429a      	cmp	r2, r3
 8004498:	fbb2 f6f3 	udiv	r6, r2, r3
 800449c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80044a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044a4:	d332      	bcc.n	800450c <quorem+0xa0>
 80044a6:	f04f 0e00 	mov.w	lr, #0
 80044aa:	4640      	mov	r0, r8
 80044ac:	46ac      	mov	ip, r5
 80044ae:	46f2      	mov	sl, lr
 80044b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80044b4:	b293      	uxth	r3, r2
 80044b6:	fb06 e303 	mla	r3, r6, r3, lr
 80044ba:	0c12      	lsrs	r2, r2, #16
 80044bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80044c0:	fb06 e202 	mla	r2, r6, r2, lr
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	ebaa 0303 	sub.w	r3, sl, r3
 80044ca:	f8dc a000 	ldr.w	sl, [ip]
 80044ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80044d2:	fa1f fa8a 	uxth.w	sl, sl
 80044d6:	4453      	add	r3, sl
 80044d8:	fa1f fa82 	uxth.w	sl, r2
 80044dc:	f8dc 2000 	ldr.w	r2, [ip]
 80044e0:	4581      	cmp	r9, r0
 80044e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80044e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80044f4:	f84c 3b04 	str.w	r3, [ip], #4
 80044f8:	d2da      	bcs.n	80044b0 <quorem+0x44>
 80044fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80044fe:	b92b      	cbnz	r3, 800450c <quorem+0xa0>
 8004500:	9b01      	ldr	r3, [sp, #4]
 8004502:	3b04      	subs	r3, #4
 8004504:	429d      	cmp	r5, r3
 8004506:	461a      	mov	r2, r3
 8004508:	d32f      	bcc.n	800456a <quorem+0xfe>
 800450a:	613c      	str	r4, [r7, #16]
 800450c:	4638      	mov	r0, r7
 800450e:	f001 f8dd 	bl	80056cc <__mcmp>
 8004512:	2800      	cmp	r0, #0
 8004514:	db25      	blt.n	8004562 <quorem+0xf6>
 8004516:	4628      	mov	r0, r5
 8004518:	f04f 0c00 	mov.w	ip, #0
 800451c:	3601      	adds	r6, #1
 800451e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004522:	f8d0 e000 	ldr.w	lr, [r0]
 8004526:	b28b      	uxth	r3, r1
 8004528:	ebac 0303 	sub.w	r3, ip, r3
 800452c:	fa1f f28e 	uxth.w	r2, lr
 8004530:	4413      	add	r3, r2
 8004532:	0c0a      	lsrs	r2, r1, #16
 8004534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800453c:	b29b      	uxth	r3, r3
 800453e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004542:	45c1      	cmp	r9, r8
 8004544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004548:	f840 3b04 	str.w	r3, [r0], #4
 800454c:	d2e7      	bcs.n	800451e <quorem+0xb2>
 800454e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004556:	b922      	cbnz	r2, 8004562 <quorem+0xf6>
 8004558:	3b04      	subs	r3, #4
 800455a:	429d      	cmp	r5, r3
 800455c:	461a      	mov	r2, r3
 800455e:	d30a      	bcc.n	8004576 <quorem+0x10a>
 8004560:	613c      	str	r4, [r7, #16]
 8004562:	4630      	mov	r0, r6
 8004564:	b003      	add	sp, #12
 8004566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	3b04      	subs	r3, #4
 800456e:	2a00      	cmp	r2, #0
 8004570:	d1cb      	bne.n	800450a <quorem+0x9e>
 8004572:	3c01      	subs	r4, #1
 8004574:	e7c6      	b.n	8004504 <quorem+0x98>
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	3b04      	subs	r3, #4
 800457a:	2a00      	cmp	r2, #0
 800457c:	d1f0      	bne.n	8004560 <quorem+0xf4>
 800457e:	3c01      	subs	r4, #1
 8004580:	e7eb      	b.n	800455a <quorem+0xee>
 8004582:	2000      	movs	r0, #0
 8004584:	e7ee      	b.n	8004564 <quorem+0xf8>
	...

08004588 <_dtoa_r>:
 8004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458c:	4616      	mov	r6, r2
 800458e:	461f      	mov	r7, r3
 8004590:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004592:	b099      	sub	sp, #100	; 0x64
 8004594:	4605      	mov	r5, r0
 8004596:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800459a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800459e:	b974      	cbnz	r4, 80045be <_dtoa_r+0x36>
 80045a0:	2010      	movs	r0, #16
 80045a2:	f000 fdf5 	bl	8005190 <malloc>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6268      	str	r0, [r5, #36]	; 0x24
 80045aa:	b920      	cbnz	r0, 80045b6 <_dtoa_r+0x2e>
 80045ac:	21ea      	movs	r1, #234	; 0xea
 80045ae:	4bae      	ldr	r3, [pc, #696]	; (8004868 <_dtoa_r+0x2e0>)
 80045b0:	48ae      	ldr	r0, [pc, #696]	; (800486c <_dtoa_r+0x2e4>)
 80045b2:	f002 f85b 	bl	800666c <__assert_func>
 80045b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045ba:	6004      	str	r4, [r0, #0]
 80045bc:	60c4      	str	r4, [r0, #12]
 80045be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	b151      	cbz	r1, 80045da <_dtoa_r+0x52>
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	2301      	movs	r3, #1
 80045c8:	4093      	lsls	r3, r2
 80045ca:	604a      	str	r2, [r1, #4]
 80045cc:	608b      	str	r3, [r1, #8]
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fe42 	bl	8005258 <_Bfree>
 80045d4:	2200      	movs	r2, #0
 80045d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	1e3b      	subs	r3, r7, #0
 80045dc:	bfaf      	iteee	ge
 80045de:	2300      	movge	r3, #0
 80045e0:	2201      	movlt	r2, #1
 80045e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045e6:	9305      	strlt	r3, [sp, #20]
 80045e8:	bfa8      	it	ge
 80045ea:	f8c8 3000 	strge.w	r3, [r8]
 80045ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80045f2:	4b9f      	ldr	r3, [pc, #636]	; (8004870 <_dtoa_r+0x2e8>)
 80045f4:	bfb8      	it	lt
 80045f6:	f8c8 2000 	strlt.w	r2, [r8]
 80045fa:	ea33 0309 	bics.w	r3, r3, r9
 80045fe:	d119      	bne.n	8004634 <_dtoa_r+0xac>
 8004600:	f242 730f 	movw	r3, #9999	; 0x270f
 8004604:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800460c:	4333      	orrs	r3, r6
 800460e:	f000 8580 	beq.w	8005112 <_dtoa_r+0xb8a>
 8004612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004614:	b953      	cbnz	r3, 800462c <_dtoa_r+0xa4>
 8004616:	4b97      	ldr	r3, [pc, #604]	; (8004874 <_dtoa_r+0x2ec>)
 8004618:	e022      	b.n	8004660 <_dtoa_r+0xd8>
 800461a:	4b97      	ldr	r3, [pc, #604]	; (8004878 <_dtoa_r+0x2f0>)
 800461c:	9308      	str	r3, [sp, #32]
 800461e:	3308      	adds	r3, #8
 8004620:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	9808      	ldr	r0, [sp, #32]
 8004626:	b019      	add	sp, #100	; 0x64
 8004628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462c:	4b91      	ldr	r3, [pc, #580]	; (8004874 <_dtoa_r+0x2ec>)
 800462e:	9308      	str	r3, [sp, #32]
 8004630:	3303      	adds	r3, #3
 8004632:	e7f5      	b.n	8004620 <_dtoa_r+0x98>
 8004634:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004638:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800463c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004640:	2200      	movs	r2, #0
 8004642:	2300      	movs	r3, #0
 8004644:	f7fc f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 8004648:	4680      	mov	r8, r0
 800464a:	b158      	cbz	r0, 8004664 <_dtoa_r+0xdc>
 800464c:	2301      	movs	r3, #1
 800464e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8559 	beq.w	800510c <_dtoa_r+0xb84>
 800465a:	4888      	ldr	r0, [pc, #544]	; (800487c <_dtoa_r+0x2f4>)
 800465c:	6018      	str	r0, [r3, #0]
 800465e:	1e43      	subs	r3, r0, #1
 8004660:	9308      	str	r3, [sp, #32]
 8004662:	e7df      	b.n	8004624 <_dtoa_r+0x9c>
 8004664:	ab16      	add	r3, sp, #88	; 0x58
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	ab17      	add	r3, sp, #92	; 0x5c
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4628      	mov	r0, r5
 800466e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004672:	f001 f8d7 	bl	8005824 <__d2b>
 8004676:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800467a:	4682      	mov	sl, r0
 800467c:	2c00      	cmp	r4, #0
 800467e:	d07e      	beq.n	800477e <_dtoa_r+0x1f6>
 8004680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004686:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800468a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004692:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004696:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800469a:	2200      	movs	r2, #0
 800469c:	4b78      	ldr	r3, [pc, #480]	; (8004880 <_dtoa_r+0x2f8>)
 800469e:	f7fb fd63 	bl	8000168 <__aeabi_dsub>
 80046a2:	a36b      	add	r3, pc, #428	; (adr r3, 8004850 <_dtoa_r+0x2c8>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f7fb ff16 	bl	80004d8 <__aeabi_dmul>
 80046ac:	a36a      	add	r3, pc, #424	; (adr r3, 8004858 <_dtoa_r+0x2d0>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fb fd5b 	bl	800016c <__adddf3>
 80046b6:	4606      	mov	r6, r0
 80046b8:	4620      	mov	r0, r4
 80046ba:	460f      	mov	r7, r1
 80046bc:	f7fb fea2 	bl	8000404 <__aeabi_i2d>
 80046c0:	a367      	add	r3, pc, #412	; (adr r3, 8004860 <_dtoa_r+0x2d8>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f7fb ff07 	bl	80004d8 <__aeabi_dmul>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4630      	mov	r0, r6
 80046d0:	4639      	mov	r1, r7
 80046d2:	f7fb fd4b 	bl	800016c <__adddf3>
 80046d6:	4606      	mov	r6, r0
 80046d8:	460f      	mov	r7, r1
 80046da:	f7fc f9ad 	bl	8000a38 <__aeabi_d2iz>
 80046de:	2200      	movs	r2, #0
 80046e0:	4681      	mov	r9, r0
 80046e2:	2300      	movs	r3, #0
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fc f968 	bl	80009bc <__aeabi_dcmplt>
 80046ec:	b148      	cbz	r0, 8004702 <_dtoa_r+0x17a>
 80046ee:	4648      	mov	r0, r9
 80046f0:	f7fb fe88 	bl	8000404 <__aeabi_i2d>
 80046f4:	4632      	mov	r2, r6
 80046f6:	463b      	mov	r3, r7
 80046f8:	f7fc f956 	bl	80009a8 <__aeabi_dcmpeq>
 80046fc:	b908      	cbnz	r0, 8004702 <_dtoa_r+0x17a>
 80046fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8004702:	f1b9 0f16 	cmp.w	r9, #22
 8004706:	d857      	bhi.n	80047b8 <_dtoa_r+0x230>
 8004708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800470c:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <_dtoa_r+0x2fc>)
 800470e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fc f951 	bl	80009bc <__aeabi_dcmplt>
 800471a:	2800      	cmp	r0, #0
 800471c:	d04e      	beq.n	80047bc <_dtoa_r+0x234>
 800471e:	2300      	movs	r3, #0
 8004720:	f109 39ff 	add.w	r9, r9, #4294967295
 8004724:	930f      	str	r3, [sp, #60]	; 0x3c
 8004726:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004728:	1b1c      	subs	r4, r3, r4
 800472a:	1e63      	subs	r3, r4, #1
 800472c:	9309      	str	r3, [sp, #36]	; 0x24
 800472e:	bf49      	itett	mi
 8004730:	f1c4 0301 	rsbmi	r3, r4, #1
 8004734:	2300      	movpl	r3, #0
 8004736:	9306      	strmi	r3, [sp, #24]
 8004738:	2300      	movmi	r3, #0
 800473a:	bf54      	ite	pl
 800473c:	9306      	strpl	r3, [sp, #24]
 800473e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004740:	f1b9 0f00 	cmp.w	r9, #0
 8004744:	db3c      	blt.n	80047c0 <_dtoa_r+0x238>
 8004746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004748:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800474c:	444b      	add	r3, r9
 800474e:	9309      	str	r3, [sp, #36]	; 0x24
 8004750:	2300      	movs	r3, #0
 8004752:	930a      	str	r3, [sp, #40]	; 0x28
 8004754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004756:	2b09      	cmp	r3, #9
 8004758:	d86c      	bhi.n	8004834 <_dtoa_r+0x2ac>
 800475a:	2b05      	cmp	r3, #5
 800475c:	bfc4      	itt	gt
 800475e:	3b04      	subgt	r3, #4
 8004760:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004764:	bfc8      	it	gt
 8004766:	2400      	movgt	r4, #0
 8004768:	f1a3 0302 	sub.w	r3, r3, #2
 800476c:	bfd8      	it	le
 800476e:	2401      	movle	r4, #1
 8004770:	2b03      	cmp	r3, #3
 8004772:	f200 808b 	bhi.w	800488c <_dtoa_r+0x304>
 8004776:	e8df f003 	tbb	[pc, r3]
 800477a:	4f2d      	.short	0x4f2d
 800477c:	5b4d      	.short	0x5b4d
 800477e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004782:	441c      	add	r4, r3
 8004784:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004788:	2b20      	cmp	r3, #32
 800478a:	bfc3      	ittte	gt
 800478c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004790:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004794:	fa09 f303 	lslgt.w	r3, r9, r3
 8004798:	f1c3 0320 	rsble	r3, r3, #32
 800479c:	bfc6      	itte	gt
 800479e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80047a2:	4318      	orrgt	r0, r3
 80047a4:	fa06 f003 	lslle.w	r0, r6, r3
 80047a8:	f7fb fe1c 	bl	80003e4 <__aeabi_ui2d>
 80047ac:	2301      	movs	r3, #1
 80047ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80047b2:	3c01      	subs	r4, #1
 80047b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80047b6:	e770      	b.n	800469a <_dtoa_r+0x112>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e7b3      	b.n	8004724 <_dtoa_r+0x19c>
 80047bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80047be:	e7b2      	b.n	8004726 <_dtoa_r+0x19e>
 80047c0:	9b06      	ldr	r3, [sp, #24]
 80047c2:	eba3 0309 	sub.w	r3, r3, r9
 80047c6:	9306      	str	r3, [sp, #24]
 80047c8:	f1c9 0300 	rsb	r3, r9, #0
 80047cc:	930a      	str	r3, [sp, #40]	; 0x28
 80047ce:	2300      	movs	r3, #0
 80047d0:	930e      	str	r3, [sp, #56]	; 0x38
 80047d2:	e7bf      	b.n	8004754 <_dtoa_r+0x1cc>
 80047d4:	2300      	movs	r3, #0
 80047d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80047d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	dc59      	bgt.n	8004892 <_dtoa_r+0x30a>
 80047de:	f04f 0b01 	mov.w	fp, #1
 80047e2:	465b      	mov	r3, fp
 80047e4:	f8cd b008 	str.w	fp, [sp, #8]
 80047e8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80047ec:	2200      	movs	r2, #0
 80047ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80047f0:	6042      	str	r2, [r0, #4]
 80047f2:	2204      	movs	r2, #4
 80047f4:	f102 0614 	add.w	r6, r2, #20
 80047f8:	429e      	cmp	r6, r3
 80047fa:	6841      	ldr	r1, [r0, #4]
 80047fc:	d94f      	bls.n	800489e <_dtoa_r+0x316>
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 fcea 	bl	80051d8 <_Balloc>
 8004804:	9008      	str	r0, [sp, #32]
 8004806:	2800      	cmp	r0, #0
 8004808:	d14d      	bne.n	80048a6 <_dtoa_r+0x31e>
 800480a:	4602      	mov	r2, r0
 800480c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004810:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <_dtoa_r+0x300>)
 8004812:	e6cd      	b.n	80045b0 <_dtoa_r+0x28>
 8004814:	2301      	movs	r3, #1
 8004816:	e7de      	b.n	80047d6 <_dtoa_r+0x24e>
 8004818:	2300      	movs	r3, #0
 800481a:	930b      	str	r3, [sp, #44]	; 0x2c
 800481c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800481e:	eb09 0b03 	add.w	fp, r9, r3
 8004822:	f10b 0301 	add.w	r3, fp, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	9302      	str	r3, [sp, #8]
 800482a:	bfb8      	it	lt
 800482c:	2301      	movlt	r3, #1
 800482e:	e7dd      	b.n	80047ec <_dtoa_r+0x264>
 8004830:	2301      	movs	r3, #1
 8004832:	e7f2      	b.n	800481a <_dtoa_r+0x292>
 8004834:	2401      	movs	r4, #1
 8004836:	2300      	movs	r3, #0
 8004838:	940b      	str	r4, [sp, #44]	; 0x2c
 800483a:	9322      	str	r3, [sp, #136]	; 0x88
 800483c:	f04f 3bff 	mov.w	fp, #4294967295
 8004840:	2200      	movs	r2, #0
 8004842:	2312      	movs	r3, #18
 8004844:	f8cd b008 	str.w	fp, [sp, #8]
 8004848:	9223      	str	r2, [sp, #140]	; 0x8c
 800484a:	e7cf      	b.n	80047ec <_dtoa_r+0x264>
 800484c:	f3af 8000 	nop.w
 8004850:	636f4361 	.word	0x636f4361
 8004854:	3fd287a7 	.word	0x3fd287a7
 8004858:	8b60c8b3 	.word	0x8b60c8b3
 800485c:	3fc68a28 	.word	0x3fc68a28
 8004860:	509f79fb 	.word	0x509f79fb
 8004864:	3fd34413 	.word	0x3fd34413
 8004868:	0800720f 	.word	0x0800720f
 800486c:	08007226 	.word	0x08007226
 8004870:	7ff00000 	.word	0x7ff00000
 8004874:	0800720b 	.word	0x0800720b
 8004878:	08007202 	.word	0x08007202
 800487c:	0800740a 	.word	0x0800740a
 8004880:	3ff80000 	.word	0x3ff80000
 8004884:	08007320 	.word	0x08007320
 8004888:	08007285 	.word	0x08007285
 800488c:	2301      	movs	r3, #1
 800488e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004890:	e7d4      	b.n	800483c <_dtoa_r+0x2b4>
 8004892:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004896:	465b      	mov	r3, fp
 8004898:	f8cd b008 	str.w	fp, [sp, #8]
 800489c:	e7a6      	b.n	80047ec <_dtoa_r+0x264>
 800489e:	3101      	adds	r1, #1
 80048a0:	6041      	str	r1, [r0, #4]
 80048a2:	0052      	lsls	r2, r2, #1
 80048a4:	e7a6      	b.n	80047f4 <_dtoa_r+0x26c>
 80048a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048a8:	9a08      	ldr	r2, [sp, #32]
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	9b02      	ldr	r3, [sp, #8]
 80048ae:	2b0e      	cmp	r3, #14
 80048b0:	f200 80a8 	bhi.w	8004a04 <_dtoa_r+0x47c>
 80048b4:	2c00      	cmp	r4, #0
 80048b6:	f000 80a5 	beq.w	8004a04 <_dtoa_r+0x47c>
 80048ba:	f1b9 0f00 	cmp.w	r9, #0
 80048be:	dd34      	ble.n	800492a <_dtoa_r+0x3a2>
 80048c0:	4a9a      	ldr	r2, [pc, #616]	; (8004b2c <_dtoa_r+0x5a4>)
 80048c2:	f009 030f 	and.w	r3, r9, #15
 80048c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80048ca:	f419 7f80 	tst.w	r9, #256	; 0x100
 80048ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80048d6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80048da:	d016      	beq.n	800490a <_dtoa_r+0x382>
 80048dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048e0:	4b93      	ldr	r3, [pc, #588]	; (8004b30 <_dtoa_r+0x5a8>)
 80048e2:	2703      	movs	r7, #3
 80048e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048e8:	f7fb ff20 	bl	800072c <__aeabi_ddiv>
 80048ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048f0:	f004 040f 	and.w	r4, r4, #15
 80048f4:	4e8e      	ldr	r6, [pc, #568]	; (8004b30 <_dtoa_r+0x5a8>)
 80048f6:	b954      	cbnz	r4, 800490e <_dtoa_r+0x386>
 80048f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004900:	f7fb ff14 	bl	800072c <__aeabi_ddiv>
 8004904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004908:	e029      	b.n	800495e <_dtoa_r+0x3d6>
 800490a:	2702      	movs	r7, #2
 800490c:	e7f2      	b.n	80048f4 <_dtoa_r+0x36c>
 800490e:	07e1      	lsls	r1, r4, #31
 8004910:	d508      	bpl.n	8004924 <_dtoa_r+0x39c>
 8004912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004916:	e9d6 2300 	ldrd	r2, r3, [r6]
 800491a:	f7fb fddd 	bl	80004d8 <__aeabi_dmul>
 800491e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004922:	3701      	adds	r7, #1
 8004924:	1064      	asrs	r4, r4, #1
 8004926:	3608      	adds	r6, #8
 8004928:	e7e5      	b.n	80048f6 <_dtoa_r+0x36e>
 800492a:	f000 80a5 	beq.w	8004a78 <_dtoa_r+0x4f0>
 800492e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004932:	f1c9 0400 	rsb	r4, r9, #0
 8004936:	4b7d      	ldr	r3, [pc, #500]	; (8004b2c <_dtoa_r+0x5a4>)
 8004938:	f004 020f 	and.w	r2, r4, #15
 800493c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fdc8 	bl	80004d8 <__aeabi_dmul>
 8004948:	2702      	movs	r7, #2
 800494a:	2300      	movs	r3, #0
 800494c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004950:	4e77      	ldr	r6, [pc, #476]	; (8004b30 <_dtoa_r+0x5a8>)
 8004952:	1124      	asrs	r4, r4, #4
 8004954:	2c00      	cmp	r4, #0
 8004956:	f040 8084 	bne.w	8004a62 <_dtoa_r+0x4da>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1d2      	bne.n	8004904 <_dtoa_r+0x37c>
 800495e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 808b 	beq.w	8004a7c <_dtoa_r+0x4f4>
 8004966:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800496a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800496e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004972:	2200      	movs	r2, #0
 8004974:	4b6f      	ldr	r3, [pc, #444]	; (8004b34 <_dtoa_r+0x5ac>)
 8004976:	f7fc f821 	bl	80009bc <__aeabi_dcmplt>
 800497a:	2800      	cmp	r0, #0
 800497c:	d07e      	beq.n	8004a7c <_dtoa_r+0x4f4>
 800497e:	9b02      	ldr	r3, [sp, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d07b      	beq.n	8004a7c <_dtoa_r+0x4f4>
 8004984:	f1bb 0f00 	cmp.w	fp, #0
 8004988:	dd38      	ble.n	80049fc <_dtoa_r+0x474>
 800498a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800498e:	2200      	movs	r2, #0
 8004990:	4b69      	ldr	r3, [pc, #420]	; (8004b38 <_dtoa_r+0x5b0>)
 8004992:	f7fb fda1 	bl	80004d8 <__aeabi_dmul>
 8004996:	465c      	mov	r4, fp
 8004998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800499c:	f109 38ff 	add.w	r8, r9, #4294967295
 80049a0:	3701      	adds	r7, #1
 80049a2:	4638      	mov	r0, r7
 80049a4:	f7fb fd2e 	bl	8000404 <__aeabi_i2d>
 80049a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049ac:	f7fb fd94 	bl	80004d8 <__aeabi_dmul>
 80049b0:	2200      	movs	r2, #0
 80049b2:	4b62      	ldr	r3, [pc, #392]	; (8004b3c <_dtoa_r+0x5b4>)
 80049b4:	f7fb fbda 	bl	800016c <__adddf3>
 80049b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80049bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049c0:	9611      	str	r6, [sp, #68]	; 0x44
 80049c2:	2c00      	cmp	r4, #0
 80049c4:	d15d      	bne.n	8004a82 <_dtoa_r+0x4fa>
 80049c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049ca:	2200      	movs	r2, #0
 80049cc:	4b5c      	ldr	r3, [pc, #368]	; (8004b40 <_dtoa_r+0x5b8>)
 80049ce:	f7fb fbcb 	bl	8000168 <__aeabi_dsub>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049da:	4633      	mov	r3, r6
 80049dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049de:	f7fc f80b 	bl	80009f8 <__aeabi_dcmpgt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f040 829e 	bne.w	8004f24 <_dtoa_r+0x99c>
 80049e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80049f2:	f7fb ffe3 	bl	80009bc <__aeabi_dcmplt>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	f040 8292 	bne.w	8004f20 <_dtoa_r+0x998>
 80049fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004a00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f2c0 8153 	blt.w	8004cb2 <_dtoa_r+0x72a>
 8004a0c:	f1b9 0f0e 	cmp.w	r9, #14
 8004a10:	f300 814f 	bgt.w	8004cb2 <_dtoa_r+0x72a>
 8004a14:	4b45      	ldr	r3, [pc, #276]	; (8004b2c <_dtoa_r+0x5a4>)
 8004a16:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004a1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f280 80db 	bge.w	8004be0 <_dtoa_r+0x658>
 8004a2a:	9b02      	ldr	r3, [sp, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f300 80d7 	bgt.w	8004be0 <_dtoa_r+0x658>
 8004a32:	f040 8274 	bne.w	8004f1e <_dtoa_r+0x996>
 8004a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <_dtoa_r+0x5b8>)
 8004a3e:	f7fb fd4b 	bl	80004d8 <__aeabi_dmul>
 8004a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a46:	f7fb ffcd 	bl	80009e4 <__aeabi_dcmpge>
 8004a4a:	9c02      	ldr	r4, [sp, #8]
 8004a4c:	4626      	mov	r6, r4
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	f040 824a 	bne.w	8004ee8 <_dtoa_r+0x960>
 8004a54:	2331      	movs	r3, #49	; 0x31
 8004a56:	9f08      	ldr	r7, [sp, #32]
 8004a58:	f109 0901 	add.w	r9, r9, #1
 8004a5c:	f807 3b01 	strb.w	r3, [r7], #1
 8004a60:	e246      	b.n	8004ef0 <_dtoa_r+0x968>
 8004a62:	07e2      	lsls	r2, r4, #31
 8004a64:	d505      	bpl.n	8004a72 <_dtoa_r+0x4ea>
 8004a66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a6a:	f7fb fd35 	bl	80004d8 <__aeabi_dmul>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	3701      	adds	r7, #1
 8004a72:	1064      	asrs	r4, r4, #1
 8004a74:	3608      	adds	r6, #8
 8004a76:	e76d      	b.n	8004954 <_dtoa_r+0x3cc>
 8004a78:	2702      	movs	r7, #2
 8004a7a:	e770      	b.n	800495e <_dtoa_r+0x3d6>
 8004a7c:	46c8      	mov	r8, r9
 8004a7e:	9c02      	ldr	r4, [sp, #8]
 8004a80:	e78f      	b.n	80049a2 <_dtoa_r+0x41a>
 8004a82:	9908      	ldr	r1, [sp, #32]
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <_dtoa_r+0x5a4>)
 8004a86:	4421      	add	r1, r4
 8004a88:	9112      	str	r1, [sp, #72]	; 0x48
 8004a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	d055      	beq.n	8004b48 <_dtoa_r+0x5c0>
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4929      	ldr	r1, [pc, #164]	; (8004b44 <_dtoa_r+0x5bc>)
 8004aa0:	f7fb fe44 	bl	800072c <__aeabi_ddiv>
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	f7fb fb5e 	bl	8000168 <__aeabi_dsub>
 8004aac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ab0:	9f08      	ldr	r7, [sp, #32]
 8004ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab6:	f7fb ffbf 	bl	8000a38 <__aeabi_d2iz>
 8004aba:	4604      	mov	r4, r0
 8004abc:	f7fb fca2 	bl	8000404 <__aeabi_i2d>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ac8:	f7fb fb4e 	bl	8000168 <__aeabi_dsub>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	3430      	adds	r4, #48	; 0x30
 8004ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ada:	f807 4b01 	strb.w	r4, [r7], #1
 8004ade:	f7fb ff6d 	bl	80009bc <__aeabi_dcmplt>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d174      	bne.n	8004bd0 <_dtoa_r+0x648>
 8004ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aea:	2000      	movs	r0, #0
 8004aec:	4911      	ldr	r1, [pc, #68]	; (8004b34 <_dtoa_r+0x5ac>)
 8004aee:	f7fb fb3b 	bl	8000168 <__aeabi_dsub>
 8004af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004af6:	f7fb ff61 	bl	80009bc <__aeabi_dcmplt>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	f040 80b6 	bne.w	8004c6c <_dtoa_r+0x6e4>
 8004b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b02:	429f      	cmp	r7, r3
 8004b04:	f43f af7a 	beq.w	80049fc <_dtoa_r+0x474>
 8004b08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <_dtoa_r+0x5b0>)
 8004b10:	f7fb fce2 	bl	80004d8 <__aeabi_dmul>
 8004b14:	2200      	movs	r2, #0
 8004b16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <_dtoa_r+0x5b0>)
 8004b20:	f7fb fcda 	bl	80004d8 <__aeabi_dmul>
 8004b24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b28:	e7c3      	b.n	8004ab2 <_dtoa_r+0x52a>
 8004b2a:	bf00      	nop
 8004b2c:	08007320 	.word	0x08007320
 8004b30:	080072f8 	.word	0x080072f8
 8004b34:	3ff00000 	.word	0x3ff00000
 8004b38:	40240000 	.word	0x40240000
 8004b3c:	401c0000 	.word	0x401c0000
 8004b40:	40140000 	.word	0x40140000
 8004b44:	3fe00000 	.word	0x3fe00000
 8004b48:	4630      	mov	r0, r6
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	f7fb fcc4 	bl	80004d8 <__aeabi_dmul>
 8004b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b56:	9c08      	ldr	r4, [sp, #32]
 8004b58:	9314      	str	r3, [sp, #80]	; 0x50
 8004b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b5e:	f7fb ff6b 	bl	8000a38 <__aeabi_d2iz>
 8004b62:	9015      	str	r0, [sp, #84]	; 0x54
 8004b64:	f7fb fc4e 	bl	8000404 <__aeabi_i2d>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b70:	f7fb fafa 	bl	8000168 <__aeabi_dsub>
 8004b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b76:	4606      	mov	r6, r0
 8004b78:	3330      	adds	r3, #48	; 0x30
 8004b7a:	f804 3b01 	strb.w	r3, [r4], #1
 8004b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b80:	460f      	mov	r7, r1
 8004b82:	429c      	cmp	r4, r3
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	d124      	bne.n	8004bd4 <_dtoa_r+0x64c>
 8004b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b8e:	4bb3      	ldr	r3, [pc, #716]	; (8004e5c <_dtoa_r+0x8d4>)
 8004b90:	f7fb faec 	bl	800016c <__adddf3>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4630      	mov	r0, r6
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	f7fb ff2c 	bl	80009f8 <__aeabi_dcmpgt>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d162      	bne.n	8004c6a <_dtoa_r+0x6e2>
 8004ba4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ba8:	2000      	movs	r0, #0
 8004baa:	49ac      	ldr	r1, [pc, #688]	; (8004e5c <_dtoa_r+0x8d4>)
 8004bac:	f7fb fadc 	bl	8000168 <__aeabi_dsub>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	f7fb ff00 	bl	80009bc <__aeabi_dcmplt>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	f43f af1d 	beq.w	80049fc <_dtoa_r+0x474>
 8004bc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004bc4:	1e7b      	subs	r3, r7, #1
 8004bc6:	9314      	str	r3, [sp, #80]	; 0x50
 8004bc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d0f8      	beq.n	8004bc2 <_dtoa_r+0x63a>
 8004bd0:	46c1      	mov	r9, r8
 8004bd2:	e03a      	b.n	8004c4a <_dtoa_r+0x6c2>
 8004bd4:	4ba2      	ldr	r3, [pc, #648]	; (8004e60 <_dtoa_r+0x8d8>)
 8004bd6:	f7fb fc7f 	bl	80004d8 <__aeabi_dmul>
 8004bda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bde:	e7bc      	b.n	8004b5a <_dtoa_r+0x5d2>
 8004be0:	9f08      	ldr	r7, [sp, #32]
 8004be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bea:	f7fb fd9f 	bl	800072c <__aeabi_ddiv>
 8004bee:	f7fb ff23 	bl	8000a38 <__aeabi_d2iz>
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	f7fb fc06 	bl	8000404 <__aeabi_i2d>
 8004bf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bfc:	f7fb fc6c 	bl	80004d8 <__aeabi_dmul>
 8004c00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004c04:	460b      	mov	r3, r1
 8004c06:	4602      	mov	r2, r0
 8004c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c0c:	f7fb faac 	bl	8000168 <__aeabi_dsub>
 8004c10:	f807 6b01 	strb.w	r6, [r7], #1
 8004c14:	9e08      	ldr	r6, [sp, #32]
 8004c16:	9b02      	ldr	r3, [sp, #8]
 8004c18:	1bbe      	subs	r6, r7, r6
 8004c1a:	42b3      	cmp	r3, r6
 8004c1c:	d13a      	bne.n	8004c94 <_dtoa_r+0x70c>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	f7fb faa3 	bl	800016c <__adddf3>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c32:	f7fb fee1 	bl	80009f8 <__aeabi_dcmpgt>
 8004c36:	bb58      	cbnz	r0, 8004c90 <_dtoa_r+0x708>
 8004c38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c40:	f7fb feb2 	bl	80009a8 <__aeabi_dcmpeq>
 8004c44:	b108      	cbz	r0, 8004c4a <_dtoa_r+0x6c2>
 8004c46:	07e1      	lsls	r1, r4, #31
 8004c48:	d422      	bmi.n	8004c90 <_dtoa_r+0x708>
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	4651      	mov	r1, sl
 8004c4e:	f000 fb03 	bl	8005258 <_Bfree>
 8004c52:	2300      	movs	r3, #0
 8004c54:	703b      	strb	r3, [r7, #0]
 8004c56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004c58:	f109 0001 	add.w	r0, r9, #1
 8004c5c:	6018      	str	r0, [r3, #0]
 8004c5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f43f acdf 	beq.w	8004624 <_dtoa_r+0x9c>
 8004c66:	601f      	str	r7, [r3, #0]
 8004c68:	e4dc      	b.n	8004624 <_dtoa_r+0x9c>
 8004c6a:	4627      	mov	r7, r4
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	461f      	mov	r7, r3
 8004c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c74:	2a39      	cmp	r2, #57	; 0x39
 8004c76:	d107      	bne.n	8004c88 <_dtoa_r+0x700>
 8004c78:	9a08      	ldr	r2, [sp, #32]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d1f7      	bne.n	8004c6e <_dtoa_r+0x6e6>
 8004c7e:	2230      	movs	r2, #48	; 0x30
 8004c80:	9908      	ldr	r1, [sp, #32]
 8004c82:	f108 0801 	add.w	r8, r8, #1
 8004c86:	700a      	strb	r2, [r1, #0]
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	3201      	adds	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e79f      	b.n	8004bd0 <_dtoa_r+0x648>
 8004c90:	46c8      	mov	r8, r9
 8004c92:	e7eb      	b.n	8004c6c <_dtoa_r+0x6e4>
 8004c94:	2200      	movs	r2, #0
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <_dtoa_r+0x8d8>)
 8004c98:	f7fb fc1e 	bl	80004d8 <__aeabi_dmul>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f7fb fe7e 	bl	80009a8 <__aeabi_dcmpeq>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d098      	beq.n	8004be2 <_dtoa_r+0x65a>
 8004cb0:	e7cb      	b.n	8004c4a <_dtoa_r+0x6c2>
 8004cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	f000 80cd 	beq.w	8004e54 <_dtoa_r+0x8cc>
 8004cba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004cbc:	2a01      	cmp	r2, #1
 8004cbe:	f300 80af 	bgt.w	8004e20 <_dtoa_r+0x898>
 8004cc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	f000 80a7 	beq.w	8004e18 <_dtoa_r+0x890>
 8004cca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004cce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004cd0:	9f06      	ldr	r7, [sp, #24]
 8004cd2:	9a06      	ldr	r2, [sp, #24]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	441a      	add	r2, r3
 8004cd8:	9206      	str	r2, [sp, #24]
 8004cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cdc:	4628      	mov	r0, r5
 8004cde:	441a      	add	r2, r3
 8004ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce2:	f000 fb73 	bl	80053cc <__i2b>
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	2f00      	cmp	r7, #0
 8004cea:	dd0c      	ble.n	8004d06 <_dtoa_r+0x77e>
 8004cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	dd09      	ble.n	8004d06 <_dtoa_r+0x77e>
 8004cf2:	42bb      	cmp	r3, r7
 8004cf4:	bfa8      	it	ge
 8004cf6:	463b      	movge	r3, r7
 8004cf8:	9a06      	ldr	r2, [sp, #24]
 8004cfa:	1aff      	subs	r7, r7, r3
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	9206      	str	r2, [sp, #24]
 8004d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	9309      	str	r3, [sp, #36]	; 0x24
 8004d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d08:	b1f3      	cbz	r3, 8004d48 <_dtoa_r+0x7c0>
 8004d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a9 	beq.w	8004e64 <_dtoa_r+0x8dc>
 8004d12:	2c00      	cmp	r4, #0
 8004d14:	dd10      	ble.n	8004d38 <_dtoa_r+0x7b0>
 8004d16:	4631      	mov	r1, r6
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 fc10 	bl	8005540 <__pow5mult>
 8004d20:	4652      	mov	r2, sl
 8004d22:	4601      	mov	r1, r0
 8004d24:	4606      	mov	r6, r0
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 fb66 	bl	80053f8 <__multiply>
 8004d2c:	4680      	mov	r8, r0
 8004d2e:	4651      	mov	r1, sl
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 fa91 	bl	8005258 <_Bfree>
 8004d36:	46c2      	mov	sl, r8
 8004d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d3a:	1b1a      	subs	r2, r3, r4
 8004d3c:	d004      	beq.n	8004d48 <_dtoa_r+0x7c0>
 8004d3e:	4651      	mov	r1, sl
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 fbfd 	bl	8005540 <__pow5mult>
 8004d46:	4682      	mov	sl, r0
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 fb3e 	bl	80053cc <__i2b>
 8004d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d52:	4604      	mov	r4, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f340 8087 	ble.w	8004e68 <_dtoa_r+0x8e0>
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4601      	mov	r1, r0
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 fbee 	bl	8005540 <__pow5mult>
 8004d64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d66:	4604      	mov	r4, r0
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	f340 8080 	ble.w	8004e6e <_dtoa_r+0x8e6>
 8004d6e:	f04f 0800 	mov.w	r8, #0
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d78:	6918      	ldr	r0, [r3, #16]
 8004d7a:	f000 fad9 	bl	8005330 <__hi0bits>
 8004d7e:	f1c0 0020 	rsb	r0, r0, #32
 8004d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d84:	4418      	add	r0, r3
 8004d86:	f010 001f 	ands.w	r0, r0, #31
 8004d8a:	f000 8092 	beq.w	8004eb2 <_dtoa_r+0x92a>
 8004d8e:	f1c0 0320 	rsb	r3, r0, #32
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	f340 808a 	ble.w	8004eac <_dtoa_r+0x924>
 8004d98:	f1c0 001c 	rsb	r0, r0, #28
 8004d9c:	9b06      	ldr	r3, [sp, #24]
 8004d9e:	4407      	add	r7, r0
 8004da0:	4403      	add	r3, r0
 8004da2:	9306      	str	r3, [sp, #24]
 8004da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da6:	4403      	add	r3, r0
 8004da8:	9309      	str	r3, [sp, #36]	; 0x24
 8004daa:	9b06      	ldr	r3, [sp, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dd05      	ble.n	8004dbc <_dtoa_r+0x834>
 8004db0:	4651      	mov	r1, sl
 8004db2:	461a      	mov	r2, r3
 8004db4:	4628      	mov	r0, r5
 8004db6:	f000 fc1d 	bl	80055f4 <__lshift>
 8004dba:	4682      	mov	sl, r0
 8004dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	dd05      	ble.n	8004dce <_dtoa_r+0x846>
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fc14 	bl	80055f4 <__lshift>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d070      	beq.n	8004eb6 <_dtoa_r+0x92e>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	f000 fc78 	bl	80056cc <__mcmp>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	da6a      	bge.n	8004eb6 <_dtoa_r+0x92e>
 8004de0:	2300      	movs	r3, #0
 8004de2:	4651      	mov	r1, sl
 8004de4:	220a      	movs	r2, #10
 8004de6:	4628      	mov	r0, r5
 8004de8:	f000 fa58 	bl	800529c <__multadd>
 8004dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dee:	4682      	mov	sl, r0
 8004df0:	f109 39ff 	add.w	r9, r9, #4294967295
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8193 	beq.w	8005120 <_dtoa_r+0xb98>
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	220a      	movs	r2, #10
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 fa4b 	bl	800529c <__multadd>
 8004e06:	f1bb 0f00 	cmp.w	fp, #0
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	f300 8093 	bgt.w	8004f36 <_dtoa_r+0x9ae>
 8004e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	dc57      	bgt.n	8004ec6 <_dtoa_r+0x93e>
 8004e16:	e08e      	b.n	8004f36 <_dtoa_r+0x9ae>
 8004e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e1e:	e756      	b.n	8004cce <_dtoa_r+0x746>
 8004e20:	9b02      	ldr	r3, [sp, #8]
 8004e22:	1e5c      	subs	r4, r3, #1
 8004e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	bfb7      	itett	lt
 8004e2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004e2c:	1b1c      	subge	r4, r3, r4
 8004e2e:	1ae2      	sublt	r2, r4, r3
 8004e30:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004e32:	bfbe      	ittt	lt
 8004e34:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004e36:	189b      	addlt	r3, r3, r2
 8004e38:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004e3a:	9b02      	ldr	r3, [sp, #8]
 8004e3c:	bfb8      	it	lt
 8004e3e:	2400      	movlt	r4, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bfbb      	ittet	lt
 8004e44:	9b06      	ldrlt	r3, [sp, #24]
 8004e46:	9a02      	ldrlt	r2, [sp, #8]
 8004e48:	9f06      	ldrge	r7, [sp, #24]
 8004e4a:	1a9f      	sublt	r7, r3, r2
 8004e4c:	bfac      	ite	ge
 8004e4e:	9b02      	ldrge	r3, [sp, #8]
 8004e50:	2300      	movlt	r3, #0
 8004e52:	e73e      	b.n	8004cd2 <_dtoa_r+0x74a>
 8004e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e56:	9f06      	ldr	r7, [sp, #24]
 8004e58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004e5a:	e745      	b.n	8004ce8 <_dtoa_r+0x760>
 8004e5c:	3fe00000 	.word	0x3fe00000
 8004e60:	40240000 	.word	0x40240000
 8004e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e66:	e76a      	b.n	8004d3e <_dtoa_r+0x7b6>
 8004e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	dc19      	bgt.n	8004ea2 <_dtoa_r+0x91a>
 8004e6e:	9b04      	ldr	r3, [sp, #16]
 8004e70:	b9bb      	cbnz	r3, 8004ea2 <_dtoa_r+0x91a>
 8004e72:	9b05      	ldr	r3, [sp, #20]
 8004e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e78:	b99b      	cbnz	r3, 8004ea2 <_dtoa_r+0x91a>
 8004e7a:	9b05      	ldr	r3, [sp, #20]
 8004e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e80:	0d1b      	lsrs	r3, r3, #20
 8004e82:	051b      	lsls	r3, r3, #20
 8004e84:	b183      	cbz	r3, 8004ea8 <_dtoa_r+0x920>
 8004e86:	f04f 0801 	mov.w	r8, #1
 8004e8a:	9b06      	ldr	r3, [sp, #24]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	9306      	str	r3, [sp, #24]
 8004e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e92:	3301      	adds	r3, #1
 8004e94:	9309      	str	r3, [sp, #36]	; 0x24
 8004e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f af6a 	bne.w	8004d72 <_dtoa_r+0x7ea>
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e76f      	b.n	8004d82 <_dtoa_r+0x7fa>
 8004ea2:	f04f 0800 	mov.w	r8, #0
 8004ea6:	e7f6      	b.n	8004e96 <_dtoa_r+0x90e>
 8004ea8:	4698      	mov	r8, r3
 8004eaa:	e7f4      	b.n	8004e96 <_dtoa_r+0x90e>
 8004eac:	f43f af7d 	beq.w	8004daa <_dtoa_r+0x822>
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	301c      	adds	r0, #28
 8004eb4:	e772      	b.n	8004d9c <_dtoa_r+0x814>
 8004eb6:	9b02      	ldr	r3, [sp, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dc36      	bgt.n	8004f2a <_dtoa_r+0x9a2>
 8004ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	dd33      	ble.n	8004f2a <_dtoa_r+0x9a2>
 8004ec2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004ec6:	f1bb 0f00 	cmp.w	fp, #0
 8004eca:	d10d      	bne.n	8004ee8 <_dtoa_r+0x960>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	465b      	mov	r3, fp
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 f9e2 	bl	800529c <__multadd>
 8004ed8:	4601      	mov	r1, r0
 8004eda:	4604      	mov	r4, r0
 8004edc:	4650      	mov	r0, sl
 8004ede:	f000 fbf5 	bl	80056cc <__mcmp>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	f73f adb6 	bgt.w	8004a54 <_dtoa_r+0x4cc>
 8004ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004eea:	9f08      	ldr	r7, [sp, #32]
 8004eec:	ea6f 0903 	mvn.w	r9, r3
 8004ef0:	f04f 0800 	mov.w	r8, #0
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 f9ae 	bl	8005258 <_Bfree>
 8004efc:	2e00      	cmp	r6, #0
 8004efe:	f43f aea4 	beq.w	8004c4a <_dtoa_r+0x6c2>
 8004f02:	f1b8 0f00 	cmp.w	r8, #0
 8004f06:	d005      	beq.n	8004f14 <_dtoa_r+0x98c>
 8004f08:	45b0      	cmp	r8, r6
 8004f0a:	d003      	beq.n	8004f14 <_dtoa_r+0x98c>
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 f9a2 	bl	8005258 <_Bfree>
 8004f14:	4631      	mov	r1, r6
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f99e 	bl	8005258 <_Bfree>
 8004f1c:	e695      	b.n	8004c4a <_dtoa_r+0x6c2>
 8004f1e:	2400      	movs	r4, #0
 8004f20:	4626      	mov	r6, r4
 8004f22:	e7e1      	b.n	8004ee8 <_dtoa_r+0x960>
 8004f24:	46c1      	mov	r9, r8
 8004f26:	4626      	mov	r6, r4
 8004f28:	e594      	b.n	8004a54 <_dtoa_r+0x4cc>
 8004f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80fc 	beq.w	800512e <_dtoa_r+0xba6>
 8004f36:	2f00      	cmp	r7, #0
 8004f38:	dd05      	ble.n	8004f46 <_dtoa_r+0x9be>
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	463a      	mov	r2, r7
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f000 fb58 	bl	80055f4 <__lshift>
 8004f44:	4606      	mov	r6, r0
 8004f46:	f1b8 0f00 	cmp.w	r8, #0
 8004f4a:	d05c      	beq.n	8005006 <_dtoa_r+0xa7e>
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	6871      	ldr	r1, [r6, #4]
 8004f50:	f000 f942 	bl	80051d8 <_Balloc>
 8004f54:	4607      	mov	r7, r0
 8004f56:	b928      	cbnz	r0, 8004f64 <_dtoa_r+0x9dc>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004f5e:	4b7e      	ldr	r3, [pc, #504]	; (8005158 <_dtoa_r+0xbd0>)
 8004f60:	f7ff bb26 	b.w	80045b0 <_dtoa_r+0x28>
 8004f64:	6932      	ldr	r2, [r6, #16]
 8004f66:	f106 010c 	add.w	r1, r6, #12
 8004f6a:	3202      	adds	r2, #2
 8004f6c:	0092      	lsls	r2, r2, #2
 8004f6e:	300c      	adds	r0, #12
 8004f70:	f000 f924 	bl	80051bc <memcpy>
 8004f74:	2201      	movs	r2, #1
 8004f76:	4639      	mov	r1, r7
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 fb3b 	bl	80055f4 <__lshift>
 8004f7e:	46b0      	mov	r8, r6
 8004f80:	4606      	mov	r6, r0
 8004f82:	9b08      	ldr	r3, [sp, #32]
 8004f84:	3301      	adds	r3, #1
 8004f86:	9302      	str	r3, [sp, #8]
 8004f88:	9b08      	ldr	r3, [sp, #32]
 8004f8a:	445b      	add	r3, fp
 8004f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	9309      	str	r3, [sp, #36]	; 0x24
 8004f96:	9b02      	ldr	r3, [sp, #8]
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4650      	mov	r0, sl
 8004f9c:	f103 3bff 	add.w	fp, r3, #4294967295
 8004fa0:	f7ff fa64 	bl	800446c <quorem>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	3330      	adds	r3, #48	; 0x30
 8004faa:	9004      	str	r0, [sp, #16]
 8004fac:	4650      	mov	r0, sl
 8004fae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fb0:	f000 fb8c 	bl	80056cc <__mcmp>
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	9006      	str	r0, [sp, #24]
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 fba2 	bl	8005704 <__mdiff>
 8004fc0:	68c2      	ldr	r2, [r0, #12]
 8004fc2:	4607      	mov	r7, r0
 8004fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc6:	bb02      	cbnz	r2, 800500a <_dtoa_r+0xa82>
 8004fc8:	4601      	mov	r1, r0
 8004fca:	4650      	mov	r0, sl
 8004fcc:	f000 fb7e 	bl	80056cc <__mcmp>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004fdc:	f000 f93c 	bl	8005258 <_Bfree>
 8004fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fe4:	9f02      	ldr	r7, [sp, #8]
 8004fe6:	ea43 0102 	orr.w	r1, r3, r2
 8004fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fec:	430b      	orrs	r3, r1
 8004fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ff0:	d10d      	bne.n	800500e <_dtoa_r+0xa86>
 8004ff2:	2b39      	cmp	r3, #57	; 0x39
 8004ff4:	d027      	beq.n	8005046 <_dtoa_r+0xabe>
 8004ff6:	9a06      	ldr	r2, [sp, #24]
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	dd01      	ble.n	8005000 <_dtoa_r+0xa78>
 8004ffc:	9b04      	ldr	r3, [sp, #16]
 8004ffe:	3331      	adds	r3, #49	; 0x31
 8005000:	f88b 3000 	strb.w	r3, [fp]
 8005004:	e776      	b.n	8004ef4 <_dtoa_r+0x96c>
 8005006:	4630      	mov	r0, r6
 8005008:	e7b9      	b.n	8004f7e <_dtoa_r+0x9f6>
 800500a:	2201      	movs	r2, #1
 800500c:	e7e2      	b.n	8004fd4 <_dtoa_r+0xa4c>
 800500e:	9906      	ldr	r1, [sp, #24]
 8005010:	2900      	cmp	r1, #0
 8005012:	db04      	blt.n	800501e <_dtoa_r+0xa96>
 8005014:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005016:	4301      	orrs	r1, r0
 8005018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800501a:	4301      	orrs	r1, r0
 800501c:	d120      	bne.n	8005060 <_dtoa_r+0xad8>
 800501e:	2a00      	cmp	r2, #0
 8005020:	ddee      	ble.n	8005000 <_dtoa_r+0xa78>
 8005022:	4651      	mov	r1, sl
 8005024:	2201      	movs	r2, #1
 8005026:	4628      	mov	r0, r5
 8005028:	9302      	str	r3, [sp, #8]
 800502a:	f000 fae3 	bl	80055f4 <__lshift>
 800502e:	4621      	mov	r1, r4
 8005030:	4682      	mov	sl, r0
 8005032:	f000 fb4b 	bl	80056cc <__mcmp>
 8005036:	2800      	cmp	r0, #0
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	dc02      	bgt.n	8005042 <_dtoa_r+0xaba>
 800503c:	d1e0      	bne.n	8005000 <_dtoa_r+0xa78>
 800503e:	07da      	lsls	r2, r3, #31
 8005040:	d5de      	bpl.n	8005000 <_dtoa_r+0xa78>
 8005042:	2b39      	cmp	r3, #57	; 0x39
 8005044:	d1da      	bne.n	8004ffc <_dtoa_r+0xa74>
 8005046:	2339      	movs	r3, #57	; 0x39
 8005048:	f88b 3000 	strb.w	r3, [fp]
 800504c:	463b      	mov	r3, r7
 800504e:	461f      	mov	r7, r3
 8005050:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005054:	3b01      	subs	r3, #1
 8005056:	2a39      	cmp	r2, #57	; 0x39
 8005058:	d050      	beq.n	80050fc <_dtoa_r+0xb74>
 800505a:	3201      	adds	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e749      	b.n	8004ef4 <_dtoa_r+0x96c>
 8005060:	2a00      	cmp	r2, #0
 8005062:	dd03      	ble.n	800506c <_dtoa_r+0xae4>
 8005064:	2b39      	cmp	r3, #57	; 0x39
 8005066:	d0ee      	beq.n	8005046 <_dtoa_r+0xabe>
 8005068:	3301      	adds	r3, #1
 800506a:	e7c9      	b.n	8005000 <_dtoa_r+0xa78>
 800506c:	9a02      	ldr	r2, [sp, #8]
 800506e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005070:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005074:	428a      	cmp	r2, r1
 8005076:	d02a      	beq.n	80050ce <_dtoa_r+0xb46>
 8005078:	4651      	mov	r1, sl
 800507a:	2300      	movs	r3, #0
 800507c:	220a      	movs	r2, #10
 800507e:	4628      	mov	r0, r5
 8005080:	f000 f90c 	bl	800529c <__multadd>
 8005084:	45b0      	cmp	r8, r6
 8005086:	4682      	mov	sl, r0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	f04f 020a 	mov.w	r2, #10
 8005090:	4641      	mov	r1, r8
 8005092:	4628      	mov	r0, r5
 8005094:	d107      	bne.n	80050a6 <_dtoa_r+0xb1e>
 8005096:	f000 f901 	bl	800529c <__multadd>
 800509a:	4680      	mov	r8, r0
 800509c:	4606      	mov	r6, r0
 800509e:	9b02      	ldr	r3, [sp, #8]
 80050a0:	3301      	adds	r3, #1
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	e777      	b.n	8004f96 <_dtoa_r+0xa0e>
 80050a6:	f000 f8f9 	bl	800529c <__multadd>
 80050aa:	4631      	mov	r1, r6
 80050ac:	4680      	mov	r8, r0
 80050ae:	2300      	movs	r3, #0
 80050b0:	220a      	movs	r2, #10
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f8f2 	bl	800529c <__multadd>
 80050b8:	4606      	mov	r6, r0
 80050ba:	e7f0      	b.n	800509e <_dtoa_r+0xb16>
 80050bc:	f1bb 0f00 	cmp.w	fp, #0
 80050c0:	bfcc      	ite	gt
 80050c2:	465f      	movgt	r7, fp
 80050c4:	2701      	movle	r7, #1
 80050c6:	f04f 0800 	mov.w	r8, #0
 80050ca:	9a08      	ldr	r2, [sp, #32]
 80050cc:	4417      	add	r7, r2
 80050ce:	4651      	mov	r1, sl
 80050d0:	2201      	movs	r2, #1
 80050d2:	4628      	mov	r0, r5
 80050d4:	9302      	str	r3, [sp, #8]
 80050d6:	f000 fa8d 	bl	80055f4 <__lshift>
 80050da:	4621      	mov	r1, r4
 80050dc:	4682      	mov	sl, r0
 80050de:	f000 faf5 	bl	80056cc <__mcmp>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	dcb2      	bgt.n	800504c <_dtoa_r+0xac4>
 80050e6:	d102      	bne.n	80050ee <_dtoa_r+0xb66>
 80050e8:	9b02      	ldr	r3, [sp, #8]
 80050ea:	07db      	lsls	r3, r3, #31
 80050ec:	d4ae      	bmi.n	800504c <_dtoa_r+0xac4>
 80050ee:	463b      	mov	r3, r7
 80050f0:	461f      	mov	r7, r3
 80050f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050f6:	2a30      	cmp	r2, #48	; 0x30
 80050f8:	d0fa      	beq.n	80050f0 <_dtoa_r+0xb68>
 80050fa:	e6fb      	b.n	8004ef4 <_dtoa_r+0x96c>
 80050fc:	9a08      	ldr	r2, [sp, #32]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d1a5      	bne.n	800504e <_dtoa_r+0xac6>
 8005102:	2331      	movs	r3, #49	; 0x31
 8005104:	f109 0901 	add.w	r9, r9, #1
 8005108:	7013      	strb	r3, [r2, #0]
 800510a:	e6f3      	b.n	8004ef4 <_dtoa_r+0x96c>
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <_dtoa_r+0xbd4>)
 800510e:	f7ff baa7 	b.w	8004660 <_dtoa_r+0xd8>
 8005112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f aa80 	bne.w	800461a <_dtoa_r+0x92>
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <_dtoa_r+0xbd8>)
 800511c:	f7ff baa0 	b.w	8004660 <_dtoa_r+0xd8>
 8005120:	f1bb 0f00 	cmp.w	fp, #0
 8005124:	dc03      	bgt.n	800512e <_dtoa_r+0xba6>
 8005126:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005128:	2b02      	cmp	r3, #2
 800512a:	f73f aecc 	bgt.w	8004ec6 <_dtoa_r+0x93e>
 800512e:	9f08      	ldr	r7, [sp, #32]
 8005130:	4621      	mov	r1, r4
 8005132:	4650      	mov	r0, sl
 8005134:	f7ff f99a 	bl	800446c <quorem>
 8005138:	9a08      	ldr	r2, [sp, #32]
 800513a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800513e:	f807 3b01 	strb.w	r3, [r7], #1
 8005142:	1aba      	subs	r2, r7, r2
 8005144:	4593      	cmp	fp, r2
 8005146:	ddb9      	ble.n	80050bc <_dtoa_r+0xb34>
 8005148:	4651      	mov	r1, sl
 800514a:	2300      	movs	r3, #0
 800514c:	220a      	movs	r2, #10
 800514e:	4628      	mov	r0, r5
 8005150:	f000 f8a4 	bl	800529c <__multadd>
 8005154:	4682      	mov	sl, r0
 8005156:	e7eb      	b.n	8005130 <_dtoa_r+0xba8>
 8005158:	08007285 	.word	0x08007285
 800515c:	08007409 	.word	0x08007409
 8005160:	08007202 	.word	0x08007202

08005164 <_localeconv_r>:
 8005164:	4800      	ldr	r0, [pc, #0]	; (8005168 <_localeconv_r+0x4>)
 8005166:	4770      	bx	lr
 8005168:	2000016c 	.word	0x2000016c

0800516c <_lseek_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	2200      	movs	r2, #0
 8005176:	4d05      	ldr	r5, [pc, #20]	; (800518c <_lseek_r+0x20>)
 8005178:	602a      	str	r2, [r5, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	f7fb fef8 	bl	8000f70 <_lseek>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d102      	bne.n	800518a <_lseek_r+0x1e>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	b103      	cbz	r3, 800518a <_lseek_r+0x1e>
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	bd38      	pop	{r3, r4, r5, pc}
 800518c:	20000324 	.word	0x20000324

08005190 <malloc>:
 8005190:	4b02      	ldr	r3, [pc, #8]	; (800519c <malloc+0xc>)
 8005192:	4601      	mov	r1, r0
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	f000 bbfb 	b.w	8005990 <_malloc_r>
 800519a:	bf00      	nop
 800519c:	20000018 	.word	0x20000018

080051a0 <memchr>:
 80051a0:	4603      	mov	r3, r0
 80051a2:	b510      	push	{r4, lr}
 80051a4:	b2c9      	uxtb	r1, r1
 80051a6:	4402      	add	r2, r0
 80051a8:	4293      	cmp	r3, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	d101      	bne.n	80051b2 <memchr+0x12>
 80051ae:	2000      	movs	r0, #0
 80051b0:	e003      	b.n	80051ba <memchr+0x1a>
 80051b2:	7804      	ldrb	r4, [r0, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	428c      	cmp	r4, r1
 80051b8:	d1f6      	bne.n	80051a8 <memchr+0x8>
 80051ba:	bd10      	pop	{r4, pc}

080051bc <memcpy>:
 80051bc:	440a      	add	r2, r1
 80051be:	4291      	cmp	r1, r2
 80051c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051c4:	d100      	bne.n	80051c8 <memcpy+0xc>
 80051c6:	4770      	bx	lr
 80051c8:	b510      	push	{r4, lr}
 80051ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ce:	4291      	cmp	r1, r2
 80051d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051d4:	d1f9      	bne.n	80051ca <memcpy+0xe>
 80051d6:	bd10      	pop	{r4, pc}

080051d8 <_Balloc>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051dc:	4604      	mov	r4, r0
 80051de:	460d      	mov	r5, r1
 80051e0:	b976      	cbnz	r6, 8005200 <_Balloc+0x28>
 80051e2:	2010      	movs	r0, #16
 80051e4:	f7ff ffd4 	bl	8005190 <malloc>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6260      	str	r0, [r4, #36]	; 0x24
 80051ec:	b920      	cbnz	r0, 80051f8 <_Balloc+0x20>
 80051ee:	2166      	movs	r1, #102	; 0x66
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <_Balloc+0x78>)
 80051f2:	4818      	ldr	r0, [pc, #96]	; (8005254 <_Balloc+0x7c>)
 80051f4:	f001 fa3a 	bl	800666c <__assert_func>
 80051f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051fc:	6006      	str	r6, [r0, #0]
 80051fe:	60c6      	str	r6, [r0, #12]
 8005200:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005202:	68f3      	ldr	r3, [r6, #12]
 8005204:	b183      	cbz	r3, 8005228 <_Balloc+0x50>
 8005206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800520e:	b9b8      	cbnz	r0, 8005240 <_Balloc+0x68>
 8005210:	2101      	movs	r1, #1
 8005212:	fa01 f605 	lsl.w	r6, r1, r5
 8005216:	1d72      	adds	r2, r6, #5
 8005218:	4620      	mov	r0, r4
 800521a:	0092      	lsls	r2, r2, #2
 800521c:	f000 fb5e 	bl	80058dc <_calloc_r>
 8005220:	b160      	cbz	r0, 800523c <_Balloc+0x64>
 8005222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005226:	e00e      	b.n	8005246 <_Balloc+0x6e>
 8005228:	2221      	movs	r2, #33	; 0x21
 800522a:	2104      	movs	r1, #4
 800522c:	4620      	mov	r0, r4
 800522e:	f000 fb55 	bl	80058dc <_calloc_r>
 8005232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005234:	60f0      	str	r0, [r6, #12]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e4      	bne.n	8005206 <_Balloc+0x2e>
 800523c:	2000      	movs	r0, #0
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	6802      	ldr	r2, [r0, #0]
 8005242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005246:	2300      	movs	r3, #0
 8005248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800524c:	e7f7      	b.n	800523e <_Balloc+0x66>
 800524e:	bf00      	nop
 8005250:	0800720f 	.word	0x0800720f
 8005254:	08007296 	.word	0x08007296

08005258 <_Bfree>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800525c:	4605      	mov	r5, r0
 800525e:	460c      	mov	r4, r1
 8005260:	b976      	cbnz	r6, 8005280 <_Bfree+0x28>
 8005262:	2010      	movs	r0, #16
 8005264:	f7ff ff94 	bl	8005190 <malloc>
 8005268:	4602      	mov	r2, r0
 800526a:	6268      	str	r0, [r5, #36]	; 0x24
 800526c:	b920      	cbnz	r0, 8005278 <_Bfree+0x20>
 800526e:	218a      	movs	r1, #138	; 0x8a
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <_Bfree+0x3c>)
 8005272:	4809      	ldr	r0, [pc, #36]	; (8005298 <_Bfree+0x40>)
 8005274:	f001 f9fa 	bl	800666c <__assert_func>
 8005278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800527c:	6006      	str	r6, [r0, #0]
 800527e:	60c6      	str	r6, [r0, #12]
 8005280:	b13c      	cbz	r4, 8005292 <_Bfree+0x3a>
 8005282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005284:	6862      	ldr	r2, [r4, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800528c:	6021      	str	r1, [r4, #0]
 800528e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	0800720f 	.word	0x0800720f
 8005298:	08007296 	.word	0x08007296

0800529c <__multadd>:
 800529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a0:	4698      	mov	r8, r3
 80052a2:	460c      	mov	r4, r1
 80052a4:	2300      	movs	r3, #0
 80052a6:	690e      	ldr	r6, [r1, #16]
 80052a8:	4607      	mov	r7, r0
 80052aa:	f101 0014 	add.w	r0, r1, #20
 80052ae:	6805      	ldr	r5, [r0, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	b2a9      	uxth	r1, r5
 80052b4:	fb02 8101 	mla	r1, r2, r1, r8
 80052b8:	0c2d      	lsrs	r5, r5, #16
 80052ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80052be:	fb02 c505 	mla	r5, r2, r5, ip
 80052c2:	b289      	uxth	r1, r1
 80052c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80052c8:	429e      	cmp	r6, r3
 80052ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80052ce:	f840 1b04 	str.w	r1, [r0], #4
 80052d2:	dcec      	bgt.n	80052ae <__multadd+0x12>
 80052d4:	f1b8 0f00 	cmp.w	r8, #0
 80052d8:	d022      	beq.n	8005320 <__multadd+0x84>
 80052da:	68a3      	ldr	r3, [r4, #8]
 80052dc:	42b3      	cmp	r3, r6
 80052de:	dc19      	bgt.n	8005314 <__multadd+0x78>
 80052e0:	6861      	ldr	r1, [r4, #4]
 80052e2:	4638      	mov	r0, r7
 80052e4:	3101      	adds	r1, #1
 80052e6:	f7ff ff77 	bl	80051d8 <_Balloc>
 80052ea:	4605      	mov	r5, r0
 80052ec:	b928      	cbnz	r0, 80052fa <__multadd+0x5e>
 80052ee:	4602      	mov	r2, r0
 80052f0:	21b5      	movs	r1, #181	; 0xb5
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <__multadd+0x8c>)
 80052f4:	480d      	ldr	r0, [pc, #52]	; (800532c <__multadd+0x90>)
 80052f6:	f001 f9b9 	bl	800666c <__assert_func>
 80052fa:	6922      	ldr	r2, [r4, #16]
 80052fc:	f104 010c 	add.w	r1, r4, #12
 8005300:	3202      	adds	r2, #2
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	300c      	adds	r0, #12
 8005306:	f7ff ff59 	bl	80051bc <memcpy>
 800530a:	4621      	mov	r1, r4
 800530c:	4638      	mov	r0, r7
 800530e:	f7ff ffa3 	bl	8005258 <_Bfree>
 8005312:	462c      	mov	r4, r5
 8005314:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005318:	3601      	adds	r6, #1
 800531a:	f8c3 8014 	str.w	r8, [r3, #20]
 800531e:	6126      	str	r6, [r4, #16]
 8005320:	4620      	mov	r0, r4
 8005322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005326:	bf00      	nop
 8005328:	08007285 	.word	0x08007285
 800532c:	08007296 	.word	0x08007296

08005330 <__hi0bits>:
 8005330:	0c02      	lsrs	r2, r0, #16
 8005332:	0412      	lsls	r2, r2, #16
 8005334:	4603      	mov	r3, r0
 8005336:	b9ca      	cbnz	r2, 800536c <__hi0bits+0x3c>
 8005338:	0403      	lsls	r3, r0, #16
 800533a:	2010      	movs	r0, #16
 800533c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005340:	bf04      	itt	eq
 8005342:	021b      	lsleq	r3, r3, #8
 8005344:	3008      	addeq	r0, #8
 8005346:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800534a:	bf04      	itt	eq
 800534c:	011b      	lsleq	r3, r3, #4
 800534e:	3004      	addeq	r0, #4
 8005350:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005354:	bf04      	itt	eq
 8005356:	009b      	lsleq	r3, r3, #2
 8005358:	3002      	addeq	r0, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	db05      	blt.n	800536a <__hi0bits+0x3a>
 800535e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005362:	f100 0001 	add.w	r0, r0, #1
 8005366:	bf08      	it	eq
 8005368:	2020      	moveq	r0, #32
 800536a:	4770      	bx	lr
 800536c:	2000      	movs	r0, #0
 800536e:	e7e5      	b.n	800533c <__hi0bits+0xc>

08005370 <__lo0bits>:
 8005370:	6803      	ldr	r3, [r0, #0]
 8005372:	4602      	mov	r2, r0
 8005374:	f013 0007 	ands.w	r0, r3, #7
 8005378:	d00b      	beq.n	8005392 <__lo0bits+0x22>
 800537a:	07d9      	lsls	r1, r3, #31
 800537c:	d422      	bmi.n	80053c4 <__lo0bits+0x54>
 800537e:	0798      	lsls	r0, r3, #30
 8005380:	bf49      	itett	mi
 8005382:	085b      	lsrmi	r3, r3, #1
 8005384:	089b      	lsrpl	r3, r3, #2
 8005386:	2001      	movmi	r0, #1
 8005388:	6013      	strmi	r3, [r2, #0]
 800538a:	bf5c      	itt	pl
 800538c:	2002      	movpl	r0, #2
 800538e:	6013      	strpl	r3, [r2, #0]
 8005390:	4770      	bx	lr
 8005392:	b299      	uxth	r1, r3
 8005394:	b909      	cbnz	r1, 800539a <__lo0bits+0x2a>
 8005396:	2010      	movs	r0, #16
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800539e:	bf04      	itt	eq
 80053a0:	0a1b      	lsreq	r3, r3, #8
 80053a2:	3008      	addeq	r0, #8
 80053a4:	0719      	lsls	r1, r3, #28
 80053a6:	bf04      	itt	eq
 80053a8:	091b      	lsreq	r3, r3, #4
 80053aa:	3004      	addeq	r0, #4
 80053ac:	0799      	lsls	r1, r3, #30
 80053ae:	bf04      	itt	eq
 80053b0:	089b      	lsreq	r3, r3, #2
 80053b2:	3002      	addeq	r0, #2
 80053b4:	07d9      	lsls	r1, r3, #31
 80053b6:	d403      	bmi.n	80053c0 <__lo0bits+0x50>
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	f100 0001 	add.w	r0, r0, #1
 80053be:	d003      	beq.n	80053c8 <__lo0bits+0x58>
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4770      	bx	lr
 80053c4:	2000      	movs	r0, #0
 80053c6:	4770      	bx	lr
 80053c8:	2020      	movs	r0, #32
 80053ca:	4770      	bx	lr

080053cc <__i2b>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	460c      	mov	r4, r1
 80053d0:	2101      	movs	r1, #1
 80053d2:	f7ff ff01 	bl	80051d8 <_Balloc>
 80053d6:	4602      	mov	r2, r0
 80053d8:	b928      	cbnz	r0, 80053e6 <__i2b+0x1a>
 80053da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <__i2b+0x24>)
 80053e0:	4804      	ldr	r0, [pc, #16]	; (80053f4 <__i2b+0x28>)
 80053e2:	f001 f943 	bl	800666c <__assert_func>
 80053e6:	2301      	movs	r3, #1
 80053e8:	6144      	str	r4, [r0, #20]
 80053ea:	6103      	str	r3, [r0, #16]
 80053ec:	bd10      	pop	{r4, pc}
 80053ee:	bf00      	nop
 80053f0:	08007285 	.word	0x08007285
 80053f4:	08007296 	.word	0x08007296

080053f8 <__multiply>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	4614      	mov	r4, r2
 80053fe:	690a      	ldr	r2, [r1, #16]
 8005400:	6923      	ldr	r3, [r4, #16]
 8005402:	460d      	mov	r5, r1
 8005404:	429a      	cmp	r2, r3
 8005406:	bfbe      	ittt	lt
 8005408:	460b      	movlt	r3, r1
 800540a:	4625      	movlt	r5, r4
 800540c:	461c      	movlt	r4, r3
 800540e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005412:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005416:	68ab      	ldr	r3, [r5, #8]
 8005418:	6869      	ldr	r1, [r5, #4]
 800541a:	eb0a 0709 	add.w	r7, sl, r9
 800541e:	42bb      	cmp	r3, r7
 8005420:	b085      	sub	sp, #20
 8005422:	bfb8      	it	lt
 8005424:	3101      	addlt	r1, #1
 8005426:	f7ff fed7 	bl	80051d8 <_Balloc>
 800542a:	b930      	cbnz	r0, 800543a <__multiply+0x42>
 800542c:	4602      	mov	r2, r0
 800542e:	f240 115d 	movw	r1, #349	; 0x15d
 8005432:	4b41      	ldr	r3, [pc, #260]	; (8005538 <__multiply+0x140>)
 8005434:	4841      	ldr	r0, [pc, #260]	; (800553c <__multiply+0x144>)
 8005436:	f001 f919 	bl	800666c <__assert_func>
 800543a:	f100 0614 	add.w	r6, r0, #20
 800543e:	4633      	mov	r3, r6
 8005440:	2200      	movs	r2, #0
 8005442:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005446:	4543      	cmp	r3, r8
 8005448:	d31e      	bcc.n	8005488 <__multiply+0x90>
 800544a:	f105 0c14 	add.w	ip, r5, #20
 800544e:	f104 0314 	add.w	r3, r4, #20
 8005452:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005456:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800545a:	9202      	str	r2, [sp, #8]
 800545c:	ebac 0205 	sub.w	r2, ip, r5
 8005460:	3a15      	subs	r2, #21
 8005462:	f022 0203 	bic.w	r2, r2, #3
 8005466:	3204      	adds	r2, #4
 8005468:	f105 0115 	add.w	r1, r5, #21
 800546c:	458c      	cmp	ip, r1
 800546e:	bf38      	it	cc
 8005470:	2204      	movcc	r2, #4
 8005472:	9201      	str	r2, [sp, #4]
 8005474:	9a02      	ldr	r2, [sp, #8]
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	429a      	cmp	r2, r3
 800547a:	d808      	bhi.n	800548e <__multiply+0x96>
 800547c:	2f00      	cmp	r7, #0
 800547e:	dc55      	bgt.n	800552c <__multiply+0x134>
 8005480:	6107      	str	r7, [r0, #16]
 8005482:	b005      	add	sp, #20
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	f843 2b04 	str.w	r2, [r3], #4
 800548c:	e7db      	b.n	8005446 <__multiply+0x4e>
 800548e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005492:	f1ba 0f00 	cmp.w	sl, #0
 8005496:	d020      	beq.n	80054da <__multiply+0xe2>
 8005498:	46b1      	mov	r9, r6
 800549a:	2200      	movs	r2, #0
 800549c:	f105 0e14 	add.w	lr, r5, #20
 80054a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80054a4:	f8d9 b000 	ldr.w	fp, [r9]
 80054a8:	b2a1      	uxth	r1, r4
 80054aa:	fa1f fb8b 	uxth.w	fp, fp
 80054ae:	fb0a b101 	mla	r1, sl, r1, fp
 80054b2:	4411      	add	r1, r2
 80054b4:	f8d9 2000 	ldr.w	r2, [r9]
 80054b8:	0c24      	lsrs	r4, r4, #16
 80054ba:	0c12      	lsrs	r2, r2, #16
 80054bc:	fb0a 2404 	mla	r4, sl, r4, r2
 80054c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80054c4:	b289      	uxth	r1, r1
 80054c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80054ca:	45f4      	cmp	ip, lr
 80054cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80054d0:	f849 1b04 	str.w	r1, [r9], #4
 80054d4:	d8e4      	bhi.n	80054a0 <__multiply+0xa8>
 80054d6:	9901      	ldr	r1, [sp, #4]
 80054d8:	5072      	str	r2, [r6, r1]
 80054da:	9a03      	ldr	r2, [sp, #12]
 80054dc:	3304      	adds	r3, #4
 80054de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054e2:	f1b9 0f00 	cmp.w	r9, #0
 80054e6:	d01f      	beq.n	8005528 <__multiply+0x130>
 80054e8:	46b6      	mov	lr, r6
 80054ea:	f04f 0a00 	mov.w	sl, #0
 80054ee:	6834      	ldr	r4, [r6, #0]
 80054f0:	f105 0114 	add.w	r1, r5, #20
 80054f4:	880a      	ldrh	r2, [r1, #0]
 80054f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80054fa:	b2a4      	uxth	r4, r4
 80054fc:	fb09 b202 	mla	r2, r9, r2, fp
 8005500:	4492      	add	sl, r2
 8005502:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005506:	f84e 4b04 	str.w	r4, [lr], #4
 800550a:	f851 4b04 	ldr.w	r4, [r1], #4
 800550e:	f8be 2000 	ldrh.w	r2, [lr]
 8005512:	0c24      	lsrs	r4, r4, #16
 8005514:	fb09 2404 	mla	r4, r9, r4, r2
 8005518:	458c      	cmp	ip, r1
 800551a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800551e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005522:	d8e7      	bhi.n	80054f4 <__multiply+0xfc>
 8005524:	9a01      	ldr	r2, [sp, #4]
 8005526:	50b4      	str	r4, [r6, r2]
 8005528:	3604      	adds	r6, #4
 800552a:	e7a3      	b.n	8005474 <__multiply+0x7c>
 800552c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1a5      	bne.n	8005480 <__multiply+0x88>
 8005534:	3f01      	subs	r7, #1
 8005536:	e7a1      	b.n	800547c <__multiply+0x84>
 8005538:	08007285 	.word	0x08007285
 800553c:	08007296 	.word	0x08007296

08005540 <__pow5mult>:
 8005540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005544:	4615      	mov	r5, r2
 8005546:	f012 0203 	ands.w	r2, r2, #3
 800554a:	4606      	mov	r6, r0
 800554c:	460f      	mov	r7, r1
 800554e:	d007      	beq.n	8005560 <__pow5mult+0x20>
 8005550:	4c25      	ldr	r4, [pc, #148]	; (80055e8 <__pow5mult+0xa8>)
 8005552:	3a01      	subs	r2, #1
 8005554:	2300      	movs	r3, #0
 8005556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800555a:	f7ff fe9f 	bl	800529c <__multadd>
 800555e:	4607      	mov	r7, r0
 8005560:	10ad      	asrs	r5, r5, #2
 8005562:	d03d      	beq.n	80055e0 <__pow5mult+0xa0>
 8005564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005566:	b97c      	cbnz	r4, 8005588 <__pow5mult+0x48>
 8005568:	2010      	movs	r0, #16
 800556a:	f7ff fe11 	bl	8005190 <malloc>
 800556e:	4602      	mov	r2, r0
 8005570:	6270      	str	r0, [r6, #36]	; 0x24
 8005572:	b928      	cbnz	r0, 8005580 <__pow5mult+0x40>
 8005574:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005578:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <__pow5mult+0xac>)
 800557a:	481d      	ldr	r0, [pc, #116]	; (80055f0 <__pow5mult+0xb0>)
 800557c:	f001 f876 	bl	800666c <__assert_func>
 8005580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005584:	6004      	str	r4, [r0, #0]
 8005586:	60c4      	str	r4, [r0, #12]
 8005588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800558c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005590:	b94c      	cbnz	r4, 80055a6 <__pow5mult+0x66>
 8005592:	f240 2171 	movw	r1, #625	; 0x271
 8005596:	4630      	mov	r0, r6
 8005598:	f7ff ff18 	bl	80053cc <__i2b>
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80055a4:	6003      	str	r3, [r0, #0]
 80055a6:	f04f 0900 	mov.w	r9, #0
 80055aa:	07eb      	lsls	r3, r5, #31
 80055ac:	d50a      	bpl.n	80055c4 <__pow5mult+0x84>
 80055ae:	4639      	mov	r1, r7
 80055b0:	4622      	mov	r2, r4
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7ff ff20 	bl	80053f8 <__multiply>
 80055b8:	4680      	mov	r8, r0
 80055ba:	4639      	mov	r1, r7
 80055bc:	4630      	mov	r0, r6
 80055be:	f7ff fe4b 	bl	8005258 <_Bfree>
 80055c2:	4647      	mov	r7, r8
 80055c4:	106d      	asrs	r5, r5, #1
 80055c6:	d00b      	beq.n	80055e0 <__pow5mult+0xa0>
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	b938      	cbnz	r0, 80055dc <__pow5mult+0x9c>
 80055cc:	4622      	mov	r2, r4
 80055ce:	4621      	mov	r1, r4
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff ff11 	bl	80053f8 <__multiply>
 80055d6:	6020      	str	r0, [r4, #0]
 80055d8:	f8c0 9000 	str.w	r9, [r0]
 80055dc:	4604      	mov	r4, r0
 80055de:	e7e4      	b.n	80055aa <__pow5mult+0x6a>
 80055e0:	4638      	mov	r0, r7
 80055e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e6:	bf00      	nop
 80055e8:	080073e8 	.word	0x080073e8
 80055ec:	0800720f 	.word	0x0800720f
 80055f0:	08007296 	.word	0x08007296

080055f4 <__lshift>:
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	460c      	mov	r4, r1
 80055fa:	4607      	mov	r7, r0
 80055fc:	4691      	mov	r9, r2
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	6849      	ldr	r1, [r1, #4]
 8005602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005606:	68a3      	ldr	r3, [r4, #8]
 8005608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800560c:	f108 0601 	add.w	r6, r8, #1
 8005610:	42b3      	cmp	r3, r6
 8005612:	db0b      	blt.n	800562c <__lshift+0x38>
 8005614:	4638      	mov	r0, r7
 8005616:	f7ff fddf 	bl	80051d8 <_Balloc>
 800561a:	4605      	mov	r5, r0
 800561c:	b948      	cbnz	r0, 8005632 <__lshift+0x3e>
 800561e:	4602      	mov	r2, r0
 8005620:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005624:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <__lshift+0xd0>)
 8005626:	4828      	ldr	r0, [pc, #160]	; (80056c8 <__lshift+0xd4>)
 8005628:	f001 f820 	bl	800666c <__assert_func>
 800562c:	3101      	adds	r1, #1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	e7ee      	b.n	8005610 <__lshift+0x1c>
 8005632:	2300      	movs	r3, #0
 8005634:	f100 0114 	add.w	r1, r0, #20
 8005638:	f100 0210 	add.w	r2, r0, #16
 800563c:	4618      	mov	r0, r3
 800563e:	4553      	cmp	r3, sl
 8005640:	db33      	blt.n	80056aa <__lshift+0xb6>
 8005642:	6920      	ldr	r0, [r4, #16]
 8005644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005648:	f104 0314 	add.w	r3, r4, #20
 800564c:	f019 091f 	ands.w	r9, r9, #31
 8005650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005658:	d02b      	beq.n	80056b2 <__lshift+0xbe>
 800565a:	468a      	mov	sl, r1
 800565c:	2200      	movs	r2, #0
 800565e:	f1c9 0e20 	rsb	lr, r9, #32
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	fa00 f009 	lsl.w	r0, r0, r9
 8005668:	4302      	orrs	r2, r0
 800566a:	f84a 2b04 	str.w	r2, [sl], #4
 800566e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005672:	459c      	cmp	ip, r3
 8005674:	fa22 f20e 	lsr.w	r2, r2, lr
 8005678:	d8f3      	bhi.n	8005662 <__lshift+0x6e>
 800567a:	ebac 0304 	sub.w	r3, ip, r4
 800567e:	3b15      	subs	r3, #21
 8005680:	f023 0303 	bic.w	r3, r3, #3
 8005684:	3304      	adds	r3, #4
 8005686:	f104 0015 	add.w	r0, r4, #21
 800568a:	4584      	cmp	ip, r0
 800568c:	bf38      	it	cc
 800568e:	2304      	movcc	r3, #4
 8005690:	50ca      	str	r2, [r1, r3]
 8005692:	b10a      	cbz	r2, 8005698 <__lshift+0xa4>
 8005694:	f108 0602 	add.w	r6, r8, #2
 8005698:	3e01      	subs	r6, #1
 800569a:	4638      	mov	r0, r7
 800569c:	4621      	mov	r1, r4
 800569e:	612e      	str	r6, [r5, #16]
 80056a0:	f7ff fdda 	bl	8005258 <_Bfree>
 80056a4:	4628      	mov	r0, r5
 80056a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80056ae:	3301      	adds	r3, #1
 80056b0:	e7c5      	b.n	800563e <__lshift+0x4a>
 80056b2:	3904      	subs	r1, #4
 80056b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056b8:	459c      	cmp	ip, r3
 80056ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80056be:	d8f9      	bhi.n	80056b4 <__lshift+0xc0>
 80056c0:	e7ea      	b.n	8005698 <__lshift+0xa4>
 80056c2:	bf00      	nop
 80056c4:	08007285 	.word	0x08007285
 80056c8:	08007296 	.word	0x08007296

080056cc <__mcmp>:
 80056cc:	4603      	mov	r3, r0
 80056ce:	690a      	ldr	r2, [r1, #16]
 80056d0:	6900      	ldr	r0, [r0, #16]
 80056d2:	b530      	push	{r4, r5, lr}
 80056d4:	1a80      	subs	r0, r0, r2
 80056d6:	d10d      	bne.n	80056f4 <__mcmp+0x28>
 80056d8:	3314      	adds	r3, #20
 80056da:	3114      	adds	r1, #20
 80056dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80056e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80056e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056ec:	4295      	cmp	r5, r2
 80056ee:	d002      	beq.n	80056f6 <__mcmp+0x2a>
 80056f0:	d304      	bcc.n	80056fc <__mcmp+0x30>
 80056f2:	2001      	movs	r0, #1
 80056f4:	bd30      	pop	{r4, r5, pc}
 80056f6:	42a3      	cmp	r3, r4
 80056f8:	d3f4      	bcc.n	80056e4 <__mcmp+0x18>
 80056fa:	e7fb      	b.n	80056f4 <__mcmp+0x28>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	e7f8      	b.n	80056f4 <__mcmp+0x28>
	...

08005704 <__mdiff>:
 8005704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005708:	460c      	mov	r4, r1
 800570a:	4606      	mov	r6, r0
 800570c:	4611      	mov	r1, r2
 800570e:	4620      	mov	r0, r4
 8005710:	4692      	mov	sl, r2
 8005712:	f7ff ffdb 	bl	80056cc <__mcmp>
 8005716:	1e05      	subs	r5, r0, #0
 8005718:	d111      	bne.n	800573e <__mdiff+0x3a>
 800571a:	4629      	mov	r1, r5
 800571c:	4630      	mov	r0, r6
 800571e:	f7ff fd5b 	bl	80051d8 <_Balloc>
 8005722:	4602      	mov	r2, r0
 8005724:	b928      	cbnz	r0, 8005732 <__mdiff+0x2e>
 8005726:	f240 2132 	movw	r1, #562	; 0x232
 800572a:	4b3c      	ldr	r3, [pc, #240]	; (800581c <__mdiff+0x118>)
 800572c:	483c      	ldr	r0, [pc, #240]	; (8005820 <__mdiff+0x11c>)
 800572e:	f000 ff9d 	bl	800666c <__assert_func>
 8005732:	2301      	movs	r3, #1
 8005734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005738:	4610      	mov	r0, r2
 800573a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	bfa4      	itt	ge
 8005740:	4653      	movge	r3, sl
 8005742:	46a2      	movge	sl, r4
 8005744:	4630      	mov	r0, r6
 8005746:	f8da 1004 	ldr.w	r1, [sl, #4]
 800574a:	bfa6      	itte	ge
 800574c:	461c      	movge	r4, r3
 800574e:	2500      	movge	r5, #0
 8005750:	2501      	movlt	r5, #1
 8005752:	f7ff fd41 	bl	80051d8 <_Balloc>
 8005756:	4602      	mov	r2, r0
 8005758:	b918      	cbnz	r0, 8005762 <__mdiff+0x5e>
 800575a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800575e:	4b2f      	ldr	r3, [pc, #188]	; (800581c <__mdiff+0x118>)
 8005760:	e7e4      	b.n	800572c <__mdiff+0x28>
 8005762:	f100 0814 	add.w	r8, r0, #20
 8005766:	f8da 7010 	ldr.w	r7, [sl, #16]
 800576a:	60c5      	str	r5, [r0, #12]
 800576c:	f04f 0c00 	mov.w	ip, #0
 8005770:	f10a 0514 	add.w	r5, sl, #20
 8005774:	f10a 0010 	add.w	r0, sl, #16
 8005778:	46c2      	mov	sl, r8
 800577a:	6926      	ldr	r6, [r4, #16]
 800577c:	f104 0914 	add.w	r9, r4, #20
 8005780:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005788:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800578c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005790:	fa1f f18b 	uxth.w	r1, fp
 8005794:	4461      	add	r1, ip
 8005796:	fa1f fc83 	uxth.w	ip, r3
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	eba1 010c 	sub.w	r1, r1, ip
 80057a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80057a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80057a8:	b289      	uxth	r1, r1
 80057aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80057ae:	454e      	cmp	r6, r9
 80057b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80057b4:	f84a 3b04 	str.w	r3, [sl], #4
 80057b8:	d8e6      	bhi.n	8005788 <__mdiff+0x84>
 80057ba:	1b33      	subs	r3, r6, r4
 80057bc:	3b15      	subs	r3, #21
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	3415      	adds	r4, #21
 80057c4:	3304      	adds	r3, #4
 80057c6:	42a6      	cmp	r6, r4
 80057c8:	bf38      	it	cc
 80057ca:	2304      	movcc	r3, #4
 80057cc:	441d      	add	r5, r3
 80057ce:	4443      	add	r3, r8
 80057d0:	461e      	mov	r6, r3
 80057d2:	462c      	mov	r4, r5
 80057d4:	4574      	cmp	r4, lr
 80057d6:	d30e      	bcc.n	80057f6 <__mdiff+0xf2>
 80057d8:	f10e 0103 	add.w	r1, lr, #3
 80057dc:	1b49      	subs	r1, r1, r5
 80057de:	f021 0103 	bic.w	r1, r1, #3
 80057e2:	3d03      	subs	r5, #3
 80057e4:	45ae      	cmp	lr, r5
 80057e6:	bf38      	it	cc
 80057e8:	2100      	movcc	r1, #0
 80057ea:	4419      	add	r1, r3
 80057ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80057f0:	b18b      	cbz	r3, 8005816 <__mdiff+0x112>
 80057f2:	6117      	str	r7, [r2, #16]
 80057f4:	e7a0      	b.n	8005738 <__mdiff+0x34>
 80057f6:	f854 8b04 	ldr.w	r8, [r4], #4
 80057fa:	fa1f f188 	uxth.w	r1, r8
 80057fe:	4461      	add	r1, ip
 8005800:	1408      	asrs	r0, r1, #16
 8005802:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005806:	b289      	uxth	r1, r1
 8005808:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800580c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005810:	f846 1b04 	str.w	r1, [r6], #4
 8005814:	e7de      	b.n	80057d4 <__mdiff+0xd0>
 8005816:	3f01      	subs	r7, #1
 8005818:	e7e8      	b.n	80057ec <__mdiff+0xe8>
 800581a:	bf00      	nop
 800581c:	08007285 	.word	0x08007285
 8005820:	08007296 	.word	0x08007296

08005824 <__d2b>:
 8005824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005828:	2101      	movs	r1, #1
 800582a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800582e:	4690      	mov	r8, r2
 8005830:	461d      	mov	r5, r3
 8005832:	f7ff fcd1 	bl	80051d8 <_Balloc>
 8005836:	4604      	mov	r4, r0
 8005838:	b930      	cbnz	r0, 8005848 <__d2b+0x24>
 800583a:	4602      	mov	r2, r0
 800583c:	f240 310a 	movw	r1, #778	; 0x30a
 8005840:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <__d2b+0xb0>)
 8005842:	4825      	ldr	r0, [pc, #148]	; (80058d8 <__d2b+0xb4>)
 8005844:	f000 ff12 	bl	800666c <__assert_func>
 8005848:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800584c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005850:	bb2d      	cbnz	r5, 800589e <__d2b+0x7a>
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	f1b8 0300 	subs.w	r3, r8, #0
 8005858:	d026      	beq.n	80058a8 <__d2b+0x84>
 800585a:	4668      	mov	r0, sp
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	f7ff fd87 	bl	8005370 <__lo0bits>
 8005862:	9900      	ldr	r1, [sp, #0]
 8005864:	b1f0      	cbz	r0, 80058a4 <__d2b+0x80>
 8005866:	9a01      	ldr	r2, [sp, #4]
 8005868:	f1c0 0320 	rsb	r3, r0, #32
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	430b      	orrs	r3, r1
 8005872:	40c2      	lsrs	r2, r0
 8005874:	6163      	str	r3, [r4, #20]
 8005876:	9201      	str	r2, [sp, #4]
 8005878:	9b01      	ldr	r3, [sp, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	bf14      	ite	ne
 800587e:	2102      	movne	r1, #2
 8005880:	2101      	moveq	r1, #1
 8005882:	61a3      	str	r3, [r4, #24]
 8005884:	6121      	str	r1, [r4, #16]
 8005886:	b1c5      	cbz	r5, 80058ba <__d2b+0x96>
 8005888:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800588c:	4405      	add	r5, r0
 800588e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005892:	603d      	str	r5, [r7, #0]
 8005894:	6030      	str	r0, [r6, #0]
 8005896:	4620      	mov	r0, r4
 8005898:	b002      	add	sp, #8
 800589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800589e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a2:	e7d6      	b.n	8005852 <__d2b+0x2e>
 80058a4:	6161      	str	r1, [r4, #20]
 80058a6:	e7e7      	b.n	8005878 <__d2b+0x54>
 80058a8:	a801      	add	r0, sp, #4
 80058aa:	f7ff fd61 	bl	8005370 <__lo0bits>
 80058ae:	2101      	movs	r1, #1
 80058b0:	9b01      	ldr	r3, [sp, #4]
 80058b2:	6121      	str	r1, [r4, #16]
 80058b4:	6163      	str	r3, [r4, #20]
 80058b6:	3020      	adds	r0, #32
 80058b8:	e7e5      	b.n	8005886 <__d2b+0x62>
 80058ba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80058be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80058c2:	6038      	str	r0, [r7, #0]
 80058c4:	6918      	ldr	r0, [r3, #16]
 80058c6:	f7ff fd33 	bl	8005330 <__hi0bits>
 80058ca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80058ce:	6031      	str	r1, [r6, #0]
 80058d0:	e7e1      	b.n	8005896 <__d2b+0x72>
 80058d2:	bf00      	nop
 80058d4:	08007285 	.word	0x08007285
 80058d8:	08007296 	.word	0x08007296

080058dc <_calloc_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	fb02 f501 	mul.w	r5, r2, r1
 80058e2:	4629      	mov	r1, r5
 80058e4:	f000 f854 	bl	8005990 <_malloc_r>
 80058e8:	4604      	mov	r4, r0
 80058ea:	b118      	cbz	r0, 80058f4 <_calloc_r+0x18>
 80058ec:	462a      	mov	r2, r5
 80058ee:	2100      	movs	r1, #0
 80058f0:	f7fe f8a2 	bl	8003a38 <memset>
 80058f4:	4620      	mov	r0, r4
 80058f6:	bd38      	pop	{r3, r4, r5, pc}

080058f8 <_free_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4605      	mov	r5, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d043      	beq.n	8005988 <_free_r+0x90>
 8005900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005904:	1f0c      	subs	r4, r1, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	bfb8      	it	lt
 800590a:	18e4      	addlt	r4, r4, r3
 800590c:	f001 f8c4 	bl	8006a98 <__malloc_lock>
 8005910:	4a1e      	ldr	r2, [pc, #120]	; (800598c <_free_r+0x94>)
 8005912:	6813      	ldr	r3, [r2, #0]
 8005914:	4610      	mov	r0, r2
 8005916:	b933      	cbnz	r3, 8005926 <_free_r+0x2e>
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	6014      	str	r4, [r2, #0]
 800591c:	4628      	mov	r0, r5
 800591e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005922:	f001 b8bf 	b.w	8006aa4 <__malloc_unlock>
 8005926:	42a3      	cmp	r3, r4
 8005928:	d90a      	bls.n	8005940 <_free_r+0x48>
 800592a:	6821      	ldr	r1, [r4, #0]
 800592c:	1862      	adds	r2, r4, r1
 800592e:	4293      	cmp	r3, r2
 8005930:	bf01      	itttt	eq
 8005932:	681a      	ldreq	r2, [r3, #0]
 8005934:	685b      	ldreq	r3, [r3, #4]
 8005936:	1852      	addeq	r2, r2, r1
 8005938:	6022      	streq	r2, [r4, #0]
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	6004      	str	r4, [r0, #0]
 800593e:	e7ed      	b.n	800591c <_free_r+0x24>
 8005940:	461a      	mov	r2, r3
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	b10b      	cbz	r3, 800594a <_free_r+0x52>
 8005946:	42a3      	cmp	r3, r4
 8005948:	d9fa      	bls.n	8005940 <_free_r+0x48>
 800594a:	6811      	ldr	r1, [r2, #0]
 800594c:	1850      	adds	r0, r2, r1
 800594e:	42a0      	cmp	r0, r4
 8005950:	d10b      	bne.n	800596a <_free_r+0x72>
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	4401      	add	r1, r0
 8005956:	1850      	adds	r0, r2, r1
 8005958:	4283      	cmp	r3, r0
 800595a:	6011      	str	r1, [r2, #0]
 800595c:	d1de      	bne.n	800591c <_free_r+0x24>
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4401      	add	r1, r0
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	6053      	str	r3, [r2, #4]
 8005968:	e7d8      	b.n	800591c <_free_r+0x24>
 800596a:	d902      	bls.n	8005972 <_free_r+0x7a>
 800596c:	230c      	movs	r3, #12
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	e7d4      	b.n	800591c <_free_r+0x24>
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	1821      	adds	r1, r4, r0
 8005976:	428b      	cmp	r3, r1
 8005978:	bf01      	itttt	eq
 800597a:	6819      	ldreq	r1, [r3, #0]
 800597c:	685b      	ldreq	r3, [r3, #4]
 800597e:	1809      	addeq	r1, r1, r0
 8005980:	6021      	streq	r1, [r4, #0]
 8005982:	6063      	str	r3, [r4, #4]
 8005984:	6054      	str	r4, [r2, #4]
 8005986:	e7c9      	b.n	800591c <_free_r+0x24>
 8005988:	bd38      	pop	{r3, r4, r5, pc}
 800598a:	bf00      	nop
 800598c:	2000020c 	.word	0x2000020c

08005990 <_malloc_r>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	1ccd      	adds	r5, r1, #3
 8005994:	f025 0503 	bic.w	r5, r5, #3
 8005998:	3508      	adds	r5, #8
 800599a:	2d0c      	cmp	r5, #12
 800599c:	bf38      	it	cc
 800599e:	250c      	movcc	r5, #12
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	4606      	mov	r6, r0
 80059a4:	db01      	blt.n	80059aa <_malloc_r+0x1a>
 80059a6:	42a9      	cmp	r1, r5
 80059a8:	d903      	bls.n	80059b2 <_malloc_r+0x22>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	2000      	movs	r0, #0
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b2:	f001 f871 	bl	8006a98 <__malloc_lock>
 80059b6:	4921      	ldr	r1, [pc, #132]	; (8005a3c <_malloc_r+0xac>)
 80059b8:	680a      	ldr	r2, [r1, #0]
 80059ba:	4614      	mov	r4, r2
 80059bc:	b99c      	cbnz	r4, 80059e6 <_malloc_r+0x56>
 80059be:	4f20      	ldr	r7, [pc, #128]	; (8005a40 <_malloc_r+0xb0>)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	b923      	cbnz	r3, 80059ce <_malloc_r+0x3e>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4630      	mov	r0, r6
 80059c8:	f000 fcc8 	bl	800635c <_sbrk_r>
 80059cc:	6038      	str	r0, [r7, #0]
 80059ce:	4629      	mov	r1, r5
 80059d0:	4630      	mov	r0, r6
 80059d2:	f000 fcc3 	bl	800635c <_sbrk_r>
 80059d6:	1c43      	adds	r3, r0, #1
 80059d8:	d123      	bne.n	8005a22 <_malloc_r+0x92>
 80059da:	230c      	movs	r3, #12
 80059dc:	4630      	mov	r0, r6
 80059de:	6033      	str	r3, [r6, #0]
 80059e0:	f001 f860 	bl	8006aa4 <__malloc_unlock>
 80059e4:	e7e3      	b.n	80059ae <_malloc_r+0x1e>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	1b5b      	subs	r3, r3, r5
 80059ea:	d417      	bmi.n	8005a1c <_malloc_r+0x8c>
 80059ec:	2b0b      	cmp	r3, #11
 80059ee:	d903      	bls.n	80059f8 <_malloc_r+0x68>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	441c      	add	r4, r3
 80059f4:	6025      	str	r5, [r4, #0]
 80059f6:	e004      	b.n	8005a02 <_malloc_r+0x72>
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	42a2      	cmp	r2, r4
 80059fc:	bf0c      	ite	eq
 80059fe:	600b      	streq	r3, [r1, #0]
 8005a00:	6053      	strne	r3, [r2, #4]
 8005a02:	4630      	mov	r0, r6
 8005a04:	f001 f84e 	bl	8006aa4 <__malloc_unlock>
 8005a08:	f104 000b 	add.w	r0, r4, #11
 8005a0c:	1d23      	adds	r3, r4, #4
 8005a0e:	f020 0007 	bic.w	r0, r0, #7
 8005a12:	1ac2      	subs	r2, r0, r3
 8005a14:	d0cc      	beq.n	80059b0 <_malloc_r+0x20>
 8005a16:	1a1b      	subs	r3, r3, r0
 8005a18:	50a3      	str	r3, [r4, r2]
 8005a1a:	e7c9      	b.n	80059b0 <_malloc_r+0x20>
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	6864      	ldr	r4, [r4, #4]
 8005a20:	e7cc      	b.n	80059bc <_malloc_r+0x2c>
 8005a22:	1cc4      	adds	r4, r0, #3
 8005a24:	f024 0403 	bic.w	r4, r4, #3
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d0e3      	beq.n	80059f4 <_malloc_r+0x64>
 8005a2c:	1a21      	subs	r1, r4, r0
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 fc94 	bl	800635c <_sbrk_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d1dd      	bne.n	80059f4 <_malloc_r+0x64>
 8005a38:	e7cf      	b.n	80059da <_malloc_r+0x4a>
 8005a3a:	bf00      	nop
 8005a3c:	2000020c 	.word	0x2000020c
 8005a40:	20000210 	.word	0x20000210

08005a44 <__ssputs_r>:
 8005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	688e      	ldr	r6, [r1, #8]
 8005a4a:	4682      	mov	sl, r0
 8005a4c:	429e      	cmp	r6, r3
 8005a4e:	460c      	mov	r4, r1
 8005a50:	4690      	mov	r8, r2
 8005a52:	461f      	mov	r7, r3
 8005a54:	d838      	bhi.n	8005ac8 <__ssputs_r+0x84>
 8005a56:	898a      	ldrh	r2, [r1, #12]
 8005a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a5c:	d032      	beq.n	8005ac4 <__ssputs_r+0x80>
 8005a5e:	6825      	ldr	r5, [r4, #0]
 8005a60:	6909      	ldr	r1, [r1, #16]
 8005a62:	3301      	adds	r3, #1
 8005a64:	eba5 0901 	sub.w	r9, r5, r1
 8005a68:	6965      	ldr	r5, [r4, #20]
 8005a6a:	444b      	add	r3, r9
 8005a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a74:	106d      	asrs	r5, r5, #1
 8005a76:	429d      	cmp	r5, r3
 8005a78:	bf38      	it	cc
 8005a7a:	461d      	movcc	r5, r3
 8005a7c:	0553      	lsls	r3, r2, #21
 8005a7e:	d531      	bpl.n	8005ae4 <__ssputs_r+0xa0>
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7ff ff85 	bl	8005990 <_malloc_r>
 8005a86:	4606      	mov	r6, r0
 8005a88:	b950      	cbnz	r0, 8005aa0 <__ssputs_r+0x5c>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	f8ca 3000 	str.w	r3, [sl]
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a9a:	81a3      	strh	r3, [r4, #12]
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	464a      	mov	r2, r9
 8005aa2:	6921      	ldr	r1, [r4, #16]
 8005aa4:	f7ff fb8a 	bl	80051bc <memcpy>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	6126      	str	r6, [r4, #16]
 8005ab6:	444e      	add	r6, r9
 8005ab8:	6026      	str	r6, [r4, #0]
 8005aba:	463e      	mov	r6, r7
 8005abc:	6165      	str	r5, [r4, #20]
 8005abe:	eba5 0509 	sub.w	r5, r5, r9
 8005ac2:	60a5      	str	r5, [r4, #8]
 8005ac4:	42be      	cmp	r6, r7
 8005ac6:	d900      	bls.n	8005aca <__ssputs_r+0x86>
 8005ac8:	463e      	mov	r6, r7
 8005aca:	4632      	mov	r2, r6
 8005acc:	4641      	mov	r1, r8
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	f000 ffc8 	bl	8006a64 <memmove>
 8005ad4:	68a3      	ldr	r3, [r4, #8]
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	1b9b      	subs	r3, r3, r6
 8005ada:	4432      	add	r2, r6
 8005adc:	2000      	movs	r0, #0
 8005ade:	60a3      	str	r3, [r4, #8]
 8005ae0:	6022      	str	r2, [r4, #0]
 8005ae2:	e7db      	b.n	8005a9c <__ssputs_r+0x58>
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	f000 ffe3 	bl	8006ab0 <_realloc_r>
 8005aea:	4606      	mov	r6, r0
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d1e1      	bne.n	8005ab4 <__ssputs_r+0x70>
 8005af0:	4650      	mov	r0, sl
 8005af2:	6921      	ldr	r1, [r4, #16]
 8005af4:	f7ff ff00 	bl	80058f8 <_free_r>
 8005af8:	e7c7      	b.n	8005a8a <__ssputs_r+0x46>
	...

08005afc <_svfiprintf_r>:
 8005afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	4698      	mov	r8, r3
 8005b02:	898b      	ldrh	r3, [r1, #12]
 8005b04:	4607      	mov	r7, r0
 8005b06:	061b      	lsls	r3, r3, #24
 8005b08:	460d      	mov	r5, r1
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	b09d      	sub	sp, #116	; 0x74
 8005b0e:	d50e      	bpl.n	8005b2e <_svfiprintf_r+0x32>
 8005b10:	690b      	ldr	r3, [r1, #16]
 8005b12:	b963      	cbnz	r3, 8005b2e <_svfiprintf_r+0x32>
 8005b14:	2140      	movs	r1, #64	; 0x40
 8005b16:	f7ff ff3b 	bl	8005990 <_malloc_r>
 8005b1a:	6028      	str	r0, [r5, #0]
 8005b1c:	6128      	str	r0, [r5, #16]
 8005b1e:	b920      	cbnz	r0, 8005b2a <_svfiprintf_r+0x2e>
 8005b20:	230c      	movs	r3, #12
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	e0d1      	b.n	8005cce <_svfiprintf_r+0x1d2>
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	616b      	str	r3, [r5, #20]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9309      	str	r3, [sp, #36]	; 0x24
 8005b32:	2320      	movs	r3, #32
 8005b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b38:	2330      	movs	r3, #48	; 0x30
 8005b3a:	f04f 0901 	mov.w	r9, #1
 8005b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ce8 <_svfiprintf_r+0x1ec>
 8005b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	469a      	mov	sl, r3
 8005b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b52:	b10a      	cbz	r2, 8005b58 <_svfiprintf_r+0x5c>
 8005b54:	2a25      	cmp	r2, #37	; 0x25
 8005b56:	d1f9      	bne.n	8005b4c <_svfiprintf_r+0x50>
 8005b58:	ebba 0b04 	subs.w	fp, sl, r4
 8005b5c:	d00b      	beq.n	8005b76 <_svfiprintf_r+0x7a>
 8005b5e:	465b      	mov	r3, fp
 8005b60:	4622      	mov	r2, r4
 8005b62:	4629      	mov	r1, r5
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff ff6d 	bl	8005a44 <__ssputs_r>
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f000 80aa 	beq.w	8005cc4 <_svfiprintf_r+0x1c8>
 8005b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b72:	445a      	add	r2, fp
 8005b74:	9209      	str	r2, [sp, #36]	; 0x24
 8005b76:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80a2 	beq.w	8005cc4 <_svfiprintf_r+0x1c8>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b8a:	f10a 0a01 	add.w	sl, sl, #1
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	9307      	str	r3, [sp, #28]
 8005b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b96:	931a      	str	r3, [sp, #104]	; 0x68
 8005b98:	4654      	mov	r4, sl
 8005b9a:	2205      	movs	r2, #5
 8005b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba0:	4851      	ldr	r0, [pc, #324]	; (8005ce8 <_svfiprintf_r+0x1ec>)
 8005ba2:	f7ff fafd 	bl	80051a0 <memchr>
 8005ba6:	9a04      	ldr	r2, [sp, #16]
 8005ba8:	b9d8      	cbnz	r0, 8005be2 <_svfiprintf_r+0xe6>
 8005baa:	06d0      	lsls	r0, r2, #27
 8005bac:	bf44      	itt	mi
 8005bae:	2320      	movmi	r3, #32
 8005bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb4:	0711      	lsls	r1, r2, #28
 8005bb6:	bf44      	itt	mi
 8005bb8:	232b      	movmi	r3, #43	; 0x2b
 8005bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc4:	d015      	beq.n	8005bf2 <_svfiprintf_r+0xf6>
 8005bc6:	4654      	mov	r4, sl
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f04f 0c0a 	mov.w	ip, #10
 8005bce:	9a07      	ldr	r2, [sp, #28]
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bd6:	3b30      	subs	r3, #48	; 0x30
 8005bd8:	2b09      	cmp	r3, #9
 8005bda:	d94e      	bls.n	8005c7a <_svfiprintf_r+0x17e>
 8005bdc:	b1b0      	cbz	r0, 8005c0c <_svfiprintf_r+0x110>
 8005bde:	9207      	str	r2, [sp, #28]
 8005be0:	e014      	b.n	8005c0c <_svfiprintf_r+0x110>
 8005be2:	eba0 0308 	sub.w	r3, r0, r8
 8005be6:	fa09 f303 	lsl.w	r3, r9, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	46a2      	mov	sl, r4
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	e7d2      	b.n	8005b98 <_svfiprintf_r+0x9c>
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	9103      	str	r1, [sp, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bfbb      	ittet	lt
 8005bfe:	425b      	neglt	r3, r3
 8005c00:	f042 0202 	orrlt.w	r2, r2, #2
 8005c04:	9307      	strge	r3, [sp, #28]
 8005c06:	9307      	strlt	r3, [sp, #28]
 8005c08:	bfb8      	it	lt
 8005c0a:	9204      	strlt	r2, [sp, #16]
 8005c0c:	7823      	ldrb	r3, [r4, #0]
 8005c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c10:	d10c      	bne.n	8005c2c <_svfiprintf_r+0x130>
 8005c12:	7863      	ldrb	r3, [r4, #1]
 8005c14:	2b2a      	cmp	r3, #42	; 0x2a
 8005c16:	d135      	bne.n	8005c84 <_svfiprintf_r+0x188>
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	3402      	adds	r4, #2
 8005c1c:	1d1a      	adds	r2, r3, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	9203      	str	r2, [sp, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfb8      	it	lt
 8005c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cf8 <_svfiprintf_r+0x1fc>
 8005c30:	2203      	movs	r2, #3
 8005c32:	4650      	mov	r0, sl
 8005c34:	7821      	ldrb	r1, [r4, #0]
 8005c36:	f7ff fab3 	bl	80051a0 <memchr>
 8005c3a:	b140      	cbz	r0, 8005c4e <_svfiprintf_r+0x152>
 8005c3c:	2340      	movs	r3, #64	; 0x40
 8005c3e:	eba0 000a 	sub.w	r0, r0, sl
 8005c42:	fa03 f000 	lsl.w	r0, r3, r0
 8005c46:	9b04      	ldr	r3, [sp, #16]
 8005c48:	3401      	adds	r4, #1
 8005c4a:	4303      	orrs	r3, r0
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c52:	2206      	movs	r2, #6
 8005c54:	4825      	ldr	r0, [pc, #148]	; (8005cec <_svfiprintf_r+0x1f0>)
 8005c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c5a:	f7ff faa1 	bl	80051a0 <memchr>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d038      	beq.n	8005cd4 <_svfiprintf_r+0x1d8>
 8005c62:	4b23      	ldr	r3, [pc, #140]	; (8005cf0 <_svfiprintf_r+0x1f4>)
 8005c64:	bb1b      	cbnz	r3, 8005cae <_svfiprintf_r+0x1b2>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	3308      	adds	r3, #8
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c74:	4433      	add	r3, r6
 8005c76:	9309      	str	r3, [sp, #36]	; 0x24
 8005c78:	e767      	b.n	8005b4a <_svfiprintf_r+0x4e>
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c82:	e7a5      	b.n	8005bd0 <_svfiprintf_r+0xd4>
 8005c84:	2300      	movs	r3, #0
 8005c86:	f04f 0c0a 	mov.w	ip, #10
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	3401      	adds	r4, #1
 8005c8e:	9305      	str	r3, [sp, #20]
 8005c90:	4620      	mov	r0, r4
 8005c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c96:	3a30      	subs	r2, #48	; 0x30
 8005c98:	2a09      	cmp	r2, #9
 8005c9a:	d903      	bls.n	8005ca4 <_svfiprintf_r+0x1a8>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0c5      	beq.n	8005c2c <_svfiprintf_r+0x130>
 8005ca0:	9105      	str	r1, [sp, #20]
 8005ca2:	e7c3      	b.n	8005c2c <_svfiprintf_r+0x130>
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cac:	e7f0      	b.n	8005c90 <_svfiprintf_r+0x194>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <_svfiprintf_r+0x1f8>)
 8005cb8:	a904      	add	r1, sp, #16
 8005cba:	f7fd ff63 	bl	8003b84 <_printf_float>
 8005cbe:	1c42      	adds	r2, r0, #1
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	d1d6      	bne.n	8005c72 <_svfiprintf_r+0x176>
 8005cc4:	89ab      	ldrh	r3, [r5, #12]
 8005cc6:	065b      	lsls	r3, r3, #25
 8005cc8:	f53f af2c 	bmi.w	8005b24 <_svfiprintf_r+0x28>
 8005ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cce:	b01d      	add	sp, #116	; 0x74
 8005cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd4:	ab03      	add	r3, sp, #12
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4638      	mov	r0, r7
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <_svfiprintf_r+0x1f8>)
 8005cde:	a904      	add	r1, sp, #16
 8005ce0:	f7fe f9ec 	bl	80040bc <_printf_i>
 8005ce4:	e7eb      	b.n	8005cbe <_svfiprintf_r+0x1c2>
 8005ce6:	bf00      	nop
 8005ce8:	080073f4 	.word	0x080073f4
 8005cec:	080073fe 	.word	0x080073fe
 8005cf0:	08003b85 	.word	0x08003b85
 8005cf4:	08005a45 	.word	0x08005a45
 8005cf8:	080073fa 	.word	0x080073fa

08005cfc <_sungetc_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	1c4b      	adds	r3, r1, #1
 8005d00:	4614      	mov	r4, r2
 8005d02:	d103      	bne.n	8005d0c <_sungetc_r+0x10>
 8005d04:	f04f 35ff 	mov.w	r5, #4294967295
 8005d08:	4628      	mov	r0, r5
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	8993      	ldrh	r3, [r2, #12]
 8005d0e:	b2cd      	uxtb	r5, r1
 8005d10:	f023 0320 	bic.w	r3, r3, #32
 8005d14:	8193      	strh	r3, [r2, #12]
 8005d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d18:	6852      	ldr	r2, [r2, #4]
 8005d1a:	b18b      	cbz	r3, 8005d40 <_sungetc_r+0x44>
 8005d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	dd08      	ble.n	8005d34 <_sungetc_r+0x38>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	1e5a      	subs	r2, r3, #1
 8005d26:	6022      	str	r2, [r4, #0]
 8005d28:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005d2c:	6863      	ldr	r3, [r4, #4]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	e7e9      	b.n	8005d08 <_sungetc_r+0xc>
 8005d34:	4621      	mov	r1, r4
 8005d36:	f000 fc61 	bl	80065fc <__submore>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0f1      	beq.n	8005d22 <_sungetc_r+0x26>
 8005d3e:	e7e1      	b.n	8005d04 <_sungetc_r+0x8>
 8005d40:	6921      	ldr	r1, [r4, #16]
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	b151      	cbz	r1, 8005d5c <_sungetc_r+0x60>
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d208      	bcs.n	8005d5c <_sungetc_r+0x60>
 8005d4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005d4e:	42a9      	cmp	r1, r5
 8005d50:	d104      	bne.n	8005d5c <_sungetc_r+0x60>
 8005d52:	3b01      	subs	r3, #1
 8005d54:	3201      	adds	r2, #1
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	6062      	str	r2, [r4, #4]
 8005d5a:	e7d5      	b.n	8005d08 <_sungetc_r+0xc>
 8005d5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d64:	6363      	str	r3, [r4, #52]	; 0x34
 8005d66:	2303      	movs	r3, #3
 8005d68:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7dc      	b.n	8005d30 <_sungetc_r+0x34>

08005d76 <__ssrefill_r>:
 8005d76:	b510      	push	{r4, lr}
 8005d78:	460c      	mov	r4, r1
 8005d7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005d7c:	b169      	cbz	r1, 8005d9a <__ssrefill_r+0x24>
 8005d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d82:	4299      	cmp	r1, r3
 8005d84:	d001      	beq.n	8005d8a <__ssrefill_r+0x14>
 8005d86:	f7ff fdb7 	bl	80058f8 <_free_r>
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	b113      	cbz	r3, 8005d9a <__ssrefill_r+0x24>
 8005d94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	bd10      	pop	{r4, pc}
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	6063      	str	r3, [r4, #4]
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f043 0320 	orr.w	r3, r3, #32
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	e7f3      	b.n	8005d98 <__ssrefill_r+0x22>

08005db0 <__ssvfiscanf_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	460c      	mov	r4, r1
 8005db6:	2100      	movs	r1, #0
 8005db8:	4606      	mov	r6, r0
 8005dba:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005dbe:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005dc2:	49b3      	ldr	r1, [pc, #716]	; (8006090 <__ssvfiscanf_r+0x2e0>)
 8005dc4:	f10d 0804 	add.w	r8, sp, #4
 8005dc8:	91a0      	str	r1, [sp, #640]	; 0x280
 8005dca:	49b2      	ldr	r1, [pc, #712]	; (8006094 <__ssvfiscanf_r+0x2e4>)
 8005dcc:	4fb2      	ldr	r7, [pc, #712]	; (8006098 <__ssvfiscanf_r+0x2e8>)
 8005dce:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800609c <__ssvfiscanf_r+0x2ec>
 8005dd2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005dd6:	91a1      	str	r1, [sp, #644]	; 0x284
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	f892 a000 	ldrb.w	sl, [r2]
 8005dde:	f1ba 0f00 	cmp.w	sl, #0
 8005de2:	f000 8153 	beq.w	800608c <__ssvfiscanf_r+0x2dc>
 8005de6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005dea:	1c55      	adds	r5, r2, #1
 8005dec:	f013 0308 	ands.w	r3, r3, #8
 8005df0:	d019      	beq.n	8005e26 <__ssvfiscanf_r+0x76>
 8005df2:	6863      	ldr	r3, [r4, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dd0f      	ble.n	8005e18 <__ssvfiscanf_r+0x68>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	5cba      	ldrb	r2, [r7, r2]
 8005dfe:	0712      	lsls	r2, r2, #28
 8005e00:	d401      	bmi.n	8005e06 <__ssvfiscanf_r+0x56>
 8005e02:	462a      	mov	r2, r5
 8005e04:	e7e9      	b.n	8005dda <__ssvfiscanf_r+0x2a>
 8005e06:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005e08:	3301      	adds	r3, #1
 8005e0a:	3201      	adds	r2, #1
 8005e0c:	9245      	str	r2, [sp, #276]	; 0x114
 8005e0e:	6862      	ldr	r2, [r4, #4]
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	3a01      	subs	r2, #1
 8005e14:	6062      	str	r2, [r4, #4]
 8005e16:	e7ec      	b.n	8005df2 <__ssvfiscanf_r+0x42>
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005e1e:	4798      	blx	r3
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d0e9      	beq.n	8005df8 <__ssvfiscanf_r+0x48>
 8005e24:	e7ed      	b.n	8005e02 <__ssvfiscanf_r+0x52>
 8005e26:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8005e2a:	f040 8086 	bne.w	8005f3a <__ssvfiscanf_r+0x18a>
 8005e2e:	9341      	str	r3, [sp, #260]	; 0x104
 8005e30:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e32:	7853      	ldrb	r3, [r2, #1]
 8005e34:	2b2a      	cmp	r3, #42	; 0x2a
 8005e36:	bf04      	itt	eq
 8005e38:	2310      	moveq	r3, #16
 8005e3a:	1c95      	addeq	r5, r2, #2
 8005e3c:	f04f 020a 	mov.w	r2, #10
 8005e40:	bf08      	it	eq
 8005e42:	9341      	streq	r3, [sp, #260]	; 0x104
 8005e44:	46ab      	mov	fp, r5
 8005e46:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8005e4a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005e4e:	2b09      	cmp	r3, #9
 8005e50:	d91d      	bls.n	8005e8e <__ssvfiscanf_r+0xde>
 8005e52:	2203      	movs	r2, #3
 8005e54:	4891      	ldr	r0, [pc, #580]	; (800609c <__ssvfiscanf_r+0x2ec>)
 8005e56:	f7ff f9a3 	bl	80051a0 <memchr>
 8005e5a:	b140      	cbz	r0, 8005e6e <__ssvfiscanf_r+0xbe>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	465d      	mov	r5, fp
 8005e60:	eba0 0009 	sub.w	r0, r0, r9
 8005e64:	fa03 f000 	lsl.w	r0, r3, r0
 8005e68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005e6a:	4318      	orrs	r0, r3
 8005e6c:	9041      	str	r0, [sp, #260]	; 0x104
 8005e6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e72:	2b78      	cmp	r3, #120	; 0x78
 8005e74:	d806      	bhi.n	8005e84 <__ssvfiscanf_r+0xd4>
 8005e76:	2b57      	cmp	r3, #87	; 0x57
 8005e78:	d810      	bhi.n	8005e9c <__ssvfiscanf_r+0xec>
 8005e7a:	2b25      	cmp	r3, #37	; 0x25
 8005e7c:	d05d      	beq.n	8005f3a <__ssvfiscanf_r+0x18a>
 8005e7e:	d857      	bhi.n	8005f30 <__ssvfiscanf_r+0x180>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d075      	beq.n	8005f70 <__ssvfiscanf_r+0x1c0>
 8005e84:	2303      	movs	r3, #3
 8005e86:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e88:	230a      	movs	r3, #10
 8005e8a:	9342      	str	r3, [sp, #264]	; 0x108
 8005e8c:	e082      	b.n	8005f94 <__ssvfiscanf_r+0x1e4>
 8005e8e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e90:	465d      	mov	r5, fp
 8005e92:	fb02 1303 	mla	r3, r2, r3, r1
 8005e96:	3b30      	subs	r3, #48	; 0x30
 8005e98:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e9a:	e7d3      	b.n	8005e44 <__ssvfiscanf_r+0x94>
 8005e9c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005ea0:	2a20      	cmp	r2, #32
 8005ea2:	d8ef      	bhi.n	8005e84 <__ssvfiscanf_r+0xd4>
 8005ea4:	a101      	add	r1, pc, #4	; (adr r1, 8005eac <__ssvfiscanf_r+0xfc>)
 8005ea6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005f7f 	.word	0x08005f7f
 8005eb0:	08005e85 	.word	0x08005e85
 8005eb4:	08005e85 	.word	0x08005e85
 8005eb8:	08005fdd 	.word	0x08005fdd
 8005ebc:	08005e85 	.word	0x08005e85
 8005ec0:	08005e85 	.word	0x08005e85
 8005ec4:	08005e85 	.word	0x08005e85
 8005ec8:	08005e85 	.word	0x08005e85
 8005ecc:	08005e85 	.word	0x08005e85
 8005ed0:	08005e85 	.word	0x08005e85
 8005ed4:	08005e85 	.word	0x08005e85
 8005ed8:	08005ff3 	.word	0x08005ff3
 8005edc:	08005fc9 	.word	0x08005fc9
 8005ee0:	08005f37 	.word	0x08005f37
 8005ee4:	08005f37 	.word	0x08005f37
 8005ee8:	08005f37 	.word	0x08005f37
 8005eec:	08005e85 	.word	0x08005e85
 8005ef0:	08005fcd 	.word	0x08005fcd
 8005ef4:	08005e85 	.word	0x08005e85
 8005ef8:	08005e85 	.word	0x08005e85
 8005efc:	08005e85 	.word	0x08005e85
 8005f00:	08005e85 	.word	0x08005e85
 8005f04:	08006003 	.word	0x08006003
 8005f08:	08005fd5 	.word	0x08005fd5
 8005f0c:	08005f77 	.word	0x08005f77
 8005f10:	08005e85 	.word	0x08005e85
 8005f14:	08005e85 	.word	0x08005e85
 8005f18:	08005fff 	.word	0x08005fff
 8005f1c:	08005e85 	.word	0x08005e85
 8005f20:	08005fc9 	.word	0x08005fc9
 8005f24:	08005e85 	.word	0x08005e85
 8005f28:	08005e85 	.word	0x08005e85
 8005f2c:	08005f7f 	.word	0x08005f7f
 8005f30:	3b45      	subs	r3, #69	; 0x45
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d8a6      	bhi.n	8005e84 <__ssvfiscanf_r+0xd4>
 8005f36:	2305      	movs	r3, #5
 8005f38:	e02b      	b.n	8005f92 <__ssvfiscanf_r+0x1e2>
 8005f3a:	6863      	ldr	r3, [r4, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dd0d      	ble.n	8005f5c <__ssvfiscanf_r+0x1ac>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	781a      	ldrb	r2, [r3, #0]
 8005f44:	4552      	cmp	r2, sl
 8005f46:	f040 80a1 	bne.w	800608c <__ssvfiscanf_r+0x2dc>
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	6862      	ldr	r2, [r4, #4]
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005f52:	3a01      	subs	r2, #1
 8005f54:	3301      	adds	r3, #1
 8005f56:	6062      	str	r2, [r4, #4]
 8005f58:	9345      	str	r3, [sp, #276]	; 0x114
 8005f5a:	e752      	b.n	8005e02 <__ssvfiscanf_r+0x52>
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4630      	mov	r0, r6
 8005f60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f62:	4798      	blx	r3
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d0eb      	beq.n	8005f40 <__ssvfiscanf_r+0x190>
 8005f68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f040 8084 	bne.w	8006078 <__ssvfiscanf_r+0x2c8>
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	e086      	b.n	8006084 <__ssvfiscanf_r+0x2d4>
 8005f76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f78:	f042 0220 	orr.w	r2, r2, #32
 8005f7c:	9241      	str	r2, [sp, #260]	; 0x104
 8005f7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f84:	9241      	str	r2, [sp, #260]	; 0x104
 8005f86:	2210      	movs	r2, #16
 8005f88:	2b6f      	cmp	r3, #111	; 0x6f
 8005f8a:	bf34      	ite	cc
 8005f8c:	2303      	movcc	r3, #3
 8005f8e:	2304      	movcs	r3, #4
 8005f90:	9242      	str	r2, [sp, #264]	; 0x108
 8005f92:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f94:	6863      	ldr	r3, [r4, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	dd41      	ble.n	800601e <__ssvfiscanf_r+0x26e>
 8005f9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f9c:	0659      	lsls	r1, r3, #25
 8005f9e:	d404      	bmi.n	8005faa <__ssvfiscanf_r+0x1fa>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	5cba      	ldrb	r2, [r7, r2]
 8005fa6:	0712      	lsls	r2, r2, #28
 8005fa8:	d440      	bmi.n	800602c <__ssvfiscanf_r+0x27c>
 8005faa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	dc4f      	bgt.n	8006050 <__ssvfiscanf_r+0x2a0>
 8005fb0:	466b      	mov	r3, sp
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	a941      	add	r1, sp, #260	; 0x104
 8005fb8:	f000 f874 	bl	80060a4 <_scanf_chars>
 8005fbc:	2801      	cmp	r0, #1
 8005fbe:	d065      	beq.n	800608c <__ssvfiscanf_r+0x2dc>
 8005fc0:	2802      	cmp	r0, #2
 8005fc2:	f47f af1e 	bne.w	8005e02 <__ssvfiscanf_r+0x52>
 8005fc6:	e7cf      	b.n	8005f68 <__ssvfiscanf_r+0x1b8>
 8005fc8:	220a      	movs	r2, #10
 8005fca:	e7dd      	b.n	8005f88 <__ssvfiscanf_r+0x1d8>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9342      	str	r3, [sp, #264]	; 0x108
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e7de      	b.n	8005f92 <__ssvfiscanf_r+0x1e2>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	9342      	str	r3, [sp, #264]	; 0x108
 8005fd8:	2304      	movs	r3, #4
 8005fda:	e7da      	b.n	8005f92 <__ssvfiscanf_r+0x1e2>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f000 f9cc 	bl	800637c <__sccl>
 8005fe4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fec:	9341      	str	r3, [sp, #260]	; 0x104
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e7cf      	b.n	8005f92 <__ssvfiscanf_r+0x1e2>
 8005ff2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff8:	9341      	str	r3, [sp, #260]	; 0x104
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e7c9      	b.n	8005f92 <__ssvfiscanf_r+0x1e2>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e7c7      	b.n	8005f92 <__ssvfiscanf_r+0x1e2>
 8006002:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006004:	06c3      	lsls	r3, r0, #27
 8006006:	f53f aefc 	bmi.w	8005e02 <__ssvfiscanf_r+0x52>
 800600a:	9b00      	ldr	r3, [sp, #0]
 800600c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800600e:	1d19      	adds	r1, r3, #4
 8006010:	9100      	str	r1, [sp, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	07c0      	lsls	r0, r0, #31
 8006016:	bf4c      	ite	mi
 8006018:	801a      	strhmi	r2, [r3, #0]
 800601a:	601a      	strpl	r2, [r3, #0]
 800601c:	e6f1      	b.n	8005e02 <__ssvfiscanf_r+0x52>
 800601e:	4621      	mov	r1, r4
 8006020:	4630      	mov	r0, r6
 8006022:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006024:	4798      	blx	r3
 8006026:	2800      	cmp	r0, #0
 8006028:	d0b7      	beq.n	8005f9a <__ssvfiscanf_r+0x1ea>
 800602a:	e79d      	b.n	8005f68 <__ssvfiscanf_r+0x1b8>
 800602c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800602e:	3201      	adds	r2, #1
 8006030:	9245      	str	r2, [sp, #276]	; 0x114
 8006032:	6862      	ldr	r2, [r4, #4]
 8006034:	3a01      	subs	r2, #1
 8006036:	2a00      	cmp	r2, #0
 8006038:	6062      	str	r2, [r4, #4]
 800603a:	dd02      	ble.n	8006042 <__ssvfiscanf_r+0x292>
 800603c:	3301      	adds	r3, #1
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	e7ae      	b.n	8005fa0 <__ssvfiscanf_r+0x1f0>
 8006042:	4621      	mov	r1, r4
 8006044:	4630      	mov	r0, r6
 8006046:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006048:	4798      	blx	r3
 800604a:	2800      	cmp	r0, #0
 800604c:	d0a8      	beq.n	8005fa0 <__ssvfiscanf_r+0x1f0>
 800604e:	e78b      	b.n	8005f68 <__ssvfiscanf_r+0x1b8>
 8006050:	2b04      	cmp	r3, #4
 8006052:	dc06      	bgt.n	8006062 <__ssvfiscanf_r+0x2b2>
 8006054:	466b      	mov	r3, sp
 8006056:	4622      	mov	r2, r4
 8006058:	4630      	mov	r0, r6
 800605a:	a941      	add	r1, sp, #260	; 0x104
 800605c:	f000 f87a 	bl	8006154 <_scanf_i>
 8006060:	e7ac      	b.n	8005fbc <__ssvfiscanf_r+0x20c>
 8006062:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <__ssvfiscanf_r+0x2f0>)
 8006064:	2b00      	cmp	r3, #0
 8006066:	f43f aecc 	beq.w	8005e02 <__ssvfiscanf_r+0x52>
 800606a:	466b      	mov	r3, sp
 800606c:	4622      	mov	r2, r4
 800606e:	4630      	mov	r0, r6
 8006070:	a941      	add	r1, sp, #260	; 0x104
 8006072:	f3af 8000 	nop.w
 8006076:	e7a1      	b.n	8005fbc <__ssvfiscanf_r+0x20c>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800607e:	bf18      	it	ne
 8006080:	f04f 30ff 	movne.w	r0, #4294967295
 8006084:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800608e:	e7f9      	b.n	8006084 <__ssvfiscanf_r+0x2d4>
 8006090:	08005cfd 	.word	0x08005cfd
 8006094:	08005d77 	.word	0x08005d77
 8006098:	0800745d 	.word	0x0800745d
 800609c:	080073fa 	.word	0x080073fa
 80060a0:	00000000 	.word	0x00000000

080060a4 <_scanf_chars>:
 80060a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a8:	4615      	mov	r5, r2
 80060aa:	688a      	ldr	r2, [r1, #8]
 80060ac:	4680      	mov	r8, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b932      	cbnz	r2, 80060c0 <_scanf_chars+0x1c>
 80060b2:	698a      	ldr	r2, [r1, #24]
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	bf0c      	ite	eq
 80060b8:	2201      	moveq	r2, #1
 80060ba:	f04f 32ff 	movne.w	r2, #4294967295
 80060be:	608a      	str	r2, [r1, #8]
 80060c0:	2700      	movs	r7, #0
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8006150 <_scanf_chars+0xac>
 80060c8:	06d1      	lsls	r1, r2, #27
 80060ca:	bf5f      	itttt	pl
 80060cc:	681a      	ldrpl	r2, [r3, #0]
 80060ce:	1d11      	addpl	r1, r2, #4
 80060d0:	6019      	strpl	r1, [r3, #0]
 80060d2:	6816      	ldrpl	r6, [r2, #0]
 80060d4:	69a0      	ldr	r0, [r4, #24]
 80060d6:	b188      	cbz	r0, 80060fc <_scanf_chars+0x58>
 80060d8:	2801      	cmp	r0, #1
 80060da:	d107      	bne.n	80060ec <_scanf_chars+0x48>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	6963      	ldr	r3, [r4, #20]
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	b953      	cbnz	r3, 80060fc <_scanf_chars+0x58>
 80060e6:	bb27      	cbnz	r7, 8006132 <_scanf_chars+0x8e>
 80060e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ec:	2802      	cmp	r0, #2
 80060ee:	d120      	bne.n	8006132 <_scanf_chars+0x8e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80060f8:	071b      	lsls	r3, r3, #28
 80060fa:	d41a      	bmi.n	8006132 <_scanf_chars+0x8e>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	3701      	adds	r7, #1
 8006100:	06da      	lsls	r2, r3, #27
 8006102:	bf5e      	ittt	pl
 8006104:	682b      	ldrpl	r3, [r5, #0]
 8006106:	781b      	ldrbpl	r3, [r3, #0]
 8006108:	f806 3b01 	strbpl.w	r3, [r6], #1
 800610c:	682a      	ldr	r2, [r5, #0]
 800610e:	686b      	ldr	r3, [r5, #4]
 8006110:	3201      	adds	r2, #1
 8006112:	602a      	str	r2, [r5, #0]
 8006114:	68a2      	ldr	r2, [r4, #8]
 8006116:	3b01      	subs	r3, #1
 8006118:	3a01      	subs	r2, #1
 800611a:	606b      	str	r3, [r5, #4]
 800611c:	60a2      	str	r2, [r4, #8]
 800611e:	b142      	cbz	r2, 8006132 <_scanf_chars+0x8e>
 8006120:	2b00      	cmp	r3, #0
 8006122:	dcd7      	bgt.n	80060d4 <_scanf_chars+0x30>
 8006124:	4629      	mov	r1, r5
 8006126:	4640      	mov	r0, r8
 8006128:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800612c:	4798      	blx	r3
 800612e:	2800      	cmp	r0, #0
 8006130:	d0d0      	beq.n	80060d4 <_scanf_chars+0x30>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	f013 0310 	ands.w	r3, r3, #16
 8006138:	d105      	bne.n	8006146 <_scanf_chars+0xa2>
 800613a:	68e2      	ldr	r2, [r4, #12]
 800613c:	3201      	adds	r2, #1
 800613e:	60e2      	str	r2, [r4, #12]
 8006140:	69a2      	ldr	r2, [r4, #24]
 8006142:	b102      	cbz	r2, 8006146 <_scanf_chars+0xa2>
 8006144:	7033      	strb	r3, [r6, #0]
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	2000      	movs	r0, #0
 800614a:	441f      	add	r7, r3
 800614c:	6127      	str	r7, [r4, #16]
 800614e:	e7cb      	b.n	80060e8 <_scanf_chars+0x44>
 8006150:	0800745d 	.word	0x0800745d

08006154 <_scanf_i>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	460c      	mov	r4, r1
 800615a:	4698      	mov	r8, r3
 800615c:	4b72      	ldr	r3, [pc, #456]	; (8006328 <_scanf_i+0x1d4>)
 800615e:	b087      	sub	sp, #28
 8006160:	4682      	mov	sl, r0
 8006162:	4616      	mov	r6, r2
 8006164:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006168:	ab03      	add	r3, sp, #12
 800616a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800616e:	4b6f      	ldr	r3, [pc, #444]	; (800632c <_scanf_i+0x1d8>)
 8006170:	69a1      	ldr	r1, [r4, #24]
 8006172:	4a6f      	ldr	r2, [pc, #444]	; (8006330 <_scanf_i+0x1dc>)
 8006174:	4627      	mov	r7, r4
 8006176:	2903      	cmp	r1, #3
 8006178:	bf18      	it	ne
 800617a:	461a      	movne	r2, r3
 800617c:	68a3      	ldr	r3, [r4, #8]
 800617e:	9201      	str	r2, [sp, #4]
 8006180:	1e5a      	subs	r2, r3, #1
 8006182:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006186:	bf81      	itttt	hi
 8006188:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800618c:	eb03 0905 	addhi.w	r9, r3, r5
 8006190:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006194:	60a3      	strhi	r3, [r4, #8]
 8006196:	f857 3b1c 	ldr.w	r3, [r7], #28
 800619a:	bf98      	it	ls
 800619c:	f04f 0900 	movls.w	r9, #0
 80061a0:	463d      	mov	r5, r7
 80061a2:	f04f 0b00 	mov.w	fp, #0
 80061a6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	6831      	ldr	r1, [r6, #0]
 80061ae:	ab03      	add	r3, sp, #12
 80061b0:	2202      	movs	r2, #2
 80061b2:	7809      	ldrb	r1, [r1, #0]
 80061b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80061b8:	f7fe fff2 	bl	80051a0 <memchr>
 80061bc:	b328      	cbz	r0, 800620a <_scanf_i+0xb6>
 80061be:	f1bb 0f01 	cmp.w	fp, #1
 80061c2:	d159      	bne.n	8006278 <_scanf_i+0x124>
 80061c4:	6862      	ldr	r2, [r4, #4]
 80061c6:	b92a      	cbnz	r2, 80061d4 <_scanf_i+0x80>
 80061c8:	2308      	movs	r3, #8
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80061da:	6022      	str	r2, [r4, #0]
 80061dc:	68a2      	ldr	r2, [r4, #8]
 80061de:	1e51      	subs	r1, r2, #1
 80061e0:	60a1      	str	r1, [r4, #8]
 80061e2:	b192      	cbz	r2, 800620a <_scanf_i+0xb6>
 80061e4:	6832      	ldr	r2, [r6, #0]
 80061e6:	1c51      	adds	r1, r2, #1
 80061e8:	6031      	str	r1, [r6, #0]
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	f805 2b01 	strb.w	r2, [r5], #1
 80061f0:	6872      	ldr	r2, [r6, #4]
 80061f2:	3a01      	subs	r2, #1
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	6072      	str	r2, [r6, #4]
 80061f8:	dc07      	bgt.n	800620a <_scanf_i+0xb6>
 80061fa:	4631      	mov	r1, r6
 80061fc:	4650      	mov	r0, sl
 80061fe:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006202:	4790      	blx	r2
 8006204:	2800      	cmp	r0, #0
 8006206:	f040 8085 	bne.w	8006314 <_scanf_i+0x1c0>
 800620a:	f10b 0b01 	add.w	fp, fp, #1
 800620e:	f1bb 0f03 	cmp.w	fp, #3
 8006212:	d1cb      	bne.n	80061ac <_scanf_i+0x58>
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	b90b      	cbnz	r3, 800621c <_scanf_i+0xc8>
 8006218:	230a      	movs	r3, #10
 800621a:	6063      	str	r3, [r4, #4]
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	4945      	ldr	r1, [pc, #276]	; (8006334 <_scanf_i+0x1e0>)
 8006220:	6960      	ldr	r0, [r4, #20]
 8006222:	1ac9      	subs	r1, r1, r3
 8006224:	f000 f8aa 	bl	800637c <__sccl>
 8006228:	f04f 0b00 	mov.w	fp, #0
 800622c:	68a3      	ldr	r3, [r4, #8]
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d03d      	beq.n	80062b0 <_scanf_i+0x15c>
 8006234:	6831      	ldr	r1, [r6, #0]
 8006236:	6960      	ldr	r0, [r4, #20]
 8006238:	f891 c000 	ldrb.w	ip, [r1]
 800623c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006240:	2800      	cmp	r0, #0
 8006242:	d035      	beq.n	80062b0 <_scanf_i+0x15c>
 8006244:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006248:	d124      	bne.n	8006294 <_scanf_i+0x140>
 800624a:	0510      	lsls	r0, r2, #20
 800624c:	d522      	bpl.n	8006294 <_scanf_i+0x140>
 800624e:	f10b 0b01 	add.w	fp, fp, #1
 8006252:	f1b9 0f00 	cmp.w	r9, #0
 8006256:	d003      	beq.n	8006260 <_scanf_i+0x10c>
 8006258:	3301      	adds	r3, #1
 800625a:	f109 39ff 	add.w	r9, r9, #4294967295
 800625e:	60a3      	str	r3, [r4, #8]
 8006260:	6873      	ldr	r3, [r6, #4]
 8006262:	3b01      	subs	r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	6073      	str	r3, [r6, #4]
 8006268:	dd1b      	ble.n	80062a2 <_scanf_i+0x14e>
 800626a:	6833      	ldr	r3, [r6, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	6033      	str	r3, [r6, #0]
 8006270:	68a3      	ldr	r3, [r4, #8]
 8006272:	3b01      	subs	r3, #1
 8006274:	60a3      	str	r3, [r4, #8]
 8006276:	e7d9      	b.n	800622c <_scanf_i+0xd8>
 8006278:	f1bb 0f02 	cmp.w	fp, #2
 800627c:	d1ae      	bne.n	80061dc <_scanf_i+0x88>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006284:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006288:	d1bf      	bne.n	800620a <_scanf_i+0xb6>
 800628a:	2310      	movs	r3, #16
 800628c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006290:	6063      	str	r3, [r4, #4]
 8006292:	e7a2      	b.n	80061da <_scanf_i+0x86>
 8006294:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006298:	6022      	str	r2, [r4, #0]
 800629a:	780b      	ldrb	r3, [r1, #0]
 800629c:	f805 3b01 	strb.w	r3, [r5], #1
 80062a0:	e7de      	b.n	8006260 <_scanf_i+0x10c>
 80062a2:	4631      	mov	r1, r6
 80062a4:	4650      	mov	r0, sl
 80062a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062aa:	4798      	blx	r3
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d0df      	beq.n	8006270 <_scanf_i+0x11c>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	05d9      	lsls	r1, r3, #23
 80062b4:	d50d      	bpl.n	80062d2 <_scanf_i+0x17e>
 80062b6:	42bd      	cmp	r5, r7
 80062b8:	d909      	bls.n	80062ce <_scanf_i+0x17a>
 80062ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80062be:	4632      	mov	r2, r6
 80062c0:	4650      	mov	r0, sl
 80062c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062c6:	f105 39ff 	add.w	r9, r5, #4294967295
 80062ca:	4798      	blx	r3
 80062cc:	464d      	mov	r5, r9
 80062ce:	42bd      	cmp	r5, r7
 80062d0:	d028      	beq.n	8006324 <_scanf_i+0x1d0>
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	f012 0210 	ands.w	r2, r2, #16
 80062d8:	d113      	bne.n	8006302 <_scanf_i+0x1ae>
 80062da:	702a      	strb	r2, [r5, #0]
 80062dc:	4639      	mov	r1, r7
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	4650      	mov	r0, sl
 80062e2:	9e01      	ldr	r6, [sp, #4]
 80062e4:	47b0      	blx	r6
 80062e6:	f8d8 3000 	ldr.w	r3, [r8]
 80062ea:	6821      	ldr	r1, [r4, #0]
 80062ec:	1d1a      	adds	r2, r3, #4
 80062ee:	f8c8 2000 	str.w	r2, [r8]
 80062f2:	f011 0f20 	tst.w	r1, #32
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	d00f      	beq.n	800631a <_scanf_i+0x1c6>
 80062fa:	6018      	str	r0, [r3, #0]
 80062fc:	68e3      	ldr	r3, [r4, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60e3      	str	r3, [r4, #12]
 8006302:	2000      	movs	r0, #0
 8006304:	1bed      	subs	r5, r5, r7
 8006306:	44ab      	add	fp, r5
 8006308:	6925      	ldr	r5, [r4, #16]
 800630a:	445d      	add	r5, fp
 800630c:	6125      	str	r5, [r4, #16]
 800630e:	b007      	add	sp, #28
 8006310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006314:	f04f 0b00 	mov.w	fp, #0
 8006318:	e7ca      	b.n	80062b0 <_scanf_i+0x15c>
 800631a:	07ca      	lsls	r2, r1, #31
 800631c:	bf4c      	ite	mi
 800631e:	8018      	strhmi	r0, [r3, #0]
 8006320:	6018      	strpl	r0, [r3, #0]
 8006322:	e7eb      	b.n	80062fc <_scanf_i+0x1a8>
 8006324:	2001      	movs	r0, #1
 8006326:	e7f2      	b.n	800630e <_scanf_i+0x1ba>
 8006328:	080071a8 	.word	0x080071a8
 800632c:	080065f9 	.word	0x080065f9
 8006330:	080064fd 	.word	0x080064fd
 8006334:	0800741e 	.word	0x0800741e

08006338 <_read_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	2200      	movs	r2, #0
 8006342:	4d05      	ldr	r5, [pc, #20]	; (8006358 <_read_r+0x20>)
 8006344:	602a      	str	r2, [r5, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	f7fa fdb5 	bl	8000eb6 <_read>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_read_r+0x1e>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_read_r+0x1e>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	20000324 	.word	0x20000324

0800635c <_sbrk_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	2300      	movs	r3, #0
 8006360:	4d05      	ldr	r5, [pc, #20]	; (8006378 <_sbrk_r+0x1c>)
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	f7fa fe0e 	bl	8000f88 <_sbrk>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_sbrk_r+0x1a>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_sbrk_r+0x1a>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20000324 	.word	0x20000324

0800637c <__sccl>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	780b      	ldrb	r3, [r1, #0]
 8006380:	4604      	mov	r4, r0
 8006382:	2b5e      	cmp	r3, #94	; 0x5e
 8006384:	bf13      	iteet	ne
 8006386:	2200      	movne	r2, #0
 8006388:	2201      	moveq	r2, #1
 800638a:	784b      	ldrbeq	r3, [r1, #1]
 800638c:	1c48      	addne	r0, r1, #1
 800638e:	bf08      	it	eq
 8006390:	1c88      	addeq	r0, r1, #2
 8006392:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006396:	1e61      	subs	r1, r4, #1
 8006398:	f801 2f01 	strb.w	r2, [r1, #1]!
 800639c:	42a9      	cmp	r1, r5
 800639e:	d1fb      	bne.n	8006398 <__sccl+0x1c>
 80063a0:	b90b      	cbnz	r3, 80063a6 <__sccl+0x2a>
 80063a2:	3801      	subs	r0, #1
 80063a4:	bd70      	pop	{r4, r5, r6, pc}
 80063a6:	f082 0101 	eor.w	r1, r2, #1
 80063aa:	54e1      	strb	r1, [r4, r3]
 80063ac:	1c42      	adds	r2, r0, #1
 80063ae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80063b2:	4610      	mov	r0, r2
 80063b4:	2d2d      	cmp	r5, #45	; 0x2d
 80063b6:	f102 36ff 	add.w	r6, r2, #4294967295
 80063ba:	d006      	beq.n	80063ca <__sccl+0x4e>
 80063bc:	2d5d      	cmp	r5, #93	; 0x5d
 80063be:	d0f1      	beq.n	80063a4 <__sccl+0x28>
 80063c0:	b90d      	cbnz	r5, 80063c6 <__sccl+0x4a>
 80063c2:	4630      	mov	r0, r6
 80063c4:	e7ee      	b.n	80063a4 <__sccl+0x28>
 80063c6:	462b      	mov	r3, r5
 80063c8:	e7ef      	b.n	80063aa <__sccl+0x2e>
 80063ca:	7816      	ldrb	r6, [r2, #0]
 80063cc:	2e5d      	cmp	r6, #93	; 0x5d
 80063ce:	d0fa      	beq.n	80063c6 <__sccl+0x4a>
 80063d0:	42b3      	cmp	r3, r6
 80063d2:	dcf8      	bgt.n	80063c6 <__sccl+0x4a>
 80063d4:	4618      	mov	r0, r3
 80063d6:	3001      	adds	r0, #1
 80063d8:	4286      	cmp	r6, r0
 80063da:	5421      	strb	r1, [r4, r0]
 80063dc:	dcfb      	bgt.n	80063d6 <__sccl+0x5a>
 80063de:	43d8      	mvns	r0, r3
 80063e0:	4430      	add	r0, r6
 80063e2:	42b3      	cmp	r3, r6
 80063e4:	bfa8      	it	ge
 80063e6:	2000      	movge	r0, #0
 80063e8:	1c5d      	adds	r5, r3, #1
 80063ea:	182b      	adds	r3, r5, r0
 80063ec:	3202      	adds	r2, #2
 80063ee:	e7de      	b.n	80063ae <__sccl+0x32>

080063f0 <_strtol_l.isra.0>:
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f6:	4686      	mov	lr, r0
 80063f8:	d001      	beq.n	80063fe <_strtol_l.isra.0+0xe>
 80063fa:	2b24      	cmp	r3, #36	; 0x24
 80063fc:	d906      	bls.n	800640c <_strtol_l.isra.0+0x1c>
 80063fe:	f7fd faf1 	bl	80039e4 <__errno>
 8006402:	2316      	movs	r3, #22
 8006404:	6003      	str	r3, [r0, #0]
 8006406:	2000      	movs	r0, #0
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	468c      	mov	ip, r1
 800640e:	4e3a      	ldr	r6, [pc, #232]	; (80064f8 <_strtol_l.isra.0+0x108>)
 8006410:	4660      	mov	r0, ip
 8006412:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006416:	5da5      	ldrb	r5, [r4, r6]
 8006418:	f015 0508 	ands.w	r5, r5, #8
 800641c:	d1f8      	bne.n	8006410 <_strtol_l.isra.0+0x20>
 800641e:	2c2d      	cmp	r4, #45	; 0x2d
 8006420:	d133      	bne.n	800648a <_strtol_l.isra.0+0x9a>
 8006422:	f04f 0801 	mov.w	r8, #1
 8006426:	f89c 4000 	ldrb.w	r4, [ip]
 800642a:	f100 0c02 	add.w	ip, r0, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d05d      	beq.n	80064ee <_strtol_l.isra.0+0xfe>
 8006432:	2b10      	cmp	r3, #16
 8006434:	d10c      	bne.n	8006450 <_strtol_l.isra.0+0x60>
 8006436:	2c30      	cmp	r4, #48	; 0x30
 8006438:	d10a      	bne.n	8006450 <_strtol_l.isra.0+0x60>
 800643a:	f89c 0000 	ldrb.w	r0, [ip]
 800643e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006442:	2858      	cmp	r0, #88	; 0x58
 8006444:	d14e      	bne.n	80064e4 <_strtol_l.isra.0+0xf4>
 8006446:	2310      	movs	r3, #16
 8006448:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800644c:	f10c 0c02 	add.w	ip, ip, #2
 8006450:	2500      	movs	r5, #0
 8006452:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006456:	3f01      	subs	r7, #1
 8006458:	fbb7 f9f3 	udiv	r9, r7, r3
 800645c:	4628      	mov	r0, r5
 800645e:	fb03 7a19 	mls	sl, r3, r9, r7
 8006462:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006466:	2e09      	cmp	r6, #9
 8006468:	d818      	bhi.n	800649c <_strtol_l.isra.0+0xac>
 800646a:	4634      	mov	r4, r6
 800646c:	42a3      	cmp	r3, r4
 800646e:	dd24      	ble.n	80064ba <_strtol_l.isra.0+0xca>
 8006470:	2d00      	cmp	r5, #0
 8006472:	db1f      	blt.n	80064b4 <_strtol_l.isra.0+0xc4>
 8006474:	4581      	cmp	r9, r0
 8006476:	d31d      	bcc.n	80064b4 <_strtol_l.isra.0+0xc4>
 8006478:	d101      	bne.n	800647e <_strtol_l.isra.0+0x8e>
 800647a:	45a2      	cmp	sl, r4
 800647c:	db1a      	blt.n	80064b4 <_strtol_l.isra.0+0xc4>
 800647e:	2501      	movs	r5, #1
 8006480:	fb00 4003 	mla	r0, r0, r3, r4
 8006484:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006488:	e7eb      	b.n	8006462 <_strtol_l.isra.0+0x72>
 800648a:	2c2b      	cmp	r4, #43	; 0x2b
 800648c:	bf08      	it	eq
 800648e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006492:	46a8      	mov	r8, r5
 8006494:	bf08      	it	eq
 8006496:	f100 0c02 	addeq.w	ip, r0, #2
 800649a:	e7c8      	b.n	800642e <_strtol_l.isra.0+0x3e>
 800649c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80064a0:	2e19      	cmp	r6, #25
 80064a2:	d801      	bhi.n	80064a8 <_strtol_l.isra.0+0xb8>
 80064a4:	3c37      	subs	r4, #55	; 0x37
 80064a6:	e7e1      	b.n	800646c <_strtol_l.isra.0+0x7c>
 80064a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80064ac:	2e19      	cmp	r6, #25
 80064ae:	d804      	bhi.n	80064ba <_strtol_l.isra.0+0xca>
 80064b0:	3c57      	subs	r4, #87	; 0x57
 80064b2:	e7db      	b.n	800646c <_strtol_l.isra.0+0x7c>
 80064b4:	f04f 35ff 	mov.w	r5, #4294967295
 80064b8:	e7e4      	b.n	8006484 <_strtol_l.isra.0+0x94>
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	da08      	bge.n	80064d0 <_strtol_l.isra.0+0xe0>
 80064be:	2322      	movs	r3, #34	; 0x22
 80064c0:	4638      	mov	r0, r7
 80064c2:	f8ce 3000 	str.w	r3, [lr]
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	d09e      	beq.n	8006408 <_strtol_l.isra.0+0x18>
 80064ca:	f10c 31ff 	add.w	r1, ip, #4294967295
 80064ce:	e007      	b.n	80064e0 <_strtol_l.isra.0+0xf0>
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	d000      	beq.n	80064d8 <_strtol_l.isra.0+0xe8>
 80064d6:	4240      	negs	r0, r0
 80064d8:	2a00      	cmp	r2, #0
 80064da:	d095      	beq.n	8006408 <_strtol_l.isra.0+0x18>
 80064dc:	2d00      	cmp	r5, #0
 80064de:	d1f4      	bne.n	80064ca <_strtol_l.isra.0+0xda>
 80064e0:	6011      	str	r1, [r2, #0]
 80064e2:	e791      	b.n	8006408 <_strtol_l.isra.0+0x18>
 80064e4:	2430      	movs	r4, #48	; 0x30
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1b2      	bne.n	8006450 <_strtol_l.isra.0+0x60>
 80064ea:	2308      	movs	r3, #8
 80064ec:	e7b0      	b.n	8006450 <_strtol_l.isra.0+0x60>
 80064ee:	2c30      	cmp	r4, #48	; 0x30
 80064f0:	d0a3      	beq.n	800643a <_strtol_l.isra.0+0x4a>
 80064f2:	230a      	movs	r3, #10
 80064f4:	e7ac      	b.n	8006450 <_strtol_l.isra.0+0x60>
 80064f6:	bf00      	nop
 80064f8:	0800745d 	.word	0x0800745d

080064fc <_strtol_r>:
 80064fc:	f7ff bf78 	b.w	80063f0 <_strtol_l.isra.0>

08006500 <_strtoul_l.isra.0>:
 8006500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006504:	468c      	mov	ip, r1
 8006506:	4686      	mov	lr, r0
 8006508:	4e3a      	ldr	r6, [pc, #232]	; (80065f4 <_strtoul_l.isra.0+0xf4>)
 800650a:	4660      	mov	r0, ip
 800650c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006510:	5da5      	ldrb	r5, [r4, r6]
 8006512:	f015 0508 	ands.w	r5, r5, #8
 8006516:	d1f8      	bne.n	800650a <_strtoul_l.isra.0+0xa>
 8006518:	2c2d      	cmp	r4, #45	; 0x2d
 800651a:	d134      	bne.n	8006586 <_strtoul_l.isra.0+0x86>
 800651c:	f04f 0801 	mov.w	r8, #1
 8006520:	f89c 4000 	ldrb.w	r4, [ip]
 8006524:	f100 0c02 	add.w	ip, r0, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d05e      	beq.n	80065ea <_strtoul_l.isra.0+0xea>
 800652c:	2b10      	cmp	r3, #16
 800652e:	d10c      	bne.n	800654a <_strtoul_l.isra.0+0x4a>
 8006530:	2c30      	cmp	r4, #48	; 0x30
 8006532:	d10a      	bne.n	800654a <_strtoul_l.isra.0+0x4a>
 8006534:	f89c 0000 	ldrb.w	r0, [ip]
 8006538:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800653c:	2858      	cmp	r0, #88	; 0x58
 800653e:	d14f      	bne.n	80065e0 <_strtoul_l.isra.0+0xe0>
 8006540:	2310      	movs	r3, #16
 8006542:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006546:	f10c 0c02 	add.w	ip, ip, #2
 800654a:	f04f 37ff 	mov.w	r7, #4294967295
 800654e:	fbb7 f7f3 	udiv	r7, r7, r3
 8006552:	2500      	movs	r5, #0
 8006554:	fb03 f907 	mul.w	r9, r3, r7
 8006558:	4628      	mov	r0, r5
 800655a:	ea6f 0909 	mvn.w	r9, r9
 800655e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006562:	2e09      	cmp	r6, #9
 8006564:	d818      	bhi.n	8006598 <_strtoul_l.isra.0+0x98>
 8006566:	4634      	mov	r4, r6
 8006568:	42a3      	cmp	r3, r4
 800656a:	dd24      	ble.n	80065b6 <_strtoul_l.isra.0+0xb6>
 800656c:	2d00      	cmp	r5, #0
 800656e:	db1f      	blt.n	80065b0 <_strtoul_l.isra.0+0xb0>
 8006570:	4287      	cmp	r7, r0
 8006572:	d31d      	bcc.n	80065b0 <_strtoul_l.isra.0+0xb0>
 8006574:	d101      	bne.n	800657a <_strtoul_l.isra.0+0x7a>
 8006576:	45a1      	cmp	r9, r4
 8006578:	db1a      	blt.n	80065b0 <_strtoul_l.isra.0+0xb0>
 800657a:	2501      	movs	r5, #1
 800657c:	fb00 4003 	mla	r0, r0, r3, r4
 8006580:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006584:	e7eb      	b.n	800655e <_strtoul_l.isra.0+0x5e>
 8006586:	2c2b      	cmp	r4, #43	; 0x2b
 8006588:	bf08      	it	eq
 800658a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800658e:	46a8      	mov	r8, r5
 8006590:	bf08      	it	eq
 8006592:	f100 0c02 	addeq.w	ip, r0, #2
 8006596:	e7c7      	b.n	8006528 <_strtoul_l.isra.0+0x28>
 8006598:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800659c:	2e19      	cmp	r6, #25
 800659e:	d801      	bhi.n	80065a4 <_strtoul_l.isra.0+0xa4>
 80065a0:	3c37      	subs	r4, #55	; 0x37
 80065a2:	e7e1      	b.n	8006568 <_strtoul_l.isra.0+0x68>
 80065a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80065a8:	2e19      	cmp	r6, #25
 80065aa:	d804      	bhi.n	80065b6 <_strtoul_l.isra.0+0xb6>
 80065ac:	3c57      	subs	r4, #87	; 0x57
 80065ae:	e7db      	b.n	8006568 <_strtoul_l.isra.0+0x68>
 80065b0:	f04f 35ff 	mov.w	r5, #4294967295
 80065b4:	e7e4      	b.n	8006580 <_strtoul_l.isra.0+0x80>
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	da07      	bge.n	80065ca <_strtoul_l.isra.0+0xca>
 80065ba:	2322      	movs	r3, #34	; 0x22
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	f8ce 3000 	str.w	r3, [lr]
 80065c4:	b942      	cbnz	r2, 80065d8 <_strtoul_l.isra.0+0xd8>
 80065c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	d000      	beq.n	80065d2 <_strtoul_l.isra.0+0xd2>
 80065d0:	4240      	negs	r0, r0
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	d0f7      	beq.n	80065c6 <_strtoul_l.isra.0+0xc6>
 80065d6:	b10d      	cbz	r5, 80065dc <_strtoul_l.isra.0+0xdc>
 80065d8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	e7f2      	b.n	80065c6 <_strtoul_l.isra.0+0xc6>
 80065e0:	2430      	movs	r4, #48	; 0x30
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1b1      	bne.n	800654a <_strtoul_l.isra.0+0x4a>
 80065e6:	2308      	movs	r3, #8
 80065e8:	e7af      	b.n	800654a <_strtoul_l.isra.0+0x4a>
 80065ea:	2c30      	cmp	r4, #48	; 0x30
 80065ec:	d0a2      	beq.n	8006534 <_strtoul_l.isra.0+0x34>
 80065ee:	230a      	movs	r3, #10
 80065f0:	e7ab      	b.n	800654a <_strtoul_l.isra.0+0x4a>
 80065f2:	bf00      	nop
 80065f4:	0800745d 	.word	0x0800745d

080065f8 <_strtoul_r>:
 80065f8:	f7ff bf82 	b.w	8006500 <_strtoul_l.isra.0>

080065fc <__submore>:
 80065fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006600:	460c      	mov	r4, r1
 8006602:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006608:	4299      	cmp	r1, r3
 800660a:	d11b      	bne.n	8006644 <__submore+0x48>
 800660c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006610:	f7ff f9be 	bl	8005990 <_malloc_r>
 8006614:	b918      	cbnz	r0, 800661e <__submore+0x22>
 8006616:	f04f 30ff 	mov.w	r0, #4294967295
 800661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006622:	63a3      	str	r3, [r4, #56]	; 0x38
 8006624:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006628:	6360      	str	r0, [r4, #52]	; 0x34
 800662a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800662e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006632:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006636:	7043      	strb	r3, [r0, #1]
 8006638:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800663c:	7003      	strb	r3, [r0, #0]
 800663e:	6020      	str	r0, [r4, #0]
 8006640:	2000      	movs	r0, #0
 8006642:	e7ea      	b.n	800661a <__submore+0x1e>
 8006644:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006646:	0077      	lsls	r7, r6, #1
 8006648:	463a      	mov	r2, r7
 800664a:	f000 fa31 	bl	8006ab0 <_realloc_r>
 800664e:	4605      	mov	r5, r0
 8006650:	2800      	cmp	r0, #0
 8006652:	d0e0      	beq.n	8006616 <__submore+0x1a>
 8006654:	eb00 0806 	add.w	r8, r0, r6
 8006658:	4601      	mov	r1, r0
 800665a:	4632      	mov	r2, r6
 800665c:	4640      	mov	r0, r8
 800665e:	f7fe fdad 	bl	80051bc <memcpy>
 8006662:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006666:	f8c4 8000 	str.w	r8, [r4]
 800666a:	e7e9      	b.n	8006640 <__submore+0x44>

0800666c <__assert_func>:
 800666c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800666e:	4614      	mov	r4, r2
 8006670:	461a      	mov	r2, r3
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <__assert_func+0x2c>)
 8006674:	4605      	mov	r5, r0
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68d8      	ldr	r0, [r3, #12]
 800667a:	b14c      	cbz	r4, 8006690 <__assert_func+0x24>
 800667c:	4b07      	ldr	r3, [pc, #28]	; (800669c <__assert_func+0x30>)
 800667e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006682:	9100      	str	r1, [sp, #0]
 8006684:	462b      	mov	r3, r5
 8006686:	4906      	ldr	r1, [pc, #24]	; (80066a0 <__assert_func+0x34>)
 8006688:	f000 f9a6 	bl	80069d8 <fiprintf>
 800668c:	f000 fc5c 	bl	8006f48 <abort>
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <__assert_func+0x38>)
 8006692:	461c      	mov	r4, r3
 8006694:	e7f3      	b.n	800667e <__assert_func+0x12>
 8006696:	bf00      	nop
 8006698:	20000018 	.word	0x20000018
 800669c:	08007420 	.word	0x08007420
 80066a0:	0800742d 	.word	0x0800742d
 80066a4:	0800745b 	.word	0x0800745b

080066a8 <__sflush_r>:
 80066a8:	898a      	ldrh	r2, [r1, #12]
 80066aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	4605      	mov	r5, r0
 80066b0:	0710      	lsls	r0, r2, #28
 80066b2:	460c      	mov	r4, r1
 80066b4:	d458      	bmi.n	8006768 <__sflush_r+0xc0>
 80066b6:	684b      	ldr	r3, [r1, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc05      	bgt.n	80066c8 <__sflush_r+0x20>
 80066bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dc02      	bgt.n	80066c8 <__sflush_r+0x20>
 80066c2:	2000      	movs	r0, #0
 80066c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	d0f9      	beq.n	80066c2 <__sflush_r+0x1a>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066d4:	682f      	ldr	r7, [r5, #0]
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	d032      	beq.n	8006740 <__sflush_r+0x98>
 80066da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	075a      	lsls	r2, r3, #29
 80066e0:	d505      	bpl.n	80066ee <__sflush_r+0x46>
 80066e2:	6863      	ldr	r3, [r4, #4]
 80066e4:	1ac0      	subs	r0, r0, r3
 80066e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066e8:	b10b      	cbz	r3, 80066ee <__sflush_r+0x46>
 80066ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ec:	1ac0      	subs	r0, r0, r3
 80066ee:	2300      	movs	r3, #0
 80066f0:	4602      	mov	r2, r0
 80066f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066f4:	4628      	mov	r0, r5
 80066f6:	6a21      	ldr	r1, [r4, #32]
 80066f8:	47b0      	blx	r6
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	d106      	bne.n	800670e <__sflush_r+0x66>
 8006700:	6829      	ldr	r1, [r5, #0]
 8006702:	291d      	cmp	r1, #29
 8006704:	d82c      	bhi.n	8006760 <__sflush_r+0xb8>
 8006706:	4a2a      	ldr	r2, [pc, #168]	; (80067b0 <__sflush_r+0x108>)
 8006708:	40ca      	lsrs	r2, r1
 800670a:	07d6      	lsls	r6, r2, #31
 800670c:	d528      	bpl.n	8006760 <__sflush_r+0xb8>
 800670e:	2200      	movs	r2, #0
 8006710:	6062      	str	r2, [r4, #4]
 8006712:	6922      	ldr	r2, [r4, #16]
 8006714:	04d9      	lsls	r1, r3, #19
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	d504      	bpl.n	8006724 <__sflush_r+0x7c>
 800671a:	1c42      	adds	r2, r0, #1
 800671c:	d101      	bne.n	8006722 <__sflush_r+0x7a>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	b903      	cbnz	r3, 8006724 <__sflush_r+0x7c>
 8006722:	6560      	str	r0, [r4, #84]	; 0x54
 8006724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006726:	602f      	str	r7, [r5, #0]
 8006728:	2900      	cmp	r1, #0
 800672a:	d0ca      	beq.n	80066c2 <__sflush_r+0x1a>
 800672c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006730:	4299      	cmp	r1, r3
 8006732:	d002      	beq.n	800673a <__sflush_r+0x92>
 8006734:	4628      	mov	r0, r5
 8006736:	f7ff f8df 	bl	80058f8 <_free_r>
 800673a:	2000      	movs	r0, #0
 800673c:	6360      	str	r0, [r4, #52]	; 0x34
 800673e:	e7c1      	b.n	80066c4 <__sflush_r+0x1c>
 8006740:	6a21      	ldr	r1, [r4, #32]
 8006742:	2301      	movs	r3, #1
 8006744:	4628      	mov	r0, r5
 8006746:	47b0      	blx	r6
 8006748:	1c41      	adds	r1, r0, #1
 800674a:	d1c7      	bne.n	80066dc <__sflush_r+0x34>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0c4      	beq.n	80066dc <__sflush_r+0x34>
 8006752:	2b1d      	cmp	r3, #29
 8006754:	d001      	beq.n	800675a <__sflush_r+0xb2>
 8006756:	2b16      	cmp	r3, #22
 8006758:	d101      	bne.n	800675e <__sflush_r+0xb6>
 800675a:	602f      	str	r7, [r5, #0]
 800675c:	e7b1      	b.n	80066c2 <__sflush_r+0x1a>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	e7ad      	b.n	80066c4 <__sflush_r+0x1c>
 8006768:	690f      	ldr	r7, [r1, #16]
 800676a:	2f00      	cmp	r7, #0
 800676c:	d0a9      	beq.n	80066c2 <__sflush_r+0x1a>
 800676e:	0793      	lsls	r3, r2, #30
 8006770:	bf18      	it	ne
 8006772:	2300      	movne	r3, #0
 8006774:	680e      	ldr	r6, [r1, #0]
 8006776:	bf08      	it	eq
 8006778:	694b      	ldreq	r3, [r1, #20]
 800677a:	eba6 0807 	sub.w	r8, r6, r7
 800677e:	600f      	str	r7, [r1, #0]
 8006780:	608b      	str	r3, [r1, #8]
 8006782:	f1b8 0f00 	cmp.w	r8, #0
 8006786:	dd9c      	ble.n	80066c2 <__sflush_r+0x1a>
 8006788:	4643      	mov	r3, r8
 800678a:	463a      	mov	r2, r7
 800678c:	4628      	mov	r0, r5
 800678e:	6a21      	ldr	r1, [r4, #32]
 8006790:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006792:	47b0      	blx	r6
 8006794:	2800      	cmp	r0, #0
 8006796:	dc06      	bgt.n	80067a6 <__sflush_r+0xfe>
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f04f 30ff 	mov.w	r0, #4294967295
 800679e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	e78e      	b.n	80066c4 <__sflush_r+0x1c>
 80067a6:	4407      	add	r7, r0
 80067a8:	eba8 0800 	sub.w	r8, r8, r0
 80067ac:	e7e9      	b.n	8006782 <__sflush_r+0xda>
 80067ae:	bf00      	nop
 80067b0:	20400001 	.word	0x20400001

080067b4 <_fflush_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	690b      	ldr	r3, [r1, #16]
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	b913      	cbnz	r3, 80067c4 <_fflush_r+0x10>
 80067be:	2500      	movs	r5, #0
 80067c0:	4628      	mov	r0, r5
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	b118      	cbz	r0, 80067ce <_fflush_r+0x1a>
 80067c6:	6983      	ldr	r3, [r0, #24]
 80067c8:	b90b      	cbnz	r3, 80067ce <_fflush_r+0x1a>
 80067ca:	f000 f887 	bl	80068dc <__sinit>
 80067ce:	4b14      	ldr	r3, [pc, #80]	; (8006820 <_fflush_r+0x6c>)
 80067d0:	429c      	cmp	r4, r3
 80067d2:	d11b      	bne.n	800680c <_fflush_r+0x58>
 80067d4:	686c      	ldr	r4, [r5, #4]
 80067d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0ef      	beq.n	80067be <_fflush_r+0xa>
 80067de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067e0:	07d0      	lsls	r0, r2, #31
 80067e2:	d404      	bmi.n	80067ee <_fflush_r+0x3a>
 80067e4:	0599      	lsls	r1, r3, #22
 80067e6:	d402      	bmi.n	80067ee <_fflush_r+0x3a>
 80067e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ea:	f000 f927 	bl	8006a3c <__retarget_lock_acquire_recursive>
 80067ee:	4628      	mov	r0, r5
 80067f0:	4621      	mov	r1, r4
 80067f2:	f7ff ff59 	bl	80066a8 <__sflush_r>
 80067f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067f8:	4605      	mov	r5, r0
 80067fa:	07da      	lsls	r2, r3, #31
 80067fc:	d4e0      	bmi.n	80067c0 <_fflush_r+0xc>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	059b      	lsls	r3, r3, #22
 8006802:	d4dd      	bmi.n	80067c0 <_fflush_r+0xc>
 8006804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006806:	f000 f91a 	bl	8006a3e <__retarget_lock_release_recursive>
 800680a:	e7d9      	b.n	80067c0 <_fflush_r+0xc>
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <_fflush_r+0x70>)
 800680e:	429c      	cmp	r4, r3
 8006810:	d101      	bne.n	8006816 <_fflush_r+0x62>
 8006812:	68ac      	ldr	r4, [r5, #8]
 8006814:	e7df      	b.n	80067d6 <_fflush_r+0x22>
 8006816:	4b04      	ldr	r3, [pc, #16]	; (8006828 <_fflush_r+0x74>)
 8006818:	429c      	cmp	r4, r3
 800681a:	bf08      	it	eq
 800681c:	68ec      	ldreq	r4, [r5, #12]
 800681e:	e7da      	b.n	80067d6 <_fflush_r+0x22>
 8006820:	08007580 	.word	0x08007580
 8006824:	080075a0 	.word	0x080075a0
 8006828:	08007560 	.word	0x08007560

0800682c <std>:
 800682c:	2300      	movs	r3, #0
 800682e:	b510      	push	{r4, lr}
 8006830:	4604      	mov	r4, r0
 8006832:	e9c0 3300 	strd	r3, r3, [r0]
 8006836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800683a:	6083      	str	r3, [r0, #8]
 800683c:	8181      	strh	r1, [r0, #12]
 800683e:	6643      	str	r3, [r0, #100]	; 0x64
 8006840:	81c2      	strh	r2, [r0, #14]
 8006842:	6183      	str	r3, [r0, #24]
 8006844:	4619      	mov	r1, r3
 8006846:	2208      	movs	r2, #8
 8006848:	305c      	adds	r0, #92	; 0x5c
 800684a:	f7fd f8f5 	bl	8003a38 <memset>
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <std+0x38>)
 8006850:	6224      	str	r4, [r4, #32]
 8006852:	6263      	str	r3, [r4, #36]	; 0x24
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <std+0x3c>)
 8006856:	62a3      	str	r3, [r4, #40]	; 0x28
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <std+0x40>)
 800685a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <std+0x44>)
 800685e:	6323      	str	r3, [r4, #48]	; 0x30
 8006860:	bd10      	pop	{r4, pc}
 8006862:	bf00      	nop
 8006864:	0800439d 	.word	0x0800439d
 8006868:	080043c3 	.word	0x080043c3
 800686c:	080043fb 	.word	0x080043fb
 8006870:	0800441f 	.word	0x0800441f

08006874 <_cleanup_r>:
 8006874:	4901      	ldr	r1, [pc, #4]	; (800687c <_cleanup_r+0x8>)
 8006876:	f000 b8c1 	b.w	80069fc <_fwalk_reent>
 800687a:	bf00      	nop
 800687c:	080067b5 	.word	0x080067b5

08006880 <__sfmoreglue>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	2568      	movs	r5, #104	; 0x68
 8006884:	1e4a      	subs	r2, r1, #1
 8006886:	4355      	muls	r5, r2
 8006888:	460e      	mov	r6, r1
 800688a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800688e:	f7ff f87f 	bl	8005990 <_malloc_r>
 8006892:	4604      	mov	r4, r0
 8006894:	b140      	cbz	r0, 80068a8 <__sfmoreglue+0x28>
 8006896:	2100      	movs	r1, #0
 8006898:	e9c0 1600 	strd	r1, r6, [r0]
 800689c:	300c      	adds	r0, #12
 800689e:	60a0      	str	r0, [r4, #8]
 80068a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068a4:	f7fd f8c8 	bl	8003a38 <memset>
 80068a8:	4620      	mov	r0, r4
 80068aa:	bd70      	pop	{r4, r5, r6, pc}

080068ac <__sfp_lock_acquire>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__sfp_lock_acquire+0x8>)
 80068ae:	f000 b8c5 	b.w	8006a3c <__retarget_lock_acquire_recursive>
 80068b2:	bf00      	nop
 80068b4:	20000330 	.word	0x20000330

080068b8 <__sfp_lock_release>:
 80068b8:	4801      	ldr	r0, [pc, #4]	; (80068c0 <__sfp_lock_release+0x8>)
 80068ba:	f000 b8c0 	b.w	8006a3e <__retarget_lock_release_recursive>
 80068be:	bf00      	nop
 80068c0:	20000330 	.word	0x20000330

080068c4 <__sinit_lock_acquire>:
 80068c4:	4801      	ldr	r0, [pc, #4]	; (80068cc <__sinit_lock_acquire+0x8>)
 80068c6:	f000 b8b9 	b.w	8006a3c <__retarget_lock_acquire_recursive>
 80068ca:	bf00      	nop
 80068cc:	2000032b 	.word	0x2000032b

080068d0 <__sinit_lock_release>:
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <__sinit_lock_release+0x8>)
 80068d2:	f000 b8b4 	b.w	8006a3e <__retarget_lock_release_recursive>
 80068d6:	bf00      	nop
 80068d8:	2000032b 	.word	0x2000032b

080068dc <__sinit>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4604      	mov	r4, r0
 80068e0:	f7ff fff0 	bl	80068c4 <__sinit_lock_acquire>
 80068e4:	69a3      	ldr	r3, [r4, #24]
 80068e6:	b11b      	cbz	r3, 80068f0 <__sinit+0x14>
 80068e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ec:	f7ff bff0 	b.w	80068d0 <__sinit_lock_release>
 80068f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068f4:	6523      	str	r3, [r4, #80]	; 0x50
 80068f6:	4b13      	ldr	r3, [pc, #76]	; (8006944 <__sinit+0x68>)
 80068f8:	4a13      	ldr	r2, [pc, #76]	; (8006948 <__sinit+0x6c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80068fe:	42a3      	cmp	r3, r4
 8006900:	bf08      	it	eq
 8006902:	2301      	moveq	r3, #1
 8006904:	4620      	mov	r0, r4
 8006906:	bf08      	it	eq
 8006908:	61a3      	streq	r3, [r4, #24]
 800690a:	f000 f81f 	bl	800694c <__sfp>
 800690e:	6060      	str	r0, [r4, #4]
 8006910:	4620      	mov	r0, r4
 8006912:	f000 f81b 	bl	800694c <__sfp>
 8006916:	60a0      	str	r0, [r4, #8]
 8006918:	4620      	mov	r0, r4
 800691a:	f000 f817 	bl	800694c <__sfp>
 800691e:	2200      	movs	r2, #0
 8006920:	2104      	movs	r1, #4
 8006922:	60e0      	str	r0, [r4, #12]
 8006924:	6860      	ldr	r0, [r4, #4]
 8006926:	f7ff ff81 	bl	800682c <std>
 800692a:	2201      	movs	r2, #1
 800692c:	2109      	movs	r1, #9
 800692e:	68a0      	ldr	r0, [r4, #8]
 8006930:	f7ff ff7c 	bl	800682c <std>
 8006934:	2202      	movs	r2, #2
 8006936:	2112      	movs	r1, #18
 8006938:	68e0      	ldr	r0, [r4, #12]
 800693a:	f7ff ff77 	bl	800682c <std>
 800693e:	2301      	movs	r3, #1
 8006940:	61a3      	str	r3, [r4, #24]
 8006942:	e7d1      	b.n	80068e8 <__sinit+0xc>
 8006944:	080071cc 	.word	0x080071cc
 8006948:	08006875 	.word	0x08006875

0800694c <__sfp>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	4607      	mov	r7, r0
 8006950:	f7ff ffac 	bl	80068ac <__sfp_lock_acquire>
 8006954:	4b1e      	ldr	r3, [pc, #120]	; (80069d0 <__sfp+0x84>)
 8006956:	681e      	ldr	r6, [r3, #0]
 8006958:	69b3      	ldr	r3, [r6, #24]
 800695a:	b913      	cbnz	r3, 8006962 <__sfp+0x16>
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff ffbd 	bl	80068dc <__sinit>
 8006962:	3648      	adds	r6, #72	; 0x48
 8006964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006968:	3b01      	subs	r3, #1
 800696a:	d503      	bpl.n	8006974 <__sfp+0x28>
 800696c:	6833      	ldr	r3, [r6, #0]
 800696e:	b30b      	cbz	r3, 80069b4 <__sfp+0x68>
 8006970:	6836      	ldr	r6, [r6, #0]
 8006972:	e7f7      	b.n	8006964 <__sfp+0x18>
 8006974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006978:	b9d5      	cbnz	r5, 80069b0 <__sfp+0x64>
 800697a:	4b16      	ldr	r3, [pc, #88]	; (80069d4 <__sfp+0x88>)
 800697c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006980:	60e3      	str	r3, [r4, #12]
 8006982:	6665      	str	r5, [r4, #100]	; 0x64
 8006984:	f000 f859 	bl	8006a3a <__retarget_lock_init_recursive>
 8006988:	f7ff ff96 	bl	80068b8 <__sfp_lock_release>
 800698c:	2208      	movs	r2, #8
 800698e:	4629      	mov	r1, r5
 8006990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006998:	6025      	str	r5, [r4, #0]
 800699a:	61a5      	str	r5, [r4, #24]
 800699c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069a0:	f7fd f84a 	bl	8003a38 <memset>
 80069a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069ac:	4620      	mov	r0, r4
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b0:	3468      	adds	r4, #104	; 0x68
 80069b2:	e7d9      	b.n	8006968 <__sfp+0x1c>
 80069b4:	2104      	movs	r1, #4
 80069b6:	4638      	mov	r0, r7
 80069b8:	f7ff ff62 	bl	8006880 <__sfmoreglue>
 80069bc:	4604      	mov	r4, r0
 80069be:	6030      	str	r0, [r6, #0]
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d1d5      	bne.n	8006970 <__sfp+0x24>
 80069c4:	f7ff ff78 	bl	80068b8 <__sfp_lock_release>
 80069c8:	230c      	movs	r3, #12
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	e7ee      	b.n	80069ac <__sfp+0x60>
 80069ce:	bf00      	nop
 80069d0:	080071cc 	.word	0x080071cc
 80069d4:	ffff0001 	.word	0xffff0001

080069d8 <fiprintf>:
 80069d8:	b40e      	push	{r1, r2, r3}
 80069da:	b503      	push	{r0, r1, lr}
 80069dc:	4601      	mov	r1, r0
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	4805      	ldr	r0, [pc, #20]	; (80069f8 <fiprintf+0x20>)
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	f000 f8af 	bl	8006b4c <_vfiprintf_r>
 80069ee:	b002      	add	sp, #8
 80069f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f4:	b003      	add	sp, #12
 80069f6:	4770      	bx	lr
 80069f8:	20000018 	.word	0x20000018

080069fc <_fwalk_reent>:
 80069fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a00:	4606      	mov	r6, r0
 8006a02:	4688      	mov	r8, r1
 8006a04:	2700      	movs	r7, #0
 8006a06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a0e:	f1b9 0901 	subs.w	r9, r9, #1
 8006a12:	d505      	bpl.n	8006a20 <_fwalk_reent+0x24>
 8006a14:	6824      	ldr	r4, [r4, #0]
 8006a16:	2c00      	cmp	r4, #0
 8006a18:	d1f7      	bne.n	8006a0a <_fwalk_reent+0xe>
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a20:	89ab      	ldrh	r3, [r5, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d907      	bls.n	8006a36 <_fwalk_reent+0x3a>
 8006a26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	d003      	beq.n	8006a36 <_fwalk_reent+0x3a>
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4630      	mov	r0, r6
 8006a32:	47c0      	blx	r8
 8006a34:	4307      	orrs	r7, r0
 8006a36:	3568      	adds	r5, #104	; 0x68
 8006a38:	e7e9      	b.n	8006a0e <_fwalk_reent+0x12>

08006a3a <__retarget_lock_init_recursive>:
 8006a3a:	4770      	bx	lr

08006a3c <__retarget_lock_acquire_recursive>:
 8006a3c:	4770      	bx	lr

08006a3e <__retarget_lock_release_recursive>:
 8006a3e:	4770      	bx	lr

08006a40 <__ascii_mbtowc>:
 8006a40:	b082      	sub	sp, #8
 8006a42:	b901      	cbnz	r1, 8006a46 <__ascii_mbtowc+0x6>
 8006a44:	a901      	add	r1, sp, #4
 8006a46:	b142      	cbz	r2, 8006a5a <__ascii_mbtowc+0x1a>
 8006a48:	b14b      	cbz	r3, 8006a5e <__ascii_mbtowc+0x1e>
 8006a4a:	7813      	ldrb	r3, [r2, #0]
 8006a4c:	600b      	str	r3, [r1, #0]
 8006a4e:	7812      	ldrb	r2, [r2, #0]
 8006a50:	1e10      	subs	r0, r2, #0
 8006a52:	bf18      	it	ne
 8006a54:	2001      	movne	r0, #1
 8006a56:	b002      	add	sp, #8
 8006a58:	4770      	bx	lr
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	e7fb      	b.n	8006a56 <__ascii_mbtowc+0x16>
 8006a5e:	f06f 0001 	mvn.w	r0, #1
 8006a62:	e7f8      	b.n	8006a56 <__ascii_mbtowc+0x16>

08006a64 <memmove>:
 8006a64:	4288      	cmp	r0, r1
 8006a66:	b510      	push	{r4, lr}
 8006a68:	eb01 0402 	add.w	r4, r1, r2
 8006a6c:	d902      	bls.n	8006a74 <memmove+0x10>
 8006a6e:	4284      	cmp	r4, r0
 8006a70:	4623      	mov	r3, r4
 8006a72:	d807      	bhi.n	8006a84 <memmove+0x20>
 8006a74:	1e43      	subs	r3, r0, #1
 8006a76:	42a1      	cmp	r1, r4
 8006a78:	d008      	beq.n	8006a8c <memmove+0x28>
 8006a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a82:	e7f8      	b.n	8006a76 <memmove+0x12>
 8006a84:	4601      	mov	r1, r0
 8006a86:	4402      	add	r2, r0
 8006a88:	428a      	cmp	r2, r1
 8006a8a:	d100      	bne.n	8006a8e <memmove+0x2a>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a96:	e7f7      	b.n	8006a88 <memmove+0x24>

08006a98 <__malloc_lock>:
 8006a98:	4801      	ldr	r0, [pc, #4]	; (8006aa0 <__malloc_lock+0x8>)
 8006a9a:	f7ff bfcf 	b.w	8006a3c <__retarget_lock_acquire_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	2000032c 	.word	0x2000032c

08006aa4 <__malloc_unlock>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	; (8006aac <__malloc_unlock+0x8>)
 8006aa6:	f7ff bfca 	b.w	8006a3e <__retarget_lock_release_recursive>
 8006aaa:	bf00      	nop
 8006aac:	2000032c 	.word	0x2000032c

08006ab0 <_realloc_r>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	460e      	mov	r6, r1
 8006ab8:	b921      	cbnz	r1, 8006ac4 <_realloc_r+0x14>
 8006aba:	4611      	mov	r1, r2
 8006abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ac0:	f7fe bf66 	b.w	8005990 <_malloc_r>
 8006ac4:	b922      	cbnz	r2, 8006ad0 <_realloc_r+0x20>
 8006ac6:	f7fe ff17 	bl	80058f8 <_free_r>
 8006aca:	4625      	mov	r5, r4
 8006acc:	4628      	mov	r0, r5
 8006ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad0:	f000 faa6 	bl	8007020 <_malloc_usable_size_r>
 8006ad4:	42a0      	cmp	r0, r4
 8006ad6:	d20f      	bcs.n	8006af8 <_realloc_r+0x48>
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4638      	mov	r0, r7
 8006adc:	f7fe ff58 	bl	8005990 <_malloc_r>
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d0f2      	beq.n	8006acc <_realloc_r+0x1c>
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4622      	mov	r2, r4
 8006aea:	f7fe fb67 	bl	80051bc <memcpy>
 8006aee:	4631      	mov	r1, r6
 8006af0:	4638      	mov	r0, r7
 8006af2:	f7fe ff01 	bl	80058f8 <_free_r>
 8006af6:	e7e9      	b.n	8006acc <_realloc_r+0x1c>
 8006af8:	4635      	mov	r5, r6
 8006afa:	e7e7      	b.n	8006acc <_realloc_r+0x1c>

08006afc <__sfputc_r>:
 8006afc:	6893      	ldr	r3, [r2, #8]
 8006afe:	b410      	push	{r4}
 8006b00:	3b01      	subs	r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	6093      	str	r3, [r2, #8]
 8006b06:	da07      	bge.n	8006b18 <__sfputc_r+0x1c>
 8006b08:	6994      	ldr	r4, [r2, #24]
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	db01      	blt.n	8006b12 <__sfputc_r+0x16>
 8006b0e:	290a      	cmp	r1, #10
 8006b10:	d102      	bne.n	8006b18 <__sfputc_r+0x1c>
 8006b12:	bc10      	pop	{r4}
 8006b14:	f000 b94a 	b.w	8006dac <__swbuf_r>
 8006b18:	6813      	ldr	r3, [r2, #0]
 8006b1a:	1c58      	adds	r0, r3, #1
 8006b1c:	6010      	str	r0, [r2, #0]
 8006b1e:	7019      	strb	r1, [r3, #0]
 8006b20:	4608      	mov	r0, r1
 8006b22:	bc10      	pop	{r4}
 8006b24:	4770      	bx	lr

08006b26 <__sfputs_r>:
 8006b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b28:	4606      	mov	r6, r0
 8006b2a:	460f      	mov	r7, r1
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	18d5      	adds	r5, r2, r3
 8006b30:	42ac      	cmp	r4, r5
 8006b32:	d101      	bne.n	8006b38 <__sfputs_r+0x12>
 8006b34:	2000      	movs	r0, #0
 8006b36:	e007      	b.n	8006b48 <__sfputs_r+0x22>
 8006b38:	463a      	mov	r2, r7
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b40:	f7ff ffdc 	bl	8006afc <__sfputc_r>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d1f3      	bne.n	8006b30 <__sfputs_r+0xa>
 8006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b4c <_vfiprintf_r>:
 8006b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	460d      	mov	r5, r1
 8006b52:	4614      	mov	r4, r2
 8006b54:	4698      	mov	r8, r3
 8006b56:	4606      	mov	r6, r0
 8006b58:	b09d      	sub	sp, #116	; 0x74
 8006b5a:	b118      	cbz	r0, 8006b64 <_vfiprintf_r+0x18>
 8006b5c:	6983      	ldr	r3, [r0, #24]
 8006b5e:	b90b      	cbnz	r3, 8006b64 <_vfiprintf_r+0x18>
 8006b60:	f7ff febc 	bl	80068dc <__sinit>
 8006b64:	4b89      	ldr	r3, [pc, #548]	; (8006d8c <_vfiprintf_r+0x240>)
 8006b66:	429d      	cmp	r5, r3
 8006b68:	d11b      	bne.n	8006ba2 <_vfiprintf_r+0x56>
 8006b6a:	6875      	ldr	r5, [r6, #4]
 8006b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b6e:	07d9      	lsls	r1, r3, #31
 8006b70:	d405      	bmi.n	8006b7e <_vfiprintf_r+0x32>
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	059a      	lsls	r2, r3, #22
 8006b76:	d402      	bmi.n	8006b7e <_vfiprintf_r+0x32>
 8006b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b7a:	f7ff ff5f 	bl	8006a3c <__retarget_lock_acquire_recursive>
 8006b7e:	89ab      	ldrh	r3, [r5, #12]
 8006b80:	071b      	lsls	r3, r3, #28
 8006b82:	d501      	bpl.n	8006b88 <_vfiprintf_r+0x3c>
 8006b84:	692b      	ldr	r3, [r5, #16]
 8006b86:	b9eb      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x78>
 8006b88:	4629      	mov	r1, r5
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 f96e 	bl	8006e6c <__swsetup_r>
 8006b90:	b1c0      	cbz	r0, 8006bc4 <_vfiprintf_r+0x78>
 8006b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b94:	07dc      	lsls	r4, r3, #31
 8006b96:	d50e      	bpl.n	8006bb6 <_vfiprintf_r+0x6a>
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	b01d      	add	sp, #116	; 0x74
 8006b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba2:	4b7b      	ldr	r3, [pc, #492]	; (8006d90 <_vfiprintf_r+0x244>)
 8006ba4:	429d      	cmp	r5, r3
 8006ba6:	d101      	bne.n	8006bac <_vfiprintf_r+0x60>
 8006ba8:	68b5      	ldr	r5, [r6, #8]
 8006baa:	e7df      	b.n	8006b6c <_vfiprintf_r+0x20>
 8006bac:	4b79      	ldr	r3, [pc, #484]	; (8006d94 <_vfiprintf_r+0x248>)
 8006bae:	429d      	cmp	r5, r3
 8006bb0:	bf08      	it	eq
 8006bb2:	68f5      	ldreq	r5, [r6, #12]
 8006bb4:	e7da      	b.n	8006b6c <_vfiprintf_r+0x20>
 8006bb6:	89ab      	ldrh	r3, [r5, #12]
 8006bb8:	0598      	lsls	r0, r3, #22
 8006bba:	d4ed      	bmi.n	8006b98 <_vfiprintf_r+0x4c>
 8006bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bbe:	f7ff ff3e 	bl	8006a3e <__retarget_lock_release_recursive>
 8006bc2:	e7e9      	b.n	8006b98 <_vfiprintf_r+0x4c>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	2320      	movs	r3, #32
 8006bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bce:	2330      	movs	r3, #48	; 0x30
 8006bd0:	f04f 0901 	mov.w	r9, #1
 8006bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bd8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006d98 <_vfiprintf_r+0x24c>
 8006bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006be0:	4623      	mov	r3, r4
 8006be2:	469a      	mov	sl, r3
 8006be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006be8:	b10a      	cbz	r2, 8006bee <_vfiprintf_r+0xa2>
 8006bea:	2a25      	cmp	r2, #37	; 0x25
 8006bec:	d1f9      	bne.n	8006be2 <_vfiprintf_r+0x96>
 8006bee:	ebba 0b04 	subs.w	fp, sl, r4
 8006bf2:	d00b      	beq.n	8006c0c <_vfiprintf_r+0xc0>
 8006bf4:	465b      	mov	r3, fp
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f7ff ff93 	bl	8006b26 <__sfputs_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	f000 80aa 	beq.w	8006d5a <_vfiprintf_r+0x20e>
 8006c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c08:	445a      	add	r2, fp
 8006c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80a2 	beq.w	8006d5a <_vfiprintf_r+0x20e>
 8006c16:	2300      	movs	r3, #0
 8006c18:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c20:	f10a 0a01 	add.w	sl, sl, #1
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	9307      	str	r3, [sp, #28]
 8006c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c2e:	4654      	mov	r4, sl
 8006c30:	2205      	movs	r2, #5
 8006c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c36:	4858      	ldr	r0, [pc, #352]	; (8006d98 <_vfiprintf_r+0x24c>)
 8006c38:	f7fe fab2 	bl	80051a0 <memchr>
 8006c3c:	9a04      	ldr	r2, [sp, #16]
 8006c3e:	b9d8      	cbnz	r0, 8006c78 <_vfiprintf_r+0x12c>
 8006c40:	06d1      	lsls	r1, r2, #27
 8006c42:	bf44      	itt	mi
 8006c44:	2320      	movmi	r3, #32
 8006c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c4a:	0713      	lsls	r3, r2, #28
 8006c4c:	bf44      	itt	mi
 8006c4e:	232b      	movmi	r3, #43	; 0x2b
 8006c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c54:	f89a 3000 	ldrb.w	r3, [sl]
 8006c58:	2b2a      	cmp	r3, #42	; 0x2a
 8006c5a:	d015      	beq.n	8006c88 <_vfiprintf_r+0x13c>
 8006c5c:	4654      	mov	r4, sl
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f04f 0c0a 	mov.w	ip, #10
 8006c64:	9a07      	ldr	r2, [sp, #28]
 8006c66:	4621      	mov	r1, r4
 8006c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c6c:	3b30      	subs	r3, #48	; 0x30
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	d94e      	bls.n	8006d10 <_vfiprintf_r+0x1c4>
 8006c72:	b1b0      	cbz	r0, 8006ca2 <_vfiprintf_r+0x156>
 8006c74:	9207      	str	r2, [sp, #28]
 8006c76:	e014      	b.n	8006ca2 <_vfiprintf_r+0x156>
 8006c78:	eba0 0308 	sub.w	r3, r0, r8
 8006c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c80:	4313      	orrs	r3, r2
 8006c82:	46a2      	mov	sl, r4
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	e7d2      	b.n	8006c2e <_vfiprintf_r+0xe2>
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	1d19      	adds	r1, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	9103      	str	r1, [sp, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfbb      	ittet	lt
 8006c94:	425b      	neglt	r3, r3
 8006c96:	f042 0202 	orrlt.w	r2, r2, #2
 8006c9a:	9307      	strge	r3, [sp, #28]
 8006c9c:	9307      	strlt	r3, [sp, #28]
 8006c9e:	bfb8      	it	lt
 8006ca0:	9204      	strlt	r2, [sp, #16]
 8006ca2:	7823      	ldrb	r3, [r4, #0]
 8006ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ca6:	d10c      	bne.n	8006cc2 <_vfiprintf_r+0x176>
 8006ca8:	7863      	ldrb	r3, [r4, #1]
 8006caa:	2b2a      	cmp	r3, #42	; 0x2a
 8006cac:	d135      	bne.n	8006d1a <_vfiprintf_r+0x1ce>
 8006cae:	9b03      	ldr	r3, [sp, #12]
 8006cb0:	3402      	adds	r4, #2
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	9203      	str	r2, [sp, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	bfb8      	it	lt
 8006cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cc0:	9305      	str	r3, [sp, #20]
 8006cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006da8 <_vfiprintf_r+0x25c>
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	4650      	mov	r0, sl
 8006cca:	7821      	ldrb	r1, [r4, #0]
 8006ccc:	f7fe fa68 	bl	80051a0 <memchr>
 8006cd0:	b140      	cbz	r0, 8006ce4 <_vfiprintf_r+0x198>
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	eba0 000a 	sub.w	r0, r0, sl
 8006cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8006cdc:	9b04      	ldr	r3, [sp, #16]
 8006cde:	3401      	adds	r4, #1
 8006ce0:	4303      	orrs	r3, r0
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce8:	2206      	movs	r2, #6
 8006cea:	482c      	ldr	r0, [pc, #176]	; (8006d9c <_vfiprintf_r+0x250>)
 8006cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cf0:	f7fe fa56 	bl	80051a0 <memchr>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d03f      	beq.n	8006d78 <_vfiprintf_r+0x22c>
 8006cf8:	4b29      	ldr	r3, [pc, #164]	; (8006da0 <_vfiprintf_r+0x254>)
 8006cfa:	bb1b      	cbnz	r3, 8006d44 <_vfiprintf_r+0x1f8>
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	3307      	adds	r3, #7
 8006d00:	f023 0307 	bic.w	r3, r3, #7
 8006d04:	3308      	adds	r3, #8
 8006d06:	9303      	str	r3, [sp, #12]
 8006d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0a:	443b      	add	r3, r7
 8006d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0e:	e767      	b.n	8006be0 <_vfiprintf_r+0x94>
 8006d10:	460c      	mov	r4, r1
 8006d12:	2001      	movs	r0, #1
 8006d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d18:	e7a5      	b.n	8006c66 <_vfiprintf_r+0x11a>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f04f 0c0a 	mov.w	ip, #10
 8006d20:	4619      	mov	r1, r3
 8006d22:	3401      	adds	r4, #1
 8006d24:	9305      	str	r3, [sp, #20]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d2c:	3a30      	subs	r2, #48	; 0x30
 8006d2e:	2a09      	cmp	r2, #9
 8006d30:	d903      	bls.n	8006d3a <_vfiprintf_r+0x1ee>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0c5      	beq.n	8006cc2 <_vfiprintf_r+0x176>
 8006d36:	9105      	str	r1, [sp, #20]
 8006d38:	e7c3      	b.n	8006cc2 <_vfiprintf_r+0x176>
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d42:	e7f0      	b.n	8006d26 <_vfiprintf_r+0x1da>
 8006d44:	ab03      	add	r3, sp, #12
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	462a      	mov	r2, r5
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	4b15      	ldr	r3, [pc, #84]	; (8006da4 <_vfiprintf_r+0x258>)
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	f7fc ff18 	bl	8003b84 <_printf_float>
 8006d54:	4607      	mov	r7, r0
 8006d56:	1c78      	adds	r0, r7, #1
 8006d58:	d1d6      	bne.n	8006d08 <_vfiprintf_r+0x1bc>
 8006d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d5c:	07d9      	lsls	r1, r3, #31
 8006d5e:	d405      	bmi.n	8006d6c <_vfiprintf_r+0x220>
 8006d60:	89ab      	ldrh	r3, [r5, #12]
 8006d62:	059a      	lsls	r2, r3, #22
 8006d64:	d402      	bmi.n	8006d6c <_vfiprintf_r+0x220>
 8006d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d68:	f7ff fe69 	bl	8006a3e <__retarget_lock_release_recursive>
 8006d6c:	89ab      	ldrh	r3, [r5, #12]
 8006d6e:	065b      	lsls	r3, r3, #25
 8006d70:	f53f af12 	bmi.w	8006b98 <_vfiprintf_r+0x4c>
 8006d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d76:	e711      	b.n	8006b9c <_vfiprintf_r+0x50>
 8006d78:	ab03      	add	r3, sp, #12
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <_vfiprintf_r+0x258>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	f7fd f99a 	bl	80040bc <_printf_i>
 8006d88:	e7e4      	b.n	8006d54 <_vfiprintf_r+0x208>
 8006d8a:	bf00      	nop
 8006d8c:	08007580 	.word	0x08007580
 8006d90:	080075a0 	.word	0x080075a0
 8006d94:	08007560 	.word	0x08007560
 8006d98:	080073f4 	.word	0x080073f4
 8006d9c:	080073fe 	.word	0x080073fe
 8006da0:	08003b85 	.word	0x08003b85
 8006da4:	08006b27 	.word	0x08006b27
 8006da8:	080073fa 	.word	0x080073fa

08006dac <__swbuf_r>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	460e      	mov	r6, r1
 8006db0:	4614      	mov	r4, r2
 8006db2:	4605      	mov	r5, r0
 8006db4:	b118      	cbz	r0, 8006dbe <__swbuf_r+0x12>
 8006db6:	6983      	ldr	r3, [r0, #24]
 8006db8:	b90b      	cbnz	r3, 8006dbe <__swbuf_r+0x12>
 8006dba:	f7ff fd8f 	bl	80068dc <__sinit>
 8006dbe:	4b21      	ldr	r3, [pc, #132]	; (8006e44 <__swbuf_r+0x98>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	d12b      	bne.n	8006e1c <__swbuf_r+0x70>
 8006dc4:	686c      	ldr	r4, [r5, #4]
 8006dc6:	69a3      	ldr	r3, [r4, #24]
 8006dc8:	60a3      	str	r3, [r4, #8]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	071a      	lsls	r2, r3, #28
 8006dce:	d52f      	bpl.n	8006e30 <__swbuf_r+0x84>
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	b36b      	cbz	r3, 8006e30 <__swbuf_r+0x84>
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	b2f6      	uxtb	r6, r6
 8006dda:	1ac0      	subs	r0, r0, r3
 8006ddc:	6963      	ldr	r3, [r4, #20]
 8006dde:	4637      	mov	r7, r6
 8006de0:	4283      	cmp	r3, r0
 8006de2:	dc04      	bgt.n	8006dee <__swbuf_r+0x42>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f7ff fce4 	bl	80067b4 <_fflush_r>
 8006dec:	bb30      	cbnz	r0, 8006e3c <__swbuf_r+0x90>
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	3001      	adds	r0, #1
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60a3      	str	r3, [r4, #8]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	6022      	str	r2, [r4, #0]
 8006dfc:	701e      	strb	r6, [r3, #0]
 8006dfe:	6963      	ldr	r3, [r4, #20]
 8006e00:	4283      	cmp	r3, r0
 8006e02:	d004      	beq.n	8006e0e <__swbuf_r+0x62>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	07db      	lsls	r3, r3, #31
 8006e08:	d506      	bpl.n	8006e18 <__swbuf_r+0x6c>
 8006e0a:	2e0a      	cmp	r6, #10
 8006e0c:	d104      	bne.n	8006e18 <__swbuf_r+0x6c>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7ff fccf 	bl	80067b4 <_fflush_r>
 8006e16:	b988      	cbnz	r0, 8006e3c <__swbuf_r+0x90>
 8006e18:	4638      	mov	r0, r7
 8006e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <__swbuf_r+0x9c>)
 8006e1e:	429c      	cmp	r4, r3
 8006e20:	d101      	bne.n	8006e26 <__swbuf_r+0x7a>
 8006e22:	68ac      	ldr	r4, [r5, #8]
 8006e24:	e7cf      	b.n	8006dc6 <__swbuf_r+0x1a>
 8006e26:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <__swbuf_r+0xa0>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	bf08      	it	eq
 8006e2c:	68ec      	ldreq	r4, [r5, #12]
 8006e2e:	e7ca      	b.n	8006dc6 <__swbuf_r+0x1a>
 8006e30:	4621      	mov	r1, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 f81a 	bl	8006e6c <__swsetup_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d0cb      	beq.n	8006dd4 <__swbuf_r+0x28>
 8006e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e40:	e7ea      	b.n	8006e18 <__swbuf_r+0x6c>
 8006e42:	bf00      	nop
 8006e44:	08007580 	.word	0x08007580
 8006e48:	080075a0 	.word	0x080075a0
 8006e4c:	08007560 	.word	0x08007560

08006e50 <__ascii_wctomb>:
 8006e50:	4603      	mov	r3, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	b141      	cbz	r1, 8006e68 <__ascii_wctomb+0x18>
 8006e56:	2aff      	cmp	r2, #255	; 0xff
 8006e58:	d904      	bls.n	8006e64 <__ascii_wctomb+0x14>
 8006e5a:	228a      	movs	r2, #138	; 0x8a
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	4770      	bx	lr
 8006e64:	2001      	movs	r0, #1
 8006e66:	700a      	strb	r2, [r1, #0]
 8006e68:	4770      	bx	lr
	...

08006e6c <__swsetup_r>:
 8006e6c:	4b32      	ldr	r3, [pc, #200]	; (8006f38 <__swsetup_r+0xcc>)
 8006e6e:	b570      	push	{r4, r5, r6, lr}
 8006e70:	681d      	ldr	r5, [r3, #0]
 8006e72:	4606      	mov	r6, r0
 8006e74:	460c      	mov	r4, r1
 8006e76:	b125      	cbz	r5, 8006e82 <__swsetup_r+0x16>
 8006e78:	69ab      	ldr	r3, [r5, #24]
 8006e7a:	b913      	cbnz	r3, 8006e82 <__swsetup_r+0x16>
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f7ff fd2d 	bl	80068dc <__sinit>
 8006e82:	4b2e      	ldr	r3, [pc, #184]	; (8006f3c <__swsetup_r+0xd0>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	d10f      	bne.n	8006ea8 <__swsetup_r+0x3c>
 8006e88:	686c      	ldr	r4, [r5, #4]
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e90:	0719      	lsls	r1, r3, #28
 8006e92:	d42c      	bmi.n	8006eee <__swsetup_r+0x82>
 8006e94:	06dd      	lsls	r5, r3, #27
 8006e96:	d411      	bmi.n	8006ebc <__swsetup_r+0x50>
 8006e98:	2309      	movs	r3, #9
 8006e9a:	6033      	str	r3, [r6, #0]
 8006e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	e03e      	b.n	8006f26 <__swsetup_r+0xba>
 8006ea8:	4b25      	ldr	r3, [pc, #148]	; (8006f40 <__swsetup_r+0xd4>)
 8006eaa:	429c      	cmp	r4, r3
 8006eac:	d101      	bne.n	8006eb2 <__swsetup_r+0x46>
 8006eae:	68ac      	ldr	r4, [r5, #8]
 8006eb0:	e7eb      	b.n	8006e8a <__swsetup_r+0x1e>
 8006eb2:	4b24      	ldr	r3, [pc, #144]	; (8006f44 <__swsetup_r+0xd8>)
 8006eb4:	429c      	cmp	r4, r3
 8006eb6:	bf08      	it	eq
 8006eb8:	68ec      	ldreq	r4, [r5, #12]
 8006eba:	e7e6      	b.n	8006e8a <__swsetup_r+0x1e>
 8006ebc:	0758      	lsls	r0, r3, #29
 8006ebe:	d512      	bpl.n	8006ee6 <__swsetup_r+0x7a>
 8006ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec2:	b141      	cbz	r1, 8006ed6 <__swsetup_r+0x6a>
 8006ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec8:	4299      	cmp	r1, r3
 8006eca:	d002      	beq.n	8006ed2 <__swsetup_r+0x66>
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7fe fd13 	bl	80058f8 <_free_r>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6063      	str	r3, [r4, #4]
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	f043 0308 	orr.w	r3, r3, #8
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	b94b      	cbnz	r3, 8006f06 <__swsetup_r+0x9a>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efc:	d003      	beq.n	8006f06 <__swsetup_r+0x9a>
 8006efe:	4621      	mov	r1, r4
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f84d 	bl	8006fa0 <__smakebuf_r>
 8006f06:	89a0      	ldrh	r0, [r4, #12]
 8006f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f0c:	f010 0301 	ands.w	r3, r0, #1
 8006f10:	d00a      	beq.n	8006f28 <__swsetup_r+0xbc>
 8006f12:	2300      	movs	r3, #0
 8006f14:	60a3      	str	r3, [r4, #8]
 8006f16:	6963      	ldr	r3, [r4, #20]
 8006f18:	425b      	negs	r3, r3
 8006f1a:	61a3      	str	r3, [r4, #24]
 8006f1c:	6923      	ldr	r3, [r4, #16]
 8006f1e:	b943      	cbnz	r3, 8006f32 <__swsetup_r+0xc6>
 8006f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f24:	d1ba      	bne.n	8006e9c <__swsetup_r+0x30>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	0781      	lsls	r1, r0, #30
 8006f2a:	bf58      	it	pl
 8006f2c:	6963      	ldrpl	r3, [r4, #20]
 8006f2e:	60a3      	str	r3, [r4, #8]
 8006f30:	e7f4      	b.n	8006f1c <__swsetup_r+0xb0>
 8006f32:	2000      	movs	r0, #0
 8006f34:	e7f7      	b.n	8006f26 <__swsetup_r+0xba>
 8006f36:	bf00      	nop
 8006f38:	20000018 	.word	0x20000018
 8006f3c:	08007580 	.word	0x08007580
 8006f40:	080075a0 	.word	0x080075a0
 8006f44:	08007560 	.word	0x08007560

08006f48 <abort>:
 8006f48:	2006      	movs	r0, #6
 8006f4a:	b508      	push	{r3, lr}
 8006f4c:	f000 f898 	bl	8007080 <raise>
 8006f50:	2001      	movs	r0, #1
 8006f52:	f7f9 ffa6 	bl	8000ea2 <_exit>

08006f56 <__swhatbuf_r>:
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	460e      	mov	r6, r1
 8006f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5e:	4614      	mov	r4, r2
 8006f60:	2900      	cmp	r1, #0
 8006f62:	461d      	mov	r5, r3
 8006f64:	b096      	sub	sp, #88	; 0x58
 8006f66:	da07      	bge.n	8006f78 <__swhatbuf_r+0x22>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	602b      	str	r3, [r5, #0]
 8006f6c:	89b3      	ldrh	r3, [r6, #12]
 8006f6e:	061a      	lsls	r2, r3, #24
 8006f70:	d410      	bmi.n	8006f94 <__swhatbuf_r+0x3e>
 8006f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f76:	e00e      	b.n	8006f96 <__swhatbuf_r+0x40>
 8006f78:	466a      	mov	r2, sp
 8006f7a:	f000 f89d 	bl	80070b8 <_fstat_r>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	dbf2      	blt.n	8006f68 <__swhatbuf_r+0x12>
 8006f82:	9a01      	ldr	r2, [sp, #4]
 8006f84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f8c:	425a      	negs	r2, r3
 8006f8e:	415a      	adcs	r2, r3
 8006f90:	602a      	str	r2, [r5, #0]
 8006f92:	e7ee      	b.n	8006f72 <__swhatbuf_r+0x1c>
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	2000      	movs	r0, #0
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	b016      	add	sp, #88	; 0x58
 8006f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fa0 <__smakebuf_r>:
 8006fa0:	898b      	ldrh	r3, [r1, #12]
 8006fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fa4:	079d      	lsls	r5, r3, #30
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	d507      	bpl.n	8006fbc <__smakebuf_r+0x1c>
 8006fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	6163      	str	r3, [r4, #20]
 8006fb8:	b002      	add	sp, #8
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	466a      	mov	r2, sp
 8006fbe:	ab01      	add	r3, sp, #4
 8006fc0:	f7ff ffc9 	bl	8006f56 <__swhatbuf_r>
 8006fc4:	9900      	ldr	r1, [sp, #0]
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7fe fce1 	bl	8005990 <_malloc_r>
 8006fce:	b948      	cbnz	r0, 8006fe4 <__smakebuf_r+0x44>
 8006fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd4:	059a      	lsls	r2, r3, #22
 8006fd6:	d4ef      	bmi.n	8006fb8 <__smakebuf_r+0x18>
 8006fd8:	f023 0303 	bic.w	r3, r3, #3
 8006fdc:	f043 0302 	orr.w	r3, r3, #2
 8006fe0:	81a3      	strh	r3, [r4, #12]
 8006fe2:	e7e3      	b.n	8006fac <__smakebuf_r+0xc>
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <__smakebuf_r+0x7c>)
 8006fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	6020      	str	r0, [r4, #0]
 8006fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff0:	81a3      	strh	r3, [r4, #12]
 8006ff2:	9b00      	ldr	r3, [sp, #0]
 8006ff4:	6120      	str	r0, [r4, #16]
 8006ff6:	6163      	str	r3, [r4, #20]
 8006ff8:	9b01      	ldr	r3, [sp, #4]
 8006ffa:	b15b      	cbz	r3, 8007014 <__smakebuf_r+0x74>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007002:	f000 f86b 	bl	80070dc <_isatty_r>
 8007006:	b128      	cbz	r0, 8007014 <__smakebuf_r+0x74>
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	81a3      	strh	r3, [r4, #12]
 8007014:	89a0      	ldrh	r0, [r4, #12]
 8007016:	4305      	orrs	r5, r0
 8007018:	81a5      	strh	r5, [r4, #12]
 800701a:	e7cd      	b.n	8006fb8 <__smakebuf_r+0x18>
 800701c:	08006875 	.word	0x08006875

08007020 <_malloc_usable_size_r>:
 8007020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007024:	1f18      	subs	r0, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	bfbc      	itt	lt
 800702a:	580b      	ldrlt	r3, [r1, r0]
 800702c:	18c0      	addlt	r0, r0, r3
 800702e:	4770      	bx	lr

08007030 <_raise_r>:
 8007030:	291f      	cmp	r1, #31
 8007032:	b538      	push	{r3, r4, r5, lr}
 8007034:	4604      	mov	r4, r0
 8007036:	460d      	mov	r5, r1
 8007038:	d904      	bls.n	8007044 <_raise_r+0x14>
 800703a:	2316      	movs	r3, #22
 800703c:	6003      	str	r3, [r0, #0]
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007046:	b112      	cbz	r2, 800704e <_raise_r+0x1e>
 8007048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800704c:	b94b      	cbnz	r3, 8007062 <_raise_r+0x32>
 800704e:	4620      	mov	r0, r4
 8007050:	f000 f830 	bl	80070b4 <_getpid_r>
 8007054:	462a      	mov	r2, r5
 8007056:	4601      	mov	r1, r0
 8007058:	4620      	mov	r0, r4
 800705a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800705e:	f000 b817 	b.w	8007090 <_kill_r>
 8007062:	2b01      	cmp	r3, #1
 8007064:	d00a      	beq.n	800707c <_raise_r+0x4c>
 8007066:	1c59      	adds	r1, r3, #1
 8007068:	d103      	bne.n	8007072 <_raise_r+0x42>
 800706a:	2316      	movs	r3, #22
 800706c:	6003      	str	r3, [r0, #0]
 800706e:	2001      	movs	r0, #1
 8007070:	e7e7      	b.n	8007042 <_raise_r+0x12>
 8007072:	2400      	movs	r4, #0
 8007074:	4628      	mov	r0, r5
 8007076:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800707a:	4798      	blx	r3
 800707c:	2000      	movs	r0, #0
 800707e:	e7e0      	b.n	8007042 <_raise_r+0x12>

08007080 <raise>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <raise+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f7ff bfd3 	b.w	8007030 <_raise_r>
 800708a:	bf00      	nop
 800708c:	20000018 	.word	0x20000018

08007090 <_kill_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	2300      	movs	r3, #0
 8007094:	4d06      	ldr	r5, [pc, #24]	; (80070b0 <_kill_r+0x20>)
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	602b      	str	r3, [r5, #0]
 800709e:	f7f9 fef0 	bl	8000e82 <_kill>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	d102      	bne.n	80070ac <_kill_r+0x1c>
 80070a6:	682b      	ldr	r3, [r5, #0]
 80070a8:	b103      	cbz	r3, 80070ac <_kill_r+0x1c>
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	bd38      	pop	{r3, r4, r5, pc}
 80070ae:	bf00      	nop
 80070b0:	20000324 	.word	0x20000324

080070b4 <_getpid_r>:
 80070b4:	f7f9 bede 	b.w	8000e74 <_getpid>

080070b8 <_fstat_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	2300      	movs	r3, #0
 80070bc:	4d06      	ldr	r5, [pc, #24]	; (80070d8 <_fstat_r+0x20>)
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	f7f9 ff3a 	bl	8000f3e <_fstat>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	d102      	bne.n	80070d4 <_fstat_r+0x1c>
 80070ce:	682b      	ldr	r3, [r5, #0]
 80070d0:	b103      	cbz	r3, 80070d4 <_fstat_r+0x1c>
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	bd38      	pop	{r3, r4, r5, pc}
 80070d6:	bf00      	nop
 80070d8:	20000324 	.word	0x20000324

080070dc <_isatty_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	2300      	movs	r3, #0
 80070e0:	4d05      	ldr	r5, [pc, #20]	; (80070f8 <_isatty_r+0x1c>)
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7f9 ff38 	bl	8000f5c <_isatty>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_isatty_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_isatty_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000324 	.word	0x20000324

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
